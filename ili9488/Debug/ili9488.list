
ili9488.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008310  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025bc  08008420  08008420  00018420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9dc  0800a9dc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800a9dc  0800a9dc  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a9dc  0800a9dc  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9dc  0800a9dc  0001a9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a9e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000394  200001ec  0800abd0  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0800abd0  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY
 13 .debug_info   000120da  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e64  00000000  00000000  00032332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  00035198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e16  00000000  00000000  000363b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ad77  00000000  00000000  000371c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a28  00000000  00000000  00051f3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000950d0  00000000  00000000  00067965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d30  00000000  00000000  000fca38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00102768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	08008408 	.word	0x08008408

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	08008408 	.word	0x08008408

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <ILI9488_Init>:
uint8_t textsize_y;
 uint8_t rotation;


void ILI9488_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	486a      	ldr	r0, [pc, #424]	; (80010f8 <ILI9488_Init+0x1b4>)
 8000f4e:	f002 fe9f 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f52:	200a      	movs	r0, #10
 8000f54:	f001 fc2e 	bl	80027b4 <HAL_Delay>
	HAL_GPIO_WritePin(TFT_RST_GPIO_Port,TFT_RST_Pin,GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2104      	movs	r1, #4
 8000f5c:	4866      	ldr	r0, [pc, #408]	; (80010f8 <ILI9488_Init+0x1b4>)
 8000f5e:	f002 fe97 	bl	8003c90 <HAL_GPIO_WritePin>
	_width=ILI9488_TFTWIDTH;
 8000f62:	4b66      	ldr	r3, [pc, #408]	; (80010fc <ILI9488_Init+0x1b8>)
 8000f64:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000f68:	801a      	strh	r2, [r3, #0]
	_height=ILI9488_TFTHEIGHT;
 8000f6a:	4b65      	ldr	r3, [pc, #404]	; (8001100 <ILI9488_Init+0x1bc>)
 8000f6c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000f70:	801a      	strh	r2, [r3, #0]

	writecommand(0xE0);
 8000f72:	20e0      	movs	r0, #224	; 0xe0
 8000f74:	f000 fa0a 	bl	800138c <writecommand>
	writedata(0x00);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 fa89 	bl	8001490 <writedata>
	writedata(0x03);
 8000f7e:	2003      	movs	r0, #3
 8000f80:	f000 fa86 	bl	8001490 <writedata>
	writedata(0x09);
 8000f84:	2009      	movs	r0, #9
 8000f86:	f000 fa83 	bl	8001490 <writedata>
	writedata(0x08);
 8000f8a:	2008      	movs	r0, #8
 8000f8c:	f000 fa80 	bl	8001490 <writedata>
	writedata(0x16);
 8000f90:	2016      	movs	r0, #22
 8000f92:	f000 fa7d 	bl	8001490 <writedata>
	writedata(0x0A);
 8000f96:	200a      	movs	r0, #10
 8000f98:	f000 fa7a 	bl	8001490 <writedata>
	writedata(0x3F);
 8000f9c:	203f      	movs	r0, #63	; 0x3f
 8000f9e:	f000 fa77 	bl	8001490 <writedata>
	writedata(0x78);
 8000fa2:	2078      	movs	r0, #120	; 0x78
 8000fa4:	f000 fa74 	bl	8001490 <writedata>
	writedata(0x4C);
 8000fa8:	204c      	movs	r0, #76	; 0x4c
 8000faa:	f000 fa71 	bl	8001490 <writedata>
	writedata(0x09);
 8000fae:	2009      	movs	r0, #9
 8000fb0:	f000 fa6e 	bl	8001490 <writedata>
	writedata(0x0A);
 8000fb4:	200a      	movs	r0, #10
 8000fb6:	f000 fa6b 	bl	8001490 <writedata>
	writedata(0x08);
 8000fba:	2008      	movs	r0, #8
 8000fbc:	f000 fa68 	bl	8001490 <writedata>
	writedata(0x16);
 8000fc0:	2016      	movs	r0, #22
 8000fc2:	f000 fa65 	bl	8001490 <writedata>
	writedata(0x1A);
 8000fc6:	201a      	movs	r0, #26
 8000fc8:	f000 fa62 	bl	8001490 <writedata>
	writedata(0x0F);
 8000fcc:	200f      	movs	r0, #15
 8000fce:	f000 fa5f 	bl	8001490 <writedata>

	writecommand(0XE1);
 8000fd2:	20e1      	movs	r0, #225	; 0xe1
 8000fd4:	f000 f9da 	bl	800138c <writecommand>
	writedata(0x00);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f000 fa59 	bl	8001490 <writedata>
	writedata(0x16);
 8000fde:	2016      	movs	r0, #22
 8000fe0:	f000 fa56 	bl	8001490 <writedata>
	writedata(0x19);
 8000fe4:	2019      	movs	r0, #25
 8000fe6:	f000 fa53 	bl	8001490 <writedata>
	writedata(0x03);
 8000fea:	2003      	movs	r0, #3
 8000fec:	f000 fa50 	bl	8001490 <writedata>
	writedata(0x0F);
 8000ff0:	200f      	movs	r0, #15
 8000ff2:	f000 fa4d 	bl	8001490 <writedata>
	writedata(0x05);
 8000ff6:	2005      	movs	r0, #5
 8000ff8:	f000 fa4a 	bl	8001490 <writedata>
	writedata(0x32);
 8000ffc:	2032      	movs	r0, #50	; 0x32
 8000ffe:	f000 fa47 	bl	8001490 <writedata>
	writedata(0x45);
 8001002:	2045      	movs	r0, #69	; 0x45
 8001004:	f000 fa44 	bl	8001490 <writedata>
	writedata(0x46);
 8001008:	2046      	movs	r0, #70	; 0x46
 800100a:	f000 fa41 	bl	8001490 <writedata>
	writedata(0x04);
 800100e:	2004      	movs	r0, #4
 8001010:	f000 fa3e 	bl	8001490 <writedata>
	writedata(0x0E);
 8001014:	200e      	movs	r0, #14
 8001016:	f000 fa3b 	bl	8001490 <writedata>
	writedata(0x0D);
 800101a:	200d      	movs	r0, #13
 800101c:	f000 fa38 	bl	8001490 <writedata>
	writedata(0x35);
 8001020:	2035      	movs	r0, #53	; 0x35
 8001022:	f000 fa35 	bl	8001490 <writedata>
	writedata(0x37);
 8001026:	2037      	movs	r0, #55	; 0x37
 8001028:	f000 fa32 	bl	8001490 <writedata>
	writedata(0x0F);
 800102c:	200f      	movs	r0, #15
 800102e:	f000 fa2f 	bl	8001490 <writedata>

	writecommand(0XC0);      //Power Control 1
 8001032:	20c0      	movs	r0, #192	; 0xc0
 8001034:	f000 f9aa 	bl	800138c <writecommand>
	writedata(0x17);    //Vreg1out
 8001038:	2017      	movs	r0, #23
 800103a:	f000 fa29 	bl	8001490 <writedata>
	writedata(0x15);    //Verg2out
 800103e:	2015      	movs	r0, #21
 8001040:	f000 fa26 	bl	8001490 <writedata>

	writecommand(0xC1);      //Power Control 2
 8001044:	20c1      	movs	r0, #193	; 0xc1
 8001046:	f000 f9a1 	bl	800138c <writecommand>
	writedata(0x41);    //VGH,VGL
 800104a:	2041      	movs	r0, #65	; 0x41
 800104c:	f000 fa20 	bl	8001490 <writedata>

	writecommand(0xC5);      //Power Control 3
 8001050:	20c5      	movs	r0, #197	; 0xc5
 8001052:	f000 f99b 	bl	800138c <writecommand>
	writedata(0x00);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 fa1a 	bl	8001490 <writedata>
	writedata(0x12);    //Vcom
 800105c:	2012      	movs	r0, #18
 800105e:	f000 fa17 	bl	8001490 <writedata>
	writedata(0x80);
 8001062:	2080      	movs	r0, #128	; 0x80
 8001064:	f000 fa14 	bl	8001490 <writedata>

	writecommand(0x36);      //Memory Access
 8001068:	2036      	movs	r0, #54	; 0x36
 800106a:	f000 f98f 	bl	800138c <writecommand>
	writedata(0x48);
 800106e:	2048      	movs	r0, #72	; 0x48
 8001070:	f000 fa0e 	bl	8001490 <writedata>

	writecommand(0x36);      // Interface Pixel Format
 8001074:	2036      	movs	r0, #54	; 0x36
 8001076:	f000 f989 	bl	800138c <writecommand>
	writedata(0x66); 	  //18 bit
 800107a:	2066      	movs	r0, #102	; 0x66
 800107c:	f000 fa08 	bl	8001490 <writedata>

	writecommand(0XB0);      // Interface Mode Control
 8001080:	20b0      	movs	r0, #176	; 0xb0
 8001082:	f000 f983 	bl	800138c <writecommand>
	writedata(0x80);     			 //SDO NOT USE
 8001086:	2080      	movs	r0, #128	; 0x80
 8001088:	f000 fa02 	bl	8001490 <writedata>

	writecommand(0xB1);      //Frame rate
 800108c:	20b1      	movs	r0, #177	; 0xb1
 800108e:	f000 f97d 	bl	800138c <writecommand>
	writedata(0xA0);    //60Hz
 8001092:	20a0      	movs	r0, #160	; 0xa0
 8001094:	f000 f9fc 	bl	8001490 <writedata>

	writecommand(0xB4);      //Display Inversion Control
 8001098:	20b4      	movs	r0, #180	; 0xb4
 800109a:	f000 f977 	bl	800138c <writecommand>
	writedata(0x02);    //2-dot
 800109e:	2002      	movs	r0, #2
 80010a0:	f000 f9f6 	bl	8001490 <writedata>

	writecommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 80010a4:	20b6      	movs	r0, #182	; 0xb6
 80010a6:	f000 f971 	bl	800138c <writecommand>

	writedata(0x02);    //MCU
 80010aa:	2002      	movs	r0, #2
 80010ac:	f000 f9f0 	bl	8001490 <writedata>
	writedata(0x02);    //Source,Gate scan dieection
 80010b0:	2002      	movs	r0, #2
 80010b2:	f000 f9ed 	bl	8001490 <writedata>

	writecommand(0XE9);      // Set Image Functio
 80010b6:	20e9      	movs	r0, #233	; 0xe9
 80010b8:	f000 f968 	bl	800138c <writecommand>
	writedata(0x00);    // Disable 24 bit data
 80010bc:	2000      	movs	r0, #0
 80010be:	f000 f9e7 	bl	8001490 <writedata>

	writecommand(0xF7);      // Adjust Control
 80010c2:	20f7      	movs	r0, #247	; 0xf7
 80010c4:	f000 f962 	bl	800138c <writecommand>
	writedata(0xA9);
 80010c8:	20a9      	movs	r0, #169	; 0xa9
 80010ca:	f000 f9e1 	bl	8001490 <writedata>
	writedata(0x51);
 80010ce:	2051      	movs	r0, #81	; 0x51
 80010d0:	f000 f9de 	bl	8001490 <writedata>
	writedata(0x2C);
 80010d4:	202c      	movs	r0, #44	; 0x2c
 80010d6:	f000 f9db 	bl	8001490 <writedata>
	writedata(0x82);    // D7 stream, loose
 80010da:	2082      	movs	r0, #130	; 0x82
 80010dc:	f000 f9d8 	bl	8001490 <writedata>

	writecommand(ILI9488_SLPOUT);    //Exit Sleep
 80010e0:	2011      	movs	r0, #17
 80010e2:	f000 f953 	bl	800138c <writecommand>

	HAL_Delay(120);
 80010e6:	2078      	movs	r0, #120	; 0x78
 80010e8:	f001 fb64 	bl	80027b4 <HAL_Delay>

	writecommand(ILI9488_DISPON);    //Display on
 80010ec:	2029      	movs	r0, #41	; 0x29
 80010ee:	f000 f94d 	bl	800138c <writecommand>


}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010800 	.word	0x40010800
 80010fc:	20000208 	.word	0x20000208
 8001100:	2000020a 	.word	0x2000020a

08001104 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4604      	mov	r4, r0
 800110c:	4608      	mov	r0, r1
 800110e:	4611      	mov	r1, r2
 8001110:	461a      	mov	r2, r3
 8001112:	4623      	mov	r3, r4
 8001114:	80fb      	strh	r3, [r7, #6]
 8001116:	4603      	mov	r3, r0
 8001118:	80bb      	strh	r3, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]
 800111e:	4613      	mov	r3, r2
 8001120:	803b      	strh	r3, [r7, #0]
	writecommand(ILI9488_CASET); // Column addr set
 8001122:	202a      	movs	r0, #42	; 0x2a
 8001124:	f000 f932 	bl	800138c <writecommand>
	writedata(x0 >> 8);
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	b29b      	uxth	r3, r3
 800112e:	b2db      	uxtb	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f9ad 	bl	8001490 <writedata>
	writedata(x0 & 0xFF);     // XSTART
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f9a8 	bl	8001490 <writedata>
	writedata(x1 >> 8);
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	0a1b      	lsrs	r3, r3, #8
 8001144:	b29b      	uxth	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f9a1 	bl	8001490 <writedata>
	writedata(x1 & 0xFF);     // XEND
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f99c 	bl	8001490 <writedata>
	writecommand(ILI9488_PASET); // Row addr set
 8001158:	202b      	movs	r0, #43	; 0x2b
 800115a:	f000 f917 	bl	800138c <writecommand>
	writedata(y0 >> 8);
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	b29b      	uxth	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f992 	bl	8001490 <writedata>
	writedata(y0 & 0xff);     // YSTART
 800116c:	88bb      	ldrh	r3, [r7, #4]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f98d 	bl	8001490 <writedata>
	writedata(y1 >> 8);
 8001176:	883b      	ldrh	r3, [r7, #0]
 8001178:	0a1b      	lsrs	r3, r3, #8
 800117a:	b29b      	uxth	r3, r3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f986 	bl	8001490 <writedata>
	writedata(y1 & 0xff);     // YEND
 8001184:	883b      	ldrh	r3, [r7, #0]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f981 	bl	8001490 <writedata>
	writecommand(ILI9488_RAMWR); // write to RAM
 800118e:	202c      	movs	r0, #44	; 0x2c
 8001190:	f000 f8fc 	bl	800138c <writecommand>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2102      	movs	r1, #2
 8001198:	4805      	ldr	r0, [pc, #20]	; (80011b0 <setAddrWindow+0xac>)
 800119a:	f002 fd79 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	2108      	movs	r1, #8
 80011a2:	4803      	ldr	r0, [pc, #12]	; (80011b0 <setAddrWindow+0xac>)
 80011a4:	f002 fd74 	bl	8003c90 <HAL_GPIO_WritePin>
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd90      	pop	{r4, r7, pc}
 80011b0:	40010800 	.word	0x40010800

080011b4 <fillRect>:
      err += dx;
    }
  }
}
void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80011b4:	b590      	push	{r4, r7, lr}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4604      	mov	r4, r0
 80011bc:	4608      	mov	r0, r1
 80011be:	4611      	mov	r1, r2
 80011c0:	461a      	mov	r2, r3
 80011c2:	4623      	mov	r3, r4
 80011c4:	80fb      	strh	r3, [r7, #6]
 80011c6:	4603      	mov	r3, r0
 80011c8:	80bb      	strh	r3, [r7, #4]
 80011ca:	460b      	mov	r3, r1
 80011cc:	807b      	strh	r3, [r7, #2]
 80011ce:	4613      	mov	r3, r2
 80011d0:	803b      	strh	r3, [r7, #0]
	if ((x >= _width) || (y >= _height))
 80011d2:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <fillRect+0x11c>)
 80011d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011dc:	429a      	cmp	r2, r3
 80011de:	da73      	bge.n	80012c8 <fillRect+0x114>
 80011e0:	4b3c      	ldr	r3, [pc, #240]	; (80012d4 <fillRect+0x120>)
 80011e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	da6c      	bge.n	80012c8 <fillRect+0x114>
		return;
	if ((x + w - 1) >= _width)
 80011ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a35      	ldr	r2, [pc, #212]	; (80012d0 <fillRect+0x11c>)
 80011fa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011fe:	4293      	cmp	r3, r2
 8001200:	dd07      	ble.n	8001212 <fillRect+0x5e>
		w = _width - x;
 8001202:	4b33      	ldr	r3, [pc, #204]	; (80012d0 <fillRect+0x11c>)
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	b29a      	uxth	r2, r3
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	b29b      	uxth	r3, r3
 8001210:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= _height)
 8001212:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001216:	f9b7 3000 	ldrsh.w	r3, [r7]
 800121a:	4413      	add	r3, r2
 800121c:	4a2d      	ldr	r2, [pc, #180]	; (80012d4 <fillRect+0x120>)
 800121e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001222:	4293      	cmp	r3, r2
 8001224:	dd07      	ble.n	8001236 <fillRect+0x82>
		h = _height - y;
 8001226:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <fillRect+0x120>)
 8001228:	f9b3 3000 	ldrsh.w	r3, [r3]
 800122c:	b29a      	uxth	r2, r3
 800122e:	88bb      	ldrh	r3, [r7, #4]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	b29b      	uxth	r3, r3
 8001234:	803b      	strh	r3, [r7, #0]

	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8001236:	88f8      	ldrh	r0, [r7, #6]
 8001238:	88b9      	ldrh	r1, [r7, #4]
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	887b      	ldrh	r3, [r7, #2]
 800123e:	4413      	add	r3, r2
 8001240:	b29b      	uxth	r3, r3
 8001242:	3b01      	subs	r3, #1
 8001244:	b29c      	uxth	r4, r3
 8001246:	88ba      	ldrh	r2, [r7, #4]
 8001248:	883b      	ldrh	r3, [r7, #0]
 800124a:	4413      	add	r3, r2
 800124c:	b29b      	uxth	r3, r3
 800124e:	3b01      	subs	r3, #1
 8001250:	b29b      	uxth	r3, r3
 8001252:	4622      	mov	r2, r4
 8001254:	f7ff ff56 	bl	8001104 <setAddrWindow>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 8001258:	2201      	movs	r2, #1
 800125a:	2108      	movs	r1, #8
 800125c:	481e      	ldr	r0, [pc, #120]	; (80012d8 <fillRect+0x124>)
 800125e:	f002 fd17 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2102      	movs	r1, #2
 8001266:	481c      	ldr	r0, [pc, #112]	; (80012d8 <fillRect+0x124>)
 8001268:	f002 fd12 	bl	8003c90 <HAL_GPIO_WritePin>

	for (y = h; y > 0; y--) {
 800126c:	883b      	ldrh	r3, [r7, #0]
 800126e:	80bb      	strh	r3, [r7, #4]
 8001270:	e016      	b.n	80012a0 <fillRect+0xec>
		for (x = w; x > 0; x--) {
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	80fb      	strh	r3, [r7, #6]
 8001276:	e009      	b.n	800128c <fillRect+0xd8>

			write16BitColor(color);
 8001278:	8b3b      	ldrh	r3, [r7, #24]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f8a8 	bl	80013d0 <write16BitColor>
		for (x = w; x > 0; x--) {
 8001280:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001284:	b29b      	uxth	r3, r3
 8001286:	3b01      	subs	r3, #1
 8001288:	b29b      	uxth	r3, r3
 800128a:	80fb      	strh	r3, [r7, #6]
 800128c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001290:	2b00      	cmp	r3, #0
 8001292:	dcf1      	bgt.n	8001278 <fillRect+0xc4>
	for (y = h; y > 0; y--) {
 8001294:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001298:	b29b      	uxth	r3, r3
 800129a:	3b01      	subs	r3, #1
 800129c:	b29b      	uxth	r3, r3
 800129e:	80bb      	strh	r3, [r7, #4]
 80012a0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	dce4      	bgt.n	8001272 <fillRect+0xbe>
		}
	}

	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	2102      	movs	r1, #2
 80012ac:	480a      	ldr	r0, [pc, #40]	; (80012d8 <fillRect+0x124>)
 80012ae:	f002 fcef 	bl	8003c90 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 80012b2:	2201      	movs	r2, #1
 80012b4:	2108      	movs	r1, #8
 80012b6:	4808      	ldr	r0, [pc, #32]	; (80012d8 <fillRect+0x124>)
 80012b8:	f002 fcea 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80012bc:	2200      	movs	r2, #0
 80012be:	2102      	movs	r1, #2
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <fillRect+0x124>)
 80012c2:	f002 fce5 	bl	8003c90 <HAL_GPIO_WritePin>
 80012c6:	e000      	b.n	80012ca <fillRect+0x116>
		return;
 80012c8:	bf00      	nop
//			}
//		}

//		HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);

}
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd90      	pop	{r4, r7, pc}
 80012d0:	20000208 	.word	0x20000208
 80012d4:	2000020a 	.word	0x2000020a
 80012d8:	40010800 	.word	0x40010800

080012dc <setRotation>:
void setRotation(uint8_t r)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]

	writecommand(ILI9488_MADCTL);
 80012e6:	2036      	movs	r0, #54	; 0x36
 80012e8:	f000 f850 	bl	800138c <writecommand>
	rotation = r % 4; // can't be higher than 3
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	4b22      	ldr	r3, [pc, #136]	; (8001380 <setRotation+0xa4>)
 80012f6:	701a      	strb	r2, [r3, #0]
	switch (rotation) {
 80012f8:	4b21      	ldr	r3, [pc, #132]	; (8001380 <setRotation+0xa4>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d83b      	bhi.n	8001378 <setRotation+0x9c>
 8001300:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <setRotation+0x2c>)
 8001302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001306:	bf00      	nop
 8001308:	08001319 	.word	0x08001319
 800130c:	08001331 	.word	0x08001331
 8001310:	08001349 	.word	0x08001349
 8001314:	08001361 	.word	0x08001361
	case 0:
		writedata(MADCTL_MX | MADCTL_BGR);
 8001318:	2048      	movs	r0, #72	; 0x48
 800131a:	f000 f8b9 	bl	8001490 <writedata>
		_width = ILI9488_TFTWIDTH;
 800131e:	4b19      	ldr	r3, [pc, #100]	; (8001384 <setRotation+0xa8>)
 8001320:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001324:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8001326:	4b18      	ldr	r3, [pc, #96]	; (8001388 <setRotation+0xac>)
 8001328:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800132c:	801a      	strh	r2, [r3, #0]
		break;
 800132e:	e023      	b.n	8001378 <setRotation+0x9c>
	case 1:
		writedata(MADCTL_MV | MADCTL_BGR);
 8001330:	2028      	movs	r0, #40	; 0x28
 8001332:	f000 f8ad 	bl	8001490 <writedata>
		_width = ILI9488_TFTHEIGHT;
 8001336:	4b13      	ldr	r3, [pc, #76]	; (8001384 <setRotation+0xa8>)
 8001338:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800133c:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 800133e:	4b12      	ldr	r3, [pc, #72]	; (8001388 <setRotation+0xac>)
 8001340:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001344:	801a      	strh	r2, [r3, #0]
		break;
 8001346:	e017      	b.n	8001378 <setRotation+0x9c>
	case 2:
		writedata(MADCTL_MY | MADCTL_BGR);
 8001348:	2088      	movs	r0, #136	; 0x88
 800134a:	f000 f8a1 	bl	8001490 <writedata>
		_width = ILI9488_TFTWIDTH;
 800134e:	4b0d      	ldr	r3, [pc, #52]	; (8001384 <setRotation+0xa8>)
 8001350:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001354:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTHEIGHT;
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <setRotation+0xac>)
 8001358:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800135c:	801a      	strh	r2, [r3, #0]
		break;
 800135e:	e00b      	b.n	8001378 <setRotation+0x9c>
	case 3:
		writedata(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8001360:	20e8      	movs	r0, #232	; 0xe8
 8001362:	f000 f895 	bl	8001490 <writedata>
		_width = ILI9488_TFTHEIGHT;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <setRotation+0xa8>)
 8001368:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800136c:	801a      	strh	r2, [r3, #0]
		_height = ILI9488_TFTWIDTH;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <setRotation+0xac>)
 8001370:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001374:	801a      	strh	r2, [r3, #0]
		break;
 8001376:	bf00      	nop
	}

}
 8001378:	bf00      	nop
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	2000020c 	.word	0x2000020c
 8001384:	20000208 	.word	0x20000208
 8001388:	2000020a 	.word	0x2000020a

0800138c <writecommand>:
{
	HAL_SPI_Transmit(&hspi1, &data, 1, 1);

}
void writecommand(uint8_t c)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_RESET);
 8001396:	2200      	movs	r2, #0
 8001398:	2108      	movs	r1, #8
 800139a:	480b      	ldr	r0, [pc, #44]	; (80013c8 <writecommand+0x3c>)
 800139c:	f002 fc78 	bl	8003c90 <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2102      	movs	r1, #2
 80013a4:	4808      	ldr	r0, [pc, #32]	; (80013c8 <writecommand+0x3c>)
 80013a6:	f002 fc73 	bl	8003c90 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &c, 1, 1);
 80013aa:	1df9      	adds	r1, r7, #7
 80013ac:	2301      	movs	r3, #1
 80013ae:	2201      	movs	r2, #1
 80013b0:	4806      	ldr	r0, [pc, #24]	; (80013cc <writecommand+0x40>)
 80013b2:	f003 fa85 	bl	80048c0 <HAL_SPI_Transmit>


	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2102      	movs	r1, #2
 80013ba:	4803      	ldr	r0, [pc, #12]	; (80013c8 <writecommand+0x3c>)
 80013bc:	f002 fc68 	bl	8003c90 <HAL_GPIO_WritePin>

}
 80013c0:	bf00      	nop
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40010800 	.word	0x40010800
 80013cc:	20000284 	.word	0x20000284

080013d0 <write16BitColor>:
void write16BitColor(uint16_t color)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	0adb      	lsrs	r3, r3, #11
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 80013e4:	88fb      	ldrh	r3, [r7, #6]
 80013e6:	115b      	asrs	r3, r3, #5
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	461a      	mov	r2, r3
 8001402:	4613      	mov	r3, r2
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <write16BitColor+0xb4>)
 800140a:	fb82 1203 	smull	r1, r2, r2, r3
 800140e:	441a      	add	r2, r3
 8001410:	1112      	asrs	r2, r2, #4
 8001412:	17db      	asrs	r3, r3, #31
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	021b      	lsls	r3, r3, #8
 8001422:	1a9b      	subs	r3, r3, r2
 8001424:	4a18      	ldr	r2, [pc, #96]	; (8001488 <write16BitColor+0xb8>)
 8001426:	fb82 1203 	smull	r1, r2, r2, r3
 800142a:	441a      	add	r2, r3
 800142c:	1152      	asrs	r2, r2, #5
 800142e:	17db      	asrs	r3, r3, #31
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	b2db      	uxtb	r3, r3
 8001434:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8001436:	7b7b      	ldrb	r3, [r7, #13]
 8001438:	461a      	mov	r2, r3
 800143a:	4613      	mov	r3, r2
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	4a10      	ldr	r2, [pc, #64]	; (8001484 <write16BitColor+0xb4>)
 8001442:	fb82 1203 	smull	r1, r2, r2, r3
 8001446:	441a      	add	r2, r3
 8001448:	1112      	asrs	r2, r2, #4
 800144a:	17db      	asrs	r3, r3, #31
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	737b      	strb	r3, [r7, #13]


	  HAL_SPI_Transmit(&hspi1, &r, 1, 1);
 8001452:	f107 010f 	add.w	r1, r7, #15
 8001456:	2301      	movs	r3, #1
 8001458:	2201      	movs	r2, #1
 800145a:	480c      	ldr	r0, [pc, #48]	; (800148c <write16BitColor+0xbc>)
 800145c:	f003 fa30 	bl	80048c0 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &g, 1, 1);
 8001460:	f107 010e 	add.w	r1, r7, #14
 8001464:	2301      	movs	r3, #1
 8001466:	2201      	movs	r2, #1
 8001468:	4808      	ldr	r0, [pc, #32]	; (800148c <write16BitColor+0xbc>)
 800146a:	f003 fa29 	bl	80048c0 <HAL_SPI_Transmit>
	  HAL_SPI_Transmit(&hspi1, &b, 1, 1);
 800146e:	f107 010d 	add.w	r1, r7, #13
 8001472:	2301      	movs	r3, #1
 8001474:	2201      	movs	r2, #1
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <write16BitColor+0xbc>)
 8001478:	f003 fa22 	bl	80048c0 <HAL_SPI_Transmit>


}
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	84210843 	.word	0x84210843
 8001488:	82082083 	.word	0x82082083
 800148c:	20000284 	.word	0x20000284

08001490 <writedata>:
void writedata(uint8_t d)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]


	HAL_GPIO_WritePin(TFT_DC_GPIO_Port,TFT_DC_Pin,GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	2108      	movs	r1, #8
 800149e:	480b      	ldr	r0, [pc, #44]	; (80014cc <writedata+0x3c>)
 80014a0:	f002 fbf6 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2102      	movs	r1, #2
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <writedata+0x3c>)
 80014aa:	f002 fbf1 	bl	8003c90 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &d, 1, 1);
 80014ae:	1df9      	adds	r1, r7, #7
 80014b0:	2301      	movs	r3, #1
 80014b2:	2201      	movs	r2, #1
 80014b4:	4806      	ldr	r0, [pc, #24]	; (80014d0 <writedata+0x40>)
 80014b6:	f003 fa03 	bl	80048c0 <HAL_SPI_Transmit>
	//HAL_SPI_Transmit(_spi.getHandler(), &tmp,1,100);
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port,TFT_CS_Pin,GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2102      	movs	r1, #2
 80014be:	4803      	ldr	r0, [pc, #12]	; (80014cc <writedata+0x3c>)
 80014c0:	f002 fbe6 	bl	8003c90 <HAL_GPIO_WritePin>

}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40010800 	.word	0x40010800
 80014d0:	20000284 	.word	0x20000284

080014d4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80014d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80014d8:	b08d      	sub	sp, #52	; 0x34
 80014da:	af00      	add	r7, sp, #0
 80014dc:	4603      	mov	r3, r0
 80014de:	6039      	str	r1, [r7, #0]
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	466b      	mov	r3, sp
 80014e4:	461e      	mov	r6, r3
//SENDS COLOUR
	uint32_t Buffer_Size = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((Size * 2) < BURST_MAX_SIZE)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	f240 22ed 	movw	r2, #749	; 0x2ed
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d802      	bhi.n	80014fc <ILI9341_Draw_Colour_Burst+0x28>
	{
		Buffer_Size = Size;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014fa:	e002      	b.n	8001502 <ILI9341_Draw_Colour_Burst+0x2e>
	}
	else
	{
		Buffer_Size = BURST_MAX_SIZE;
 80014fc:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001500:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	HAL_GPIO_WritePin(TFT_DC_GPIO_Port, TFT_DC_Pin, GPIO_PIN_SET);
 8001502:	2201      	movs	r2, #1
 8001504:	2108      	movs	r1, #8
 8001506:	4868      	ldr	r0, [pc, #416]	; (80016a8 <ILI9341_Draw_Colour_Burst+0x1d4>)
 8001508:	f002 fbc2 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2102      	movs	r1, #2
 8001510:	4865      	ldr	r0, [pc, #404]	; (80016a8 <ILI9341_Draw_Colour_Burst+0x1d4>)
 8001512:	f002 fbbd 	bl	8003c90 <HAL_GPIO_WritePin>

//	unsigned char MSB_color = Colour >> 8;

	  uint8_t r = (Colour & 0xF800) >> 11;
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	0adb      	lsrs	r3, r3, #11
 800151a:	b29b      	uxth	r3, r3
 800151c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  uint8_t g = (Colour & 0x07E0) >> 5;
 8001520:	88fb      	ldrh	r3, [r7, #6]
 8001522:	115b      	asrs	r3, r3, #5
 8001524:	b2db      	uxtb	r3, r3
 8001526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800152a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  uint8_t b = Colour & 0x001F;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	  r = (r * 255) / 31;
 800153a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800153e:	4613      	mov	r3, r2
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	4a59      	ldr	r2, [pc, #356]	; (80016ac <ILI9341_Draw_Colour_Burst+0x1d8>)
 8001546:	fb82 1203 	smull	r1, r2, r2, r3
 800154a:	441a      	add	r2, r3
 800154c:	1112      	asrs	r2, r2, #4
 800154e:	17db      	asrs	r3, r3, #31
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  g = (g * 255) / 63;
 8001556:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800155a:	4613      	mov	r3, r2
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	1a9b      	subs	r3, r3, r2
 8001560:	4a53      	ldr	r2, [pc, #332]	; (80016b0 <ILI9341_Draw_Colour_Burst+0x1dc>)
 8001562:	fb82 1203 	smull	r1, r2, r2, r3
 8001566:	441a      	add	r2, r3
 8001568:	1152      	asrs	r2, r2, #5
 800156a:	17db      	asrs	r3, r3, #31
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  b = (b * 255) / 31;
 8001572:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001576:	4613      	mov	r3, r2
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	1a9b      	subs	r3, r3, r2
 800157c:	4a4b      	ldr	r2, [pc, #300]	; (80016ac <ILI9341_Draw_Colour_Burst+0x1d8>)
 800157e:	fb82 1203 	smull	r1, r2, r2, r3
 8001582:	441a      	add	r2, r3
 8001584:	1112      	asrs	r2, r2, #4
 8001586:	17db      	asrs	r3, r3, #31
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	unsigned char burst_buffer[Buffer_Size];
 800158e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001590:	460b      	mov	r3, r1
 8001592:	3b01      	subs	r3, #1
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	2300      	movs	r3, #0
 8001598:	4688      	mov	r8, r1
 800159a:	4699      	mov	r9, r3
 800159c:	f04f 0200 	mov.w	r2, #0
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015b0:	2300      	movs	r3, #0
 80015b2:	460c      	mov	r4, r1
 80015b4:	461d      	mov	r5, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	00eb      	lsls	r3, r5, #3
 80015c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015c4:	00e2      	lsls	r2, r4, #3
 80015c6:	1dcb      	adds	r3, r1, #7
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	ebad 0d03 	sub.w	sp, sp, r3
 80015d0:	466b      	mov	r3, sp
 80015d2:	3300      	adds	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80015da:	e014      	b.n	8001606 <ILI9341_Draw_Colour_Burst+0x132>
	{
		burst_buffer[j] = r;
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e0:	4413      	add	r3, r2
 80015e2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80015e6:	701a      	strb	r2, [r3, #0]
		burst_buffer[j + 1] = g;
 80015e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ea:	3301      	adds	r3, #1
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 80015f2:	54d1      	strb	r1, [r2, r3]
		burst_buffer[j + 2] = b;
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	3302      	adds	r3, #2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80015fe:	54d1      	strb	r1, [r2, r3]
	for (uint32_t j = 0; j < Buffer_Size; j += 3)
 8001600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001602:	3303      	adds	r3, #3
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
 8001606:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	429a      	cmp	r2, r3
 800160c:	d3e6      	bcc.n	80015dc <ILI9341_Draw_Colour_Burst+0x108>
	}

	uint32_t Sending_Size = Size * 3;
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	617b      	str	r3, [r7, #20]
	uint32_t Sending_in_Block = Sending_Size / Buffer_Size;
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001620:	613b      	str	r3, [r7, #16]
	uint32_t Remainder_from_block = Sending_Size % Buffer_Size;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001626:	fbb3 f2f2 	udiv	r2, r3, r2
 800162a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800162c:	fb01 f202 	mul.w	r2, r1, r2
 8001630:	1a9b      	subs	r3, r3, r2
 8001632:	60fb      	str	r3, [r7, #12]

	if (Sending_in_Block != 0)
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d018      	beq.n	800166c <ILI9341_Draw_Colour_Burst+0x198>
	{
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
 800163e:	e011      	b.n	8001664 <ILI9341_Draw_Colour_Burst+0x190>
		{
			SPI1_TX_completed_flag = 0;
 8001640:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
			HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Buffer_Size);
 8001646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001648:	b29b      	uxth	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	69b9      	ldr	r1, [r7, #24]
 800164e:	481a      	ldr	r0, [pc, #104]	; (80016b8 <ILI9341_Draw_Colour_Burst+0x1e4>)
 8001650:	f003 fa7a 	bl	8004b48 <HAL_SPI_Transmit_DMA>
			while (SPI1_TX_completed_flag == 0);
 8001654:	bf00      	nop
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0fb      	beq.n	8001656 <ILI9341_Draw_Colour_Burst+0x182>
		for (uint32_t j = 0; j < (Sending_in_Block); j++)
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	3301      	adds	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
 8001664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	429a      	cmp	r2, r3
 800166a:	d3e9      	bcc.n	8001640 <ILI9341_Draw_Colour_Burst+0x16c>
		}
	}

//REMAINDER!

	if (Remainder_from_block > 0)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00e      	beq.n	8001690 <ILI9341_Draw_Colour_Burst+0x1bc>
	{
		SPI1_TX_completed_flag = 0;
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <ILI9341_Draw_Colour_Burst+0x1e0>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit_DMA(&hspi1, (unsigned char*) burst_buffer, Remainder_from_block);
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	b29b      	uxth	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	69b9      	ldr	r1, [r7, #24]
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <ILI9341_Draw_Colour_Burst+0x1e4>)
 8001682:	f003 fa61 	bl	8004b48 <HAL_SPI_Transmit_DMA>
		while (SPI1_TX_completed_flag == 0);
 8001686:	bf00      	nop
 8001688:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <ILI9341_Draw_Colour_Burst+0x1e0>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0fb      	beq.n	8001688 <ILI9341_Draw_Colour_Burst+0x1b4>
	}
	HAL_GPIO_WritePin(TFT_CS_GPIO_Port, TFT_CS_Pin, GPIO_PIN_SET);
 8001690:	2201      	movs	r2, #1
 8001692:	2102      	movs	r1, #2
 8001694:	4804      	ldr	r0, [pc, #16]	; (80016a8 <ILI9341_Draw_Colour_Burst+0x1d4>)
 8001696:	f002 fafb 	bl	8003c90 <HAL_GPIO_WritePin>
 800169a:	46b5      	mov	sp, r6
}
 800169c:	bf00      	nop
 800169e:	3734      	adds	r7, #52	; 0x34
 80016a0:	46bd      	mov	sp, r7
 80016a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80016a6:	bf00      	nop
 80016a8:	40010800 	.word	0x40010800
 80016ac:	84210843 	.word	0x84210843
 80016b0:	82082083 	.word	0x82082083
 80016b4:	20000000 	.word	0x20000000
 80016b8:	20000284 	.word	0x20000284

080016bc <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	80fb      	strh	r3, [r7, #6]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(0, 0, ILI9488_TFTHEIGHT-1, ILI9488_TFTWIDTH-1);
 80016c6:	f240 133f 	movw	r3, #319	; 0x13f
 80016ca:	f240 12df 	movw	r2, #479	; 0x1df
 80016ce:	2100      	movs	r1, #0
 80016d0:	2000      	movs	r0, #0
 80016d2:	f7ff fd17 	bl	8001104 <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, ILI9488_TFTWIDTH * ILI9488_TFTHEIGHT);
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	f44f 3116 	mov.w	r1, #153600	; 0x25800
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fef9 	bl	80014d4 <ILI9341_Draw_Colour_Burst>
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <ILI9341_Fill_Screen1>:


void ILI9341_Fill_Screen1(uint16_t x, uint16_t y, uint16_t w, uint16_t h,uint16_t Colour)
{
 80016ea:	b590      	push	{r4, r7, lr}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	4604      	mov	r4, r0
 80016f2:	4608      	mov	r0, r1
 80016f4:	4611      	mov	r1, r2
 80016f6:	461a      	mov	r2, r3
 80016f8:	4623      	mov	r3, r4
 80016fa:	80fb      	strh	r3, [r7, #6]
 80016fc:	4603      	mov	r3, r0
 80016fe:	80bb      	strh	r3, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
 8001704:	4613      	mov	r3, r2
 8001706:	803b      	strh	r3, [r7, #0]
//	LCD_Address_Set(xsta,ysta+OFFSET_Y,xend-1,yend-1+OFFSET_Y);/
	setAddrWindow(x, y, h-1, w-1);
 8001708:	883b      	ldrh	r3, [r7, #0]
 800170a:	3b01      	subs	r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	3b01      	subs	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	88b9      	ldrh	r1, [r7, #4]
 8001716:	88f8      	ldrh	r0, [r7, #6]
 8001718:	f7ff fcf4 	bl	8001104 <setAddrWindow>
	ILI9341_Draw_Colour_Burst(Colour, w * h);
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	883a      	ldrh	r2, [r7, #0]
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	461a      	mov	r2, r3
 8001726:	8b3b      	ldrh	r3, [r7, #24]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fed2 	bl	80014d4 <ILI9341_Draw_Colour_Burst>
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}

08001738 <filledRectangleClip>:
//		WaitForDMAWriteComplete();
//	}
//}
//
static void filledRectangleClip(int16_t x, int16_t y, uint16_t width, uint16_t height, colour_t colour)
{
 8001738:	b590      	push	{r4, r7, lr}
 800173a:	b087      	sub	sp, #28
 800173c:	af02      	add	r7, sp, #8
 800173e:	4604      	mov	r4, r0
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4623      	mov	r3, r4
 8001748:	80fb      	strh	r3, [r7, #6]
 800174a:	4603      	mov	r3, r0
 800174c:	80bb      	strh	r3, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	807b      	strh	r3, [r7, #2]
 8001752:	4613      	mov	r3, r2
 8001754:	803b      	strh	r3, [r7, #0]
	int16_t x_end;
	int16_t y_end;

	if (x > (int16_t)ILI9488_TFTWIDTH - 1 || y > (int16_t)ILI9488_TFTHEIGHT - 1)
 8001756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800175a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800175e:	da5a      	bge.n	8001816 <filledRectangleClip+0xde>
 8001760:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001764:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001768:	da55      	bge.n	8001816 <filledRectangleClip+0xde>
	{
		return;
	}

	if (x + (int16_t)width < 0 || y + (int16_t)height < 0)
 800176a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800176e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001772:	4413      	add	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	db50      	blt.n	800181a <filledRectangleClip+0xe2>
 8001778:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800177c:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001780:	4413      	add	r3, r2
 8001782:	2b00      	cmp	r3, #0
 8001784:	db49      	blt.n	800181a <filledRectangleClip+0xe2>
	{
		return;
	}

	if (x < 0)
 8001786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800178a:	2b00      	cmp	r3, #0
 800178c:	da05      	bge.n	800179a <filledRectangleClip+0x62>
	{
		width -= (uint16_t)-x;
 800178e:	88fa      	ldrh	r2, [r7, #6]
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	4413      	add	r3, r2
 8001794:	807b      	strh	r3, [r7, #2]
		x = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	80fb      	strh	r3, [r7, #6]
	}

	if (y < 0)
 800179a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da05      	bge.n	80017ae <filledRectangleClip+0x76>
	{
		height -= (uint16_t)-y;
 80017a2:	88ba      	ldrh	r2, [r7, #4]
 80017a4:	883b      	ldrh	r3, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	803b      	strh	r3, [r7, #0]
		y = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	80bb      	strh	r3, [r7, #4]
	}

	x_end = x + (int16_t)width - 1;
 80017ae:	88fa      	ldrh	r2, [r7, #6]
 80017b0:	887b      	ldrh	r3, [r7, #2]
 80017b2:	4413      	add	r3, r2
 80017b4:	b29b      	uxth	r3, r3
 80017b6:	3b01      	subs	r3, #1
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	81fb      	strh	r3, [r7, #14]
	if (x_end >(int16_t)ILI9488_TFTWIDTH - 1)
 80017bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017c0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80017c4:	db02      	blt.n	80017cc <filledRectangleClip+0x94>
	{
		x_end = (int16_t)ILI9488_TFTWIDTH - 1;
 80017c6:	f240 133f 	movw	r3, #319	; 0x13f
 80017ca:	81fb      	strh	r3, [r7, #14]
	}

	y_end = y + (int16_t)height - 1;
 80017cc:	88ba      	ldrh	r2, [r7, #4]
 80017ce:	883b      	ldrh	r3, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	81bb      	strh	r3, [r7, #12]
	if (y_end > (int16_t)ILI9488_TFTHEIGHT - 1)
 80017da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017de:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80017e2:	db02      	blt.n	80017ea <filledRectangleClip+0xb2>
	{
		y_end = (int16_t)ILI9488_TFTHEIGHT - 1;
 80017e4:	f240 13df 	movw	r3, #479	; 0x1df
 80017e8:	81bb      	strh	r3, [r7, #12]
	}

	// clipped sizes
	width = (uint16_t)(x_end - x + 1);
 80017ea:	89fa      	ldrh	r2, [r7, #14]
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	3301      	adds	r3, #1
 80017f4:	807b      	strh	r3, [r7, #2]
	height = (uint16_t)(y_end - y + 1);
 80017f6:	89ba      	ldrh	r2, [r7, #12]
 80017f8:	88bb      	ldrh	r3, [r7, #4]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	3301      	adds	r3, #1
 8001800:	803b      	strh	r3, [r7, #0]


	ILI9341_Fill_Screen1((uint16_t)x, (uint16_t)y, width, height, colour);
 8001802:	88f8      	ldrh	r0, [r7, #6]
 8001804:	88b9      	ldrh	r1, [r7, #4]
 8001806:	883c      	ldrh	r4, [r7, #0]
 8001808:	887a      	ldrh	r2, [r7, #2]
 800180a:	8c3b      	ldrh	r3, [r7, #32]
 800180c:	9300      	str	r3, [sp, #0]
 800180e:	4623      	mov	r3, r4
 8001810:	f7ff ff6b 	bl	80016ea <ILI9341_Fill_Screen1>
 8001814:	e002      	b.n	800181c <filledRectangleClip+0xe4>
		return;
 8001816:	bf00      	nop
 8001818:	e000      	b.n	800181c <filledRectangleClip+0xe4>
		return;
 800181a:	bf00      	nop
//	ILI9341FilledRectangle((uint16_t)x, (uint16_t)y, width, height, colour);
}
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bd90      	pop	{r4, r7, pc}

08001822 <GraphicsClear>:
//
//
void GraphicsClear(colour_t colour) //закра
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b084      	sub	sp, #16
 8001826:	af02      	add	r7, sp, #8
 8001828:	4603      	mov	r3, r0
 800182a:	80fb      	strh	r3, [r7, #6]
	filledRectangleClip(0U, 0U, (uint16_t)ILI9488_TFTWIDTH, (uint16_t)ILI9488_TFTHEIGHT, colour);
 800182c:	88fb      	ldrh	r3, [r7, #6]
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001834:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001838:	2100      	movs	r1, #0
 800183a:	2000      	movs	r0, #0
 800183c:	f7ff ff7c 	bl	8001738 <filledRectangleClip>
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}

08001848 <LCD_Char>:
//



void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b08b      	sub	sp, #44	; 0x2c
 800184c:	af02      	add	r7, sp, #8
 800184e:	60ba      	str	r2, [r7, #8]
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4603      	mov	r3, r0
 8001854:	81fb      	strh	r3, [r7, #14]
 8001856:	460b      	mov	r3, r1
 8001858:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	777b      	strb	r3, [r7, #29]
 800186a:	2300      	movs	r3, #0
 800186c:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001872:	2300      	movs	r3, #0
 8001874:	763b      	strb	r3, [r7, #24]
 8001876:	e09b      	b.n	80019b0 <LCD_Char+0x168>
	{
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001878:	2300      	movs	r3, #0
 800187a:	767b      	strb	r3, [r7, #25]
 800187c:	e056      	b.n	800192c <LCD_Char+0xe4>
		{
			if (bit == 0)
 800187e:	7f3b      	ldrb	r3, [r7, #28]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d109      	bne.n	8001898 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001884:	8bfb      	ldrh	r3, [r7, #30]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	83fa      	strh	r2, [r7, #30]
 800188a:	461a      	mov	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	773b      	strb	r3, [r7, #28]
			}
			if (bits & bit) set_pixels++;
 8001898:	7f7a      	ldrb	r2, [r7, #29]
 800189a:	7f3b      	ldrb	r3, [r7, #28]
 800189c:	4013      	ands	r3, r2
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <LCD_Char+0x64>
 80018a4:	8b7b      	ldrh	r3, [r7, #26]
 80018a6:	3301      	adds	r3, #1
 80018a8:	837b      	strh	r3, [r7, #26]
 80018aa:	e039      	b.n	8001920 <LCD_Char+0xd8>
			else if (set_pixels > 0)
 80018ac:	8b7b      	ldrh	r3, [r7, #26]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d036      	beq.n	8001920 <LCD_Char+0xd8>
			{
				fillRect(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80018b8:	461a      	mov	r2, r3
 80018ba:	7e7b      	ldrb	r3, [r7, #25]
 80018bc:	441a      	add	r2, r3
 80018be:	8b7b      	ldrh	r3, [r7, #26]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80018c8:	b292      	uxth	r2, r2
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	89fb      	ldrh	r3, [r7, #14]
 80018d2:	4413      	add	r3, r2
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	b218      	sxth	r0, r3
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80018de:	461a      	mov	r2, r3
 80018e0:	7e3b      	ldrb	r3, [r7, #24]
 80018e2:	4413      	add	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80018ea:	b292      	uxth	r2, r2
 80018ec:	fb02 f303 	mul.w	r3, r2, r3
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	89bb      	ldrh	r3, [r7, #12]
 80018f4:	4413      	add	r3, r2
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	b219      	sxth	r1, r3
 80018fa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80018fe:	b29b      	uxth	r3, r3
 8001900:	8b7a      	ldrh	r2, [r7, #26]
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	b29b      	uxth	r3, r3
 8001908:	b21a      	sxth	r2, r3
 800190a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800190e:	b21c      	sxth	r4, r3
 8001910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001912:	b29b      	uxth	r3, r3
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	4623      	mov	r3, r4
 8001918:	f7ff fc4c 	bl	80011b4 <fillRect>
				set_pixels = 0;
 800191c:	2300      	movs	r3, #0
 800191e:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001920:	7f3b      	ldrb	r3, [r7, #28]
 8001922:	085b      	lsrs	r3, r3, #1
 8001924:	773b      	strb	r3, [r7, #28]
		for (cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001926:	7e7b      	ldrb	r3, [r7, #25]
 8001928:	3301      	adds	r3, #1
 800192a:	767b      	strb	r3, [r7, #25]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	789b      	ldrb	r3, [r3, #2]
 8001930:	7e7a      	ldrb	r2, [r7, #25]
 8001932:	429a      	cmp	r2, r3
 8001934:	d3a3      	bcc.n	800187e <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001936:	8b7b      	ldrh	r3, [r7, #26]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d036      	beq.n	80019aa <LCD_Char+0x162>
		{
			fillRect(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001942:	461a      	mov	r2, r3
 8001944:	7e7b      	ldrb	r3, [r7, #25]
 8001946:	441a      	add	r2, r3
 8001948:	8b7b      	ldrh	r3, [r7, #26]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001952:	b292      	uxth	r2, r2
 8001954:	fb02 f303 	mul.w	r3, r2, r3
 8001958:	b29a      	uxth	r2, r3
 800195a:	89fb      	ldrh	r3, [r7, #14]
 800195c:	4413      	add	r3, r2
 800195e:	b29b      	uxth	r3, r3
 8001960:	b218      	sxth	r0, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001968:	461a      	mov	r2, r3
 800196a:	7e3b      	ldrb	r3, [r7, #24]
 800196c:	4413      	add	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001974:	b292      	uxth	r2, r2
 8001976:	fb02 f303 	mul.w	r3, r2, r3
 800197a:	b29a      	uxth	r2, r3
 800197c:	89bb      	ldrh	r3, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	b29b      	uxth	r3, r3
 8001982:	b219      	sxth	r1, r3
 8001984:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001988:	b29b      	uxth	r3, r3
 800198a:	8b7a      	ldrh	r2, [r7, #26]
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	b29b      	uxth	r3, r3
 8001992:	b21a      	sxth	r2, r3
 8001994:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001998:	b21c      	sxth	r4, r3
 800199a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199c:	b29b      	uxth	r3, r3
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	4623      	mov	r3, r4
 80019a2:	f7ff fc07 	bl	80011b4 <fillRect>
			set_pixels = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	837b      	strh	r3, [r7, #26]
	for (cur_y = 0; cur_y < glyph -> height; cur_y++)
 80019aa:	7e3b      	ldrb	r3, [r7, #24]
 80019ac:	3301      	adds	r3, #1
 80019ae:	763b      	strb	r3, [r7, #24]
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	78db      	ldrb	r3, [r3, #3]
 80019b4:	7e3a      	ldrb	r2, [r7, #24]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	f4ff af5e 	bcc.w	8001878 <LCD_Char+0x30>
		}
	}
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3724      	adds	r7, #36	; 0x24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd90      	pop	{r4, r7, pc}

080019c6 <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80019c6:	b590      	push	{r4, r7, lr}
 80019c8:	b08f      	sub	sp, #60	; 0x3c
 80019ca:	af02      	add	r7, sp, #8
 80019cc:	60ba      	str	r2, [r7, #8]
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	4603      	mov	r3, r0
 80019d2:	81fb      	strh	r3, [r7, #14]
 80019d4:	460b      	mov	r3, r1
 80019d6:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 80019d8:	89fb      	ldrh	r3, [r7, #14]
 80019da:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 80019dc:	89bb      	ldrh	r3, [r7, #12]
 80019de:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy(&font, p_font, sizeof(GFXfont));
 80019e0:	f107 031c 	add.w	r3, r7, #28
 80019e4:	220c      	movs	r2, #12
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f004 fcb0 	bl	800634e <memcpy>
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80019ee:	2300      	movs	r3, #0
 80019f0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80019f2:	e056      	b.n	8001aa2 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 80019f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	4413      	add	r3, r2
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if (c == '\n')
 8001a00:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a04:	2b0a      	cmp	r3, #10
 8001a06:	d10f      	bne.n	8001a28 <LCD_Font+0x62>
		{
			cursor_x = x;
 8001a08:	89fb      	ldrh	r3, [r7, #14]
 8001a0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8001a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001a16:	b292      	uxth	r2, r2
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a20:	4413      	add	r3, r2
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001a26:	e039      	b.n	8001a9c <LCD_Font+0xd6>
		}
		else if (c >= font.first && c <= font.last && c != '\r')
 8001a28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a2c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d333      	bcc.n	8001a9c <LCD_Font+0xd6>
 8001a34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a38:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d82d      	bhi.n	8001a9c <LCD_Font+0xd6>
 8001a40:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a44:	2b0d      	cmp	r3, #13
 8001a46:	d029      	beq.n	8001a9c <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy(&glyph, &font.glyph[c - font.first], sizeof(GFXglyph));
 8001a48:	6a3a      	ldr	r2, [r7, #32]
 8001a4a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001a4e:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001a52:	1a5b      	subs	r3, r3, r1
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	18d1      	adds	r1, r2, r3
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	2208      	movs	r2, #8
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f004 fc75 	bl	800634e <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8001a64:	f107 041c 	add.w	r4, r7, #28
 8001a68:	f107 0214 	add.w	r2, r7, #20
 8001a6c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001a70:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	4623      	mov	r3, r4
 8001a80:	f7ff fee2 	bl	8001848 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8001a84:	7e3b      	ldrb	r3, [r7, #24]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001a8c:	b292      	uxth	r2, r2
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	b29a      	uxth	r2, r3
 8001a94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a96:	4413      	add	r3, r2
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for (uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001a9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001aa2:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8001aa4:	68b8      	ldr	r0, [r7, #8]
 8001aa6:	f7fe fb53 	bl	8000150 <strlen>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	429c      	cmp	r4, r3
 8001aae:	d3a1      	bcc.n	80019f4 <LCD_Font+0x2e>
		}
	}
}
 8001ab0:	bf00      	nop
 8001ab2:	bf00      	nop
 8001ab4:	3734      	adds	r7, #52	; 0x34
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd90      	pop	{r4, r7, pc}
	...

08001abc <HAL_SPI_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	SPI1_TX_completed_flag = 1;
 8001ac4:	4b03      	ldr	r3, [pc, #12]	; (8001ad4 <HAL_SPI_TxCpltCallback+0x18>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ade:	f000 fe07 	bl	80026f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ae2:	f000 f8ad 	bl	8001c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ae6:	f000 fa5d 	bl	8001fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001aea:	f000 fa35 	bl	8001f58 <MX_DMA_Init>
  MX_SPI1_Init();
 8001aee:	f000 f951 	bl	8001d94 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001af2:	f000 f901 	bl	8001cf8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001af6:	f000 fa05 	bl	8001f04 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001afa:	f000 f981 	bl	8001e00 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001afe:	f000 f9b5 	bl	8001e6c <MX_TIM2_Init>
  MX_FATFS_Init();
 8001b02:	f003 fd57 	bl	80055b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  ILI9488_Init();
 8001b06:	f7ff fa1d 	bl	8000f44 <ILI9488_Init>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001b0a:	4844      	ldr	r0, [pc, #272]	; (8001c1c <main+0x144>)
 8001b0c:	f001 fb4c 	bl	80031a8 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, ADC_CHANNELS_NUM);
 8001b10:	2202      	movs	r2, #2
 8001b12:	4943      	ldr	r1, [pc, #268]	; (8001c20 <main+0x148>)
 8001b14:	4841      	ldr	r0, [pc, #260]	; (8001c1c <main+0x144>)
 8001b16:	f000 ff49 	bl	80029ac <HAL_ADC_Start_DMA>
  HAL_Delay(1000); //Задержка для инициализации АЦП
 8001b1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b1e:	f000 fe49 	bl	80027b4 <HAL_Delay>


//  HAL_Delay(1000);
   setRotation(3);
 8001b22:	2003      	movs	r0, #3
 8001b24:	f7ff fbda 	bl	80012dc <setRotation>
   ILI9341_Fill_Screen(ILI9488_RED);
 8001b28:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001b2c:	f7ff fdc6 	bl	80016bc <ILI9341_Fill_Screen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (ADC_flag == 1) {
 8001b30:	4b3c      	ldr	r3, [pc, #240]	; (8001c24 <main+0x14c>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d15d      	bne.n	8001bf6 <main+0x11e>

		HAL_ADC_Stop_DMA(&hadc1);
 8001b3a:	4838      	ldr	r0, [pc, #224]	; (8001c1c <main+0x144>)
 8001b3c:	f001 f814 	bl	8002b68 <HAL_ADC_Stop_DMA>
		ADC_Data[0] = (float)ADC_Value[0]*3/4095;
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <main+0x148>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f854 	bl	8000bf4 <__aeabi_ui2f>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	4936      	ldr	r1, [pc, #216]	; (8001c28 <main+0x150>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff f8a7 	bl	8000ca4 <__aeabi_fmul>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4934      	ldr	r1, [pc, #208]	; (8001c2c <main+0x154>)
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f956 	bl	8000e0c <__aeabi_fdiv>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <main+0x158>)
 8001b66:	601a      	str	r2, [r3, #0]
		ADC_Data[1] = (float)ADC_Value[1]*3/4095;
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <main+0x148>)
 8001b6a:	885b      	ldrh	r3, [r3, #2]
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff f840 	bl	8000bf4 <__aeabi_ui2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	492c      	ldr	r1, [pc, #176]	; (8001c28 <main+0x150>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff f893 	bl	8000ca4 <__aeabi_fmul>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	492a      	ldr	r1, [pc, #168]	; (8001c2c <main+0x154>)
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f942 	bl	8000e0c <__aeabi_fdiv>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <main+0x158>)
 8001b8e:	605a      	str	r2, [r3, #4]
		sprintf(string_display_1,"%.3f", ADC_Data[0]);
 8001b90:	4b27      	ldr	r3, [pc, #156]	; (8001c30 <main+0x158>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fc47 	bl	8000428 <__aeabi_f2d>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4638      	mov	r0, r7
 8001ba0:	4924      	ldr	r1, [pc, #144]	; (8001c34 <main+0x15c>)
 8001ba2:	f004 fae3 	bl	800616c <siprintf>
		LCD_Font(200, 60, string_display_1, &Bahamas18pt8b, 1, BLACK);
 8001ba6:	463a      	mov	r2, r7
 8001ba8:	2300      	movs	r3, #0
 8001baa:	9301      	str	r3, [sp, #4]
 8001bac:	2301      	movs	r3, #1
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <main+0x160>)
 8001bb2:	213c      	movs	r1, #60	; 0x3c
 8001bb4:	20c8      	movs	r0, #200	; 0xc8
 8001bb6:	f7ff ff06 	bl	80019c6 <LCD_Font>
		sprintf(string_display_1,"%.3f", ADC_Data[1]);
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <main+0x158>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fc32 	bl	8000428 <__aeabi_f2d>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4638      	mov	r0, r7
 8001bca:	491a      	ldr	r1, [pc, #104]	; (8001c34 <main+0x15c>)
 8001bcc:	f004 face 	bl	800616c <siprintf>
		LCD_Font(200, 160, string_display_1, &Bahamas18pt8b, 1, BLACK);
 8001bd0:	463a      	mov	r2, r7
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <main+0x160>)
 8001bdc:	21a0      	movs	r1, #160	; 0xa0
 8001bde:	20c8      	movs	r0, #200	; 0xc8
 8001be0:	f7ff fef1 	bl	80019c6 <LCD_Font>
		HAL_Delay(1000);
 8001be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001be8:	f000 fde4 	bl	80027b4 <HAL_Delay>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_Value, ADC_CHANNELS_NUM);
 8001bec:	2202      	movs	r2, #2
 8001bee:	490c      	ldr	r1, [pc, #48]	; (8001c20 <main+0x148>)
 8001bf0:	480a      	ldr	r0, [pc, #40]	; (8001c1c <main+0x144>)
 8001bf2:	f000 fedb 	bl	80029ac <HAL_ADC_Start_DMA>

	}
		GraphicsClear(RED);
 8001bf6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001bfa:	f7ff fe12 	bl	8001822 <GraphicsClear>
		HAL_Delay(10);
 8001bfe:	200a      	movs	r0, #10
 8001c00:	f000 fdd8 	bl	80027b4 <HAL_Delay>

		LCD_Font(200, 260, "asdfghjkl;'123", &Bahamas18pt8b, 2, BLACK);
 8001c04:	2300      	movs	r3, #0
 8001c06:	9301      	str	r3, [sp, #4]
 8001c08:	2302      	movs	r3, #2
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <main+0x160>)
 8001c0e:	4a0b      	ldr	r2, [pc, #44]	; (8001c3c <main+0x164>)
 8001c10:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001c14:	20c8      	movs	r0, #200	; 0xc8
 8001c16:	f7ff fed6 	bl	80019c6 <LCD_Font>
	if (ADC_flag == 1) {
 8001c1a:	e789      	b.n	8001b30 <main+0x58>
 8001c1c:	20000210 	.word	0x20000210
 8001c20:	20000410 	.word	0x20000410
 8001c24:	20000414 	.word	0x20000414
 8001c28:	40400000 	.word	0x40400000
 8001c2c:	457ff000 	.word	0x457ff000
 8001c30:	20000408 	.word	0x20000408
 8001c34:	08008420 	.word	0x08008420
 8001c38:	0800a620 	.word	0x0800a620
 8001c3c:	08008428 	.word	0x08008428

08001c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b094      	sub	sp, #80	; 0x50
 8001c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4a:	2228      	movs	r2, #40	; 0x28
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f004 faef 	bl	8006232 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c70:	2301      	movs	r3, #1
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c82:	2302      	movs	r3, #2
 8001c84:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c8c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c90:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c96:	4618      	mov	r0, r3
 8001c98:	f002 f812 	bl	8003cc0 <HAL_RCC_OscConfig>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ca2:	f000 fa31 	bl	8002108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ca6:	230f      	movs	r3, #15
 8001ca8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f002 fa7e 	bl	80041c4 <HAL_RCC_ClockConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001cce:	f000 fa1b 	bl	8002108 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cda:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cdc:	1d3b      	adds	r3, r7, #4
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f002 fbfe 	bl	80044e0 <HAL_RCCEx_PeriphCLKConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001cea:	f000 fa0d 	bl	8002108 <Error_Handler>
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3750      	adds	r7, #80	; 0x50
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d08:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <MX_ADC1_Init+0x94>)
 8001d0a:	4a21      	ldr	r2, [pc, #132]	; (8001d90 <MX_ADC1_Init+0x98>)
 8001d0c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d0e:	4b1f      	ldr	r3, [pc, #124]	; (8001d8c <MX_ADC1_Init+0x94>)
 8001d10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d14:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <MX_ADC1_Init+0x94>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <MX_ADC1_Init+0x94>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_ADC1_Init+0x94>)
 8001d24:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001d28:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <MX_ADC1_Init+0x94>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_ADC1_Init+0x94>)
 8001d32:	2202      	movs	r2, #2
 8001d34:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d36:	4815      	ldr	r0, [pc, #84]	; (8001d8c <MX_ADC1_Init+0x94>)
 8001d38:	f000 fd60 	bl	80027fc <HAL_ADC_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001d42:	f000 f9e1 	bl	8002108 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001d46:	2308      	movs	r3, #8
 8001d48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	4619      	mov	r1, r3
 8001d56:	480d      	ldr	r0, [pc, #52]	; (8001d8c <MX_ADC1_Init+0x94>)
 8001d58:	f001 f82c 	bl	8002db4 <HAL_ADC_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001d62:	f000 f9d1 	bl	8002108 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001d66:	2309      	movs	r3, #9
 8001d68:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4806      	ldr	r0, [pc, #24]	; (8001d8c <MX_ADC1_Init+0x94>)
 8001d74:	f001 f81e 	bl	8002db4 <HAL_ADC_ConfigChannel>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001d7e:	f000 f9c3 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d82:	bf00      	nop
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20000210 	.word	0x20000210
 8001d90:	40012400 	.word	0x40012400

08001d94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001d9a:	4a18      	ldr	r2, [pc, #96]	; (8001dfc <MX_SPI1_Init+0x68>)
 8001d9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d9e:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001da0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001da4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001da6:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db2:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dc4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001dc6:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001dc8:	2208      	movs	r2, #8
 8001dca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd2:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dd8:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001dde:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001de0:	220a      	movs	r2, #10
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <MX_SPI1_Init+0x64>)
 8001de6:	f002 fce7 	bl	80047b8 <HAL_SPI_Init>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001df0:	f000 f98a 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000284 	.word	0x20000284
 8001dfc:	40013000 	.word	0x40013000

08001e00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e06:	4a18      	ldr	r2, [pc, #96]	; (8001e68 <MX_SPI2_Init+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e0a:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e30:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e44:	4b07      	ldr	r3, [pc, #28]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e4c:	220a      	movs	r2, #10
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <MX_SPI2_Init+0x64>)
 8001e52:	f002 fcb1 	bl	80047b8 <HAL_SPI_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001e5c:	f000 f954 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	200002dc 	.word	0x200002dc
 8001e68:	40003800 	.word	0x40003800

08001e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e72:	f107 0308 	add.w	r3, r7, #8
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e80:	463b      	mov	r3, r7
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <MX_TIM2_Init+0x94>)
 8001e8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 8001e90:	4b1b      	ldr	r3, [pc, #108]	; (8001f00 <MX_TIM2_Init+0x94>)
 8001e92:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <MX_TIM2_Init+0x94>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001e9e:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <MX_TIM2_Init+0x94>)
 8001ea0:	220a      	movs	r2, #10
 8001ea2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea4:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <MX_TIM2_Init+0x94>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <MX_TIM2_Init+0x94>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eb0:	4813      	ldr	r0, [pc, #76]	; (8001f00 <MX_TIM2_Init+0x94>)
 8001eb2:	f003 f835 	bl	8004f20 <HAL_TIM_Base_Init>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ebc:	f000 f924 	bl	8002108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ec6:	f107 0308 	add.w	r3, r7, #8
 8001eca:	4619      	mov	r1, r3
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <MX_TIM2_Init+0x94>)
 8001ece:	f003 f876 	bl	8004fbe <HAL_TIM_ConfigClockSource>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ed8:	f000 f916 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee4:	463b      	mov	r3, r7
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_TIM2_Init+0x94>)
 8001eea:	f003 fa27 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ef4:	f000 f908 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20000378 	.word	0x20000378

08001f04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f08:	4b11      	ldr	r3, [pc, #68]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f0a:	4a12      	ldr	r2, [pc, #72]	; (8001f54 <MX_USART1_UART_Init+0x50>)
 8001f0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f0e:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f1c:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f3a:	4805      	ldr	r0, [pc, #20]	; (8001f50 <MX_USART1_UART_Init+0x4c>)
 8001f3c:	f003 fa5c 	bl	80053f8 <HAL_UART_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f46:	f000 f8df 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200003c0 	.word	0x200003c0
 8001f54:	40013800 	.word	0x40013800

08001f58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <MX_DMA_Init+0x48>)
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	4a0f      	ldr	r2, [pc, #60]	; (8001fa0 <MX_DMA_Init+0x48>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6153      	str	r3, [r2, #20]
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <MX_DMA_Init+0x48>)
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	607b      	str	r3, [r7, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2100      	movs	r1, #0
 8001f7a:	200b      	movs	r0, #11
 8001f7c:	f001 faa3 	bl	80034c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f80:	200b      	movs	r0, #11
 8001f82:	f001 fabc 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	200d      	movs	r0, #13
 8001f8c:	f001 fa9b 	bl	80034c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f90:	200d      	movs	r0, #13
 8001f92:	f001 fab4 	bl	80034fe <HAL_NVIC_EnableIRQ>

}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 0310 	add.w	r3, r7, #16
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb8:	4b44      	ldr	r3, [pc, #272]	; (80020cc <MX_GPIO_Init+0x128>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4a43      	ldr	r2, [pc, #268]	; (80020cc <MX_GPIO_Init+0x128>)
 8001fbe:	f043 0310 	orr.w	r3, r3, #16
 8001fc2:	6193      	str	r3, [r2, #24]
 8001fc4:	4b41      	ldr	r3, [pc, #260]	; (80020cc <MX_GPIO_Init+0x128>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd0:	4b3e      	ldr	r3, [pc, #248]	; (80020cc <MX_GPIO_Init+0x128>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a3d      	ldr	r2, [pc, #244]	; (80020cc <MX_GPIO_Init+0x128>)
 8001fd6:	f043 0320 	orr.w	r3, r3, #32
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b3b      	ldr	r3, [pc, #236]	; (80020cc <MX_GPIO_Init+0x128>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe8:	4b38      	ldr	r3, [pc, #224]	; (80020cc <MX_GPIO_Init+0x128>)
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	4a37      	ldr	r2, [pc, #220]	; (80020cc <MX_GPIO_Init+0x128>)
 8001fee:	f043 0304 	orr.w	r3, r3, #4
 8001ff2:	6193      	str	r3, [r2, #24]
 8001ff4:	4b35      	ldr	r3, [pc, #212]	; (80020cc <MX_GPIO_Init+0x128>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	607b      	str	r3, [r7, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002000:	4b32      	ldr	r3, [pc, #200]	; (80020cc <MX_GPIO_Init+0x128>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	4a31      	ldr	r2, [pc, #196]	; (80020cc <MX_GPIO_Init+0x128>)
 8002006:	f043 0308 	orr.w	r3, r3, #8
 800200a:	6193      	str	r3, [r2, #24]
 800200c:	4b2f      	ldr	r3, [pc, #188]	; (80020cc <MX_GPIO_Init+0x128>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	f003 0308 	and.w	r3, r3, #8
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|MATR_OUT_1_Pin|MATR_OUT_2_Pin, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	f242 010c 	movw	r1, #8204	; 0x200c
 800201e:	482c      	ldr	r0, [pc, #176]	; (80020d0 <MX_GPIO_Init+0x12c>)
 8002020:	f001 fe36 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin, GPIO_PIN_RESET);
 8002024:	2200      	movs	r2, #0
 8002026:	210e      	movs	r1, #14
 8002028:	482a      	ldr	r0, [pc, #168]	; (80020d4 <MX_GPIO_Init+0x130>)
 800202a:	f001 fe31 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002034:	4828      	ldr	r0, [pc, #160]	; (80020d8 <MX_GPIO_Init+0x134>)
 8002036:	f001 fe2b 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin MATR_OUT_1_Pin MATR_OUT_2_Pin */
  GPIO_InitStruct.Pin = LED_Pin|MATR_OUT_1_Pin|MATR_OUT_2_Pin;
 800203a:	f242 030c 	movw	r3, #8204	; 0x200c
 800203e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4619      	mov	r1, r3
 8002052:	481f      	ldr	r0, [pc, #124]	; (80020d0 <MX_GPIO_Init+0x12c>)
 8002054:	f001 fc98 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : MATR_IN_1_Pin MATR_IN_2_Pin */
  GPIO_InitStruct.Pin = MATR_IN_1_Pin|MATR_IN_2_Pin;
 8002058:	2303      	movs	r3, #3
 800205a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002064:	f107 0310 	add.w	r3, r7, #16
 8002068:	4619      	mov	r1, r3
 800206a:	4819      	ldr	r0, [pc, #100]	; (80020d0 <MX_GPIO_Init+0x12c>)
 800206c:	f001 fc8c 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_RST_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin;
 8002070:	230e      	movs	r3, #14
 8002072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002074:	2301      	movs	r3, #1
 8002076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800207c:	2303      	movs	r3, #3
 800207e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002080:	f107 0310 	add.w	r3, r7, #16
 8002084:	4619      	mov	r1, r3
 8002086:	4813      	ldr	r0, [pc, #76]	; (80020d4 <MX_GPIO_Init+0x130>)
 8002088:	f001 fc7e 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pins : STICK_SB_Pin SB6_Pin SB7_Pin SB8_Pin
                           SB9_Pin SB10_Pin */
  GPIO_InitStruct.Pin = STICK_SB_Pin|SB6_Pin|SB7_Pin|SB8_Pin
 800208c:	23fc      	movs	r3, #252	; 0xfc
 800208e:	613b      	str	r3, [r7, #16]
                          |SB9_Pin|SB10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002098:	f107 0310 	add.w	r3, r7, #16
 800209c:	4619      	mov	r1, r3
 800209e:	480e      	ldr	r0, [pc, #56]	; (80020d8 <MX_GPIO_Init+0x134>)
 80020a0:	f001 fc72 	bl	8003988 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 80020a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 80020b6:	f107 0310 	add.w	r3, r7, #16
 80020ba:	4619      	mov	r1, r3
 80020bc:	4806      	ldr	r0, [pc, #24]	; (80020d8 <MX_GPIO_Init+0x134>)
 80020be:	f001 fc63 	bl	8003988 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020c2:	bf00      	nop
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40021000 	.word	0x40021000
 80020d0:	40011000 	.word	0x40011000
 80020d4:	40010800 	.word	0x40010800
 80020d8:	40010c00 	.word	0x40010c00

080020dc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == ADC1){
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a05      	ldr	r2, [pc, #20]	; (8002100 <HAL_ADC_ConvCpltCallback+0x24>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d102      	bne.n	80020f4 <HAL_ADC_ConvCpltCallback+0x18>
		ADC_flag = 1;
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_ADC_ConvCpltCallback+0x28>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	701a      	strb	r2, [r3, #0]
	}

}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bc80      	pop	{r7}
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40012400 	.word	0x40012400
 8002104:	20000414 	.word	0x20000414

08002108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002110:	e7fe      	b.n	8002110 <Error_Handler+0x8>
	...

08002114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_MspInit+0x5c>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	4a14      	ldr	r2, [pc, #80]	; (8002170 <HAL_MspInit+0x5c>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6193      	str	r3, [r2, #24]
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_MspInit+0x5c>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_MspInit+0x5c>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_MspInit+0x5c>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_MspInit+0x5c>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_MspInit+0x60>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_MspInit+0x60>)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000
 8002174:	40010000 	.word	0x40010000

08002178 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b088      	sub	sp, #32
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002180:	f107 0310 	add.w	r3, r7, #16
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a2c      	ldr	r2, [pc, #176]	; (8002244 <HAL_ADC_MspInit+0xcc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d151      	bne.n	800223c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002198:	4b2b      	ldr	r3, [pc, #172]	; (8002248 <HAL_ADC_MspInit+0xd0>)
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <HAL_ADC_MspInit+0xd0>)
 800219e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021a2:	6193      	str	r3, [r2, #24]
 80021a4:	4b28      	ldr	r3, [pc, #160]	; (8002248 <HAL_ADC_MspInit+0xd0>)
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b0:	4b25      	ldr	r3, [pc, #148]	; (8002248 <HAL_ADC_MspInit+0xd0>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a24      	ldr	r2, [pc, #144]	; (8002248 <HAL_ADC_MspInit+0xd0>)
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b22      	ldr	r3, [pc, #136]	; (8002248 <HAL_ADC_MspInit+0xd0>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 0308 	and.w	r3, r3, #8
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021c8:	2303      	movs	r3, #3
 80021ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021cc:	2303      	movs	r3, #3
 80021ce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 0310 	add.w	r3, r7, #16
 80021d4:	4619      	mov	r1, r3
 80021d6:	481d      	ldr	r0, [pc, #116]	; (800224c <HAL_ADC_MspInit+0xd4>)
 80021d8:	f001 fbd6 	bl	8003988 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_ADC_MspInit+0xd8>)
 80021de:	4a1d      	ldr	r2, [pc, #116]	; (8002254 <HAL_ADC_MspInit+0xdc>)
 80021e0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_ADC_MspInit+0xd8>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_ADC_MspInit+0xd8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_ADC_MspInit+0xd8>)
 80021f0:	2280      	movs	r2, #128	; 0x80
 80021f2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021f4:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_ADC_MspInit+0xd8>)
 80021f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021fa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_ADC_MspInit+0xd8>)
 80021fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002202:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_ADC_MspInit+0xd8>)
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_ADC_MspInit+0xd8>)
 800220c:	2200      	movs	r2, #0
 800220e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002210:	480f      	ldr	r0, [pc, #60]	; (8002250 <HAL_ADC_MspInit+0xd8>)
 8002212:	f001 f98f 	bl	8003534 <HAL_DMA_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 800221c:	f7ff ff74 	bl	8002108 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <HAL_ADC_MspInit+0xd8>)
 8002224:	621a      	str	r2, [r3, #32]
 8002226:	4a0a      	ldr	r2, [pc, #40]	; (8002250 <HAL_ADC_MspInit+0xd8>)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800222c:	2200      	movs	r2, #0
 800222e:	2100      	movs	r1, #0
 8002230:	2012      	movs	r0, #18
 8002232:	f001 f948 	bl	80034c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002236:	2012      	movs	r0, #18
 8002238:	f001 f961 	bl	80034fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800223c:	bf00      	nop
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40012400 	.word	0x40012400
 8002248:	40021000 	.word	0x40021000
 800224c:	40010c00 	.word	0x40010c00
 8002250:	20000240 	.word	0x20000240
 8002254:	40020008 	.word	0x40020008

08002258 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08a      	sub	sp, #40	; 0x28
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0318 	add.w	r3, r7, #24
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a4b      	ldr	r2, [pc, #300]	; (80023a0 <HAL_SPI_MspInit+0x148>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d157      	bne.n	8002328 <HAL_SPI_MspInit+0xd0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002278:	4b4a      	ldr	r3, [pc, #296]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a49      	ldr	r2, [pc, #292]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 800227e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002290:	4b44      	ldr	r3, [pc, #272]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	4a43      	ldr	r2, [pc, #268]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	6193      	str	r3, [r2, #24]
 800229c:	4b41      	ldr	r3, [pc, #260]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80022a8:	23a0      	movs	r3, #160	; 0xa0
 80022aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022b0:	2303      	movs	r3, #3
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b4:	f107 0318 	add.w	r3, r7, #24
 80022b8:	4619      	mov	r1, r3
 80022ba:	483b      	ldr	r0, [pc, #236]	; (80023a8 <HAL_SPI_MspInit+0x150>)
 80022bc:	f001 fb64 	bl	8003988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022c0:	2340      	movs	r3, #64	; 0x40
 80022c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022cc:	f107 0318 	add.w	r3, r7, #24
 80022d0:	4619      	mov	r1, r3
 80022d2:	4835      	ldr	r0, [pc, #212]	; (80023a8 <HAL_SPI_MspInit+0x150>)
 80022d4:	f001 fb58 	bl	8003988 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80022d8:	4b34      	ldr	r3, [pc, #208]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022da:	4a35      	ldr	r2, [pc, #212]	; (80023b0 <HAL_SPI_MspInit+0x158>)
 80022dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022de:	4b33      	ldr	r3, [pc, #204]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022e0:	2210      	movs	r2, #16
 80022e2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022ea:	4b30      	ldr	r3, [pc, #192]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022f0:	4b2e      	ldr	r3, [pc, #184]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022f6:	4b2d      	ldr	r3, [pc, #180]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80022fc:	4b2b      	ldr	r3, [pc, #172]	; (80023ac <HAL_SPI_MspInit+0x154>)
 80022fe:	2200      	movs	r2, #0
 8002300:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002302:	4b2a      	ldr	r3, [pc, #168]	; (80023ac <HAL_SPI_MspInit+0x154>)
 8002304:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8002308:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800230a:	4828      	ldr	r0, [pc, #160]	; (80023ac <HAL_SPI_MspInit+0x154>)
 800230c:	f001 f912 	bl	8003534 <HAL_DMA_Init>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8002316:	f7ff fef7 	bl	8002108 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a23      	ldr	r2, [pc, #140]	; (80023ac <HAL_SPI_MspInit+0x154>)
 800231e:	649a      	str	r2, [r3, #72]	; 0x48
 8002320:	4a22      	ldr	r2, [pc, #136]	; (80023ac <HAL_SPI_MspInit+0x154>)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002326:	e036      	b.n	8002396 <HAL_SPI_MspInit+0x13e>
  else if(hspi->Instance==SPI2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a21      	ldr	r2, [pc, #132]	; (80023b4 <HAL_SPI_MspInit+0x15c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d131      	bne.n	8002396 <HAL_SPI_MspInit+0x13e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 8002334:	69db      	ldr	r3, [r3, #28]
 8002336:	4a1b      	ldr	r2, [pc, #108]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 8002338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800233c:	61d3      	str	r3, [r2, #28]
 800233e:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	4a15      	ldr	r2, [pc, #84]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 8002350:	f043 0308 	orr.w	r3, r3, #8
 8002354:	6193      	str	r3, [r2, #24]
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_SPI_MspInit+0x14c>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002362:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002366:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800236c:	2303      	movs	r3, #3
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002370:	f107 0318 	add.w	r3, r7, #24
 8002374:	4619      	mov	r1, r3
 8002376:	4810      	ldr	r0, [pc, #64]	; (80023b8 <HAL_SPI_MspInit+0x160>)
 8002378:	f001 fb06 	bl	8003988 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800237c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800238a:	f107 0318 	add.w	r3, r7, #24
 800238e:	4619      	mov	r1, r3
 8002390:	4809      	ldr	r0, [pc, #36]	; (80023b8 <HAL_SPI_MspInit+0x160>)
 8002392:	f001 faf9 	bl	8003988 <HAL_GPIO_Init>
}
 8002396:	bf00      	nop
 8002398:	3728      	adds	r7, #40	; 0x28
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40013000 	.word	0x40013000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40010800 	.word	0x40010800
 80023ac:	20000334 	.word	0x20000334
 80023b0:	40020030 	.word	0x40020030
 80023b4:	40003800 	.word	0x40003800
 80023b8:	40010c00 	.word	0x40010c00

080023bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023bc:	b480      	push	{r7}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023cc:	d10b      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_TIM_Base_MspInit+0x34>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_TIM_Base_MspInit+0x34>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_TIM_Base_MspInit+0x34>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	40021000 	.word	0x40021000

080023f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 0310 	add.w	r3, r7, #16
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a1c      	ldr	r2, [pc, #112]	; (8002480 <HAL_UART_MspInit+0x8c>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d131      	bne.n	8002478 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <HAL_UART_MspInit+0x90>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	4a1a      	ldr	r2, [pc, #104]	; (8002484 <HAL_UART_MspInit+0x90>)
 800241a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241e:	6193      	str	r3, [r2, #24]
 8002420:	4b18      	ldr	r3, [pc, #96]	; (8002484 <HAL_UART_MspInit+0x90>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_UART_MspInit+0x90>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_UART_MspInit+0x90>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_UART_MspInit+0x90>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002444:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002448:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800244e:	2303      	movs	r3, #3
 8002450:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4619      	mov	r1, r3
 8002458:	480b      	ldr	r0, [pc, #44]	; (8002488 <HAL_UART_MspInit+0x94>)
 800245a:	f001 fa95 	bl	8003988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800245e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 0310 	add.w	r3, r7, #16
 8002470:	4619      	mov	r1, r3
 8002472:	4805      	ldr	r0, [pc, #20]	; (8002488 <HAL_UART_MspInit+0x94>)
 8002474:	f001 fa88 	bl	8003988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002478:	bf00      	nop
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40013800 	.word	0x40013800
 8002484:	40021000 	.word	0x40021000
 8002488:	40010800 	.word	0x40010800

0800248c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002490:	e7fe      	b.n	8002490 <NMI_Handler+0x4>

08002492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <HardFault_Handler+0x4>

08002498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <MemManage_Handler+0x4>

0800249e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <BusFault_Handler+0x4>

080024a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <UsageFault_Handler+0x4>

080024aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bc80      	pop	{r7}
 80024b4:	4770      	bx	lr

080024b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c2:	b480      	push	{r7}
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d2:	f000 f953 	bl	800277c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024e0:	4802      	ldr	r0, [pc, #8]	; (80024ec <DMA1_Channel1_IRQHandler+0x10>)
 80024e2:	f001 f91d 	bl	8003720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000240 	.word	0x20000240

080024f0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80024f4:	4802      	ldr	r0, [pc, #8]	; (8002500 <DMA1_Channel3_IRQHandler+0x10>)
 80024f6:	f001 f913 	bl	8003720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	20000334 	.word	0x20000334

08002504 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002508:	4802      	ldr	r0, [pc, #8]	; (8002514 <ADC1_2_IRQHandler+0x10>)
 800250a:	f000 fb79 	bl	8002c00 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000210 	.word	0x20000210

08002518 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return 1;
 800251c:	2301      	movs	r3, #1
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <_kill>:

int _kill(int pid, int sig)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
 800252e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002530:	f003 fed2 	bl	80062d8 <__errno>
 8002534:	4603      	mov	r3, r0
 8002536:	2216      	movs	r2, #22
 8002538:	601a      	str	r2, [r3, #0]
  return -1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <_exit>:

void _exit (int status)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	b082      	sub	sp, #8
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800254e:	f04f 31ff 	mov.w	r1, #4294967295
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffe7 	bl	8002526 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002558:	e7fe      	b.n	8002558 <_exit+0x12>

0800255a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b086      	sub	sp, #24
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
 800256a:	e00a      	b.n	8002582 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800256c:	f3af 8000 	nop.w
 8002570:	4601      	mov	r1, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	60ba      	str	r2, [r7, #8]
 8002578:	b2ca      	uxtb	r2, r1
 800257a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	3301      	adds	r3, #1
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	429a      	cmp	r2, r3
 8002588:	dbf0      	blt.n	800256c <_read+0x12>
  }

  return len;
 800258a:	687b      	ldr	r3, [r7, #4]
}
 800258c:	4618      	mov	r0, r3
 800258e:	3718      	adds	r7, #24
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e009      	b.n	80025ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1c5a      	adds	r2, r3, #1
 80025aa:	60ba      	str	r2, [r7, #8]
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	3301      	adds	r3, #1
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	429a      	cmp	r2, r3
 80025c0:	dbf1      	blt.n	80025a6 <_write+0x12>
  }
  return len;
 80025c2:	687b      	ldr	r3, [r7, #4]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <_close>:

int _close(int file)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr

080025e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
 80025ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025f2:	605a      	str	r2, [r3, #4]
  return 0;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <_isatty>:

int _isatty(int file)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002608:	2301      	movs	r3, #1
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr

0800262c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b086      	sub	sp, #24
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002634:	4a14      	ldr	r2, [pc, #80]	; (8002688 <_sbrk+0x5c>)
 8002636:	4b15      	ldr	r3, [pc, #84]	; (800268c <_sbrk+0x60>)
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <_sbrk+0x64>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d102      	bne.n	800264e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002648:	4b11      	ldr	r3, [pc, #68]	; (8002690 <_sbrk+0x64>)
 800264a:	4a12      	ldr	r2, [pc, #72]	; (8002694 <_sbrk+0x68>)
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <_sbrk+0x64>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	429a      	cmp	r2, r3
 800265a:	d207      	bcs.n	800266c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800265c:	f003 fe3c 	bl	80062d8 <__errno>
 8002660:	4603      	mov	r3, r0
 8002662:	220c      	movs	r2, #12
 8002664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002666:	f04f 33ff 	mov.w	r3, #4294967295
 800266a:	e009      	b.n	8002680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800266c:	4b08      	ldr	r3, [pc, #32]	; (8002690 <_sbrk+0x64>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002672:	4b07      	ldr	r3, [pc, #28]	; (8002690 <_sbrk+0x64>)
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4413      	add	r3, r2
 800267a:	4a05      	ldr	r2, [pc, #20]	; (8002690 <_sbrk+0x64>)
 800267c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20005000 	.word	0x20005000
 800268c:	00000400 	.word	0x00000400
 8002690:	20000418 	.word	0x20000418
 8002694:	20000580 	.word	0x20000580

08002698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr

080026a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026a4:	f7ff fff8 	bl	8002698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a8:	480b      	ldr	r0, [pc, #44]	; (80026d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80026aa:	490c      	ldr	r1, [pc, #48]	; (80026dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80026ac:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80026ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026b0:	e002      	b.n	80026b8 <LoopCopyDataInit>

080026b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b6:	3304      	adds	r3, #4

080026b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026bc:	d3f9      	bcc.n	80026b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026be:	4a09      	ldr	r2, [pc, #36]	; (80026e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80026c0:	4c09      	ldr	r4, [pc, #36]	; (80026e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c4:	e001      	b.n	80026ca <LoopFillZerobss>

080026c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c8:	3204      	adds	r2, #4

080026ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026cc:	d3fb      	bcc.n	80026c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ce:	f003 fe09 	bl	80062e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026d2:	f7ff fa01 	bl	8001ad8 <main>
  bx lr
 80026d6:	4770      	bx	lr
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80026e0:	0800a9e4 	.word	0x0800a9e4
  ldr r2, =_sbss
 80026e4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80026e8:	20000580 	.word	0x20000580

080026ec <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <CAN1_RX1_IRQHandler>
	...

080026f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_Init+0x28>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a07      	ldr	r2, [pc, #28]	; (8002718 <HAL_Init+0x28>)
 80026fa:	f043 0310 	orr.w	r3, r3, #16
 80026fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002700:	2003      	movs	r0, #3
 8002702:	f000 fed5 	bl	80034b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002706:	200f      	movs	r0, #15
 8002708:	f000 f808 	bl	800271c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800270c:	f7ff fd02 	bl	8002114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40022000 	.word	0x40022000

0800271c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002724:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_InitTick+0x54>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <HAL_InitTick+0x58>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002732:	fbb3 f3f1 	udiv	r3, r3, r1
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	4618      	mov	r0, r3
 800273c:	f000 feed 	bl	800351a <HAL_SYSTICK_Config>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e00e      	b.n	8002768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b0f      	cmp	r3, #15
 800274e:	d80a      	bhi.n	8002766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002750:	2200      	movs	r2, #0
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	f04f 30ff 	mov.w	r0, #4294967295
 8002758:	f000 feb5 	bl	80034c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800275c:	4a06      	ldr	r2, [pc, #24]	; (8002778 <HAL_InitTick+0x5c>)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
 8002764:	e000      	b.n	8002768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000004 	.word	0x20000004
 8002774:	2000000c 	.word	0x2000000c
 8002778:	20000008 	.word	0x20000008

0800277c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <HAL_IncTick+0x1c>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_IncTick+0x20>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4413      	add	r3, r2
 800278c:	4a03      	ldr	r2, [pc, #12]	; (800279c <HAL_IncTick+0x20>)
 800278e:	6013      	str	r3, [r2, #0]
}
 8002790:	bf00      	nop
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	2000000c 	.word	0x2000000c
 800279c:	2000041c 	.word	0x2000041c

080027a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return uwTick;
 80027a4:	4b02      	ldr	r3, [pc, #8]	; (80027b0 <HAL_GetTick+0x10>)
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr
 80027b0:	2000041c 	.word	0x2000041c

080027b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff fff0 	bl	80027a0 <HAL_GetTick>
 80027c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027cc:	d005      	beq.n	80027da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <HAL_Delay+0x44>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027da:	bf00      	nop
 80027dc:	f7ff ffe0 	bl	80027a0 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d8f7      	bhi.n	80027dc <HAL_Delay+0x28>
  {
  }
}
 80027ec:	bf00      	nop
 80027ee:	bf00      	nop
 80027f0:	3710      	adds	r7, #16
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	2000000c 	.word	0x2000000c

080027fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002804:	2300      	movs	r3, #0
 8002806:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002808:	2300      	movs	r3, #0
 800280a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e0be      	b.n	800299c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	2b00      	cmp	r3, #0
 800282a:	d109      	bne.n	8002840 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fc9c 	bl	8002178 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 fc09 	bl	8003058 <ADC_ConversionStop_Disable>
 8002846:	4603      	mov	r3, r0
 8002848:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	f003 0310 	and.w	r3, r3, #16
 8002852:	2b00      	cmp	r3, #0
 8002854:	f040 8099 	bne.w	800298a <HAL_ADC_Init+0x18e>
 8002858:	7dfb      	ldrb	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 8095 	bne.w	800298a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002868:	f023 0302 	bic.w	r3, r3, #2
 800286c:	f043 0202 	orr.w	r2, r3, #2
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800287c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	7b1b      	ldrb	r3, [r3, #12]
 8002882:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002884:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4313      	orrs	r3, r2
 800288a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002894:	d003      	beq.n	800289e <HAL_ADC_Init+0xa2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d102      	bne.n	80028a4 <HAL_ADC_Init+0xa8>
 800289e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a2:	e000      	b.n	80028a6 <HAL_ADC_Init+0xaa>
 80028a4:	2300      	movs	r3, #0
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7d1b      	ldrb	r3, [r3, #20]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d119      	bne.n	80028e8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7b1b      	ldrb	r3, [r3, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d109      	bne.n	80028d0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	035a      	lsls	r2, r3, #13
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	e00b      	b.n	80028e8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	f043 0220 	orr.w	r2, r3, #32
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	f043 0201 	orr.w	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <HAL_ADC_Init+0x1a8>)
 8002904:	4013      	ands	r3, r2
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	68b9      	ldr	r1, [r7, #8]
 800290c:	430b      	orrs	r3, r1
 800290e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002918:	d003      	beq.n	8002922 <HAL_ADC_Init+0x126>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d104      	bne.n	800292c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	3b01      	subs	r3, #1
 8002928:	051b      	lsls	r3, r3, #20
 800292a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	430a      	orrs	r2, r1
 800293e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	4b18      	ldr	r3, [pc, #96]	; (80029a8 <HAL_ADC_Init+0x1ac>)
 8002948:	4013      	ands	r3, r2
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	429a      	cmp	r2, r3
 800294e:	d10b      	bne.n	8002968 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002966:	e018      	b.n	800299a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296c:	f023 0312 	bic.w	r3, r3, #18
 8002970:	f043 0210 	orr.w	r2, r3, #16
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	f043 0201 	orr.w	r2, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002988:	e007      	b.n	800299a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298e:	f043 0210 	orr.w	r2, r3, #16
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800299a:	7dfb      	ldrb	r3, [r7, #23]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	ffe1f7fd 	.word	0xffe1f7fd
 80029a8:	ff1f0efe 	.word	0xff1f0efe

080029ac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b086      	sub	sp, #24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a64      	ldr	r2, [pc, #400]	; (8002b54 <HAL_ADC_Start_DMA+0x1a8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d004      	beq.n	80029d0 <HAL_ADC_Start_DMA+0x24>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a63      	ldr	r2, [pc, #396]	; (8002b58 <HAL_ADC_Start_DMA+0x1ac>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d106      	bne.n	80029de <HAL_ADC_Start_DMA+0x32>
 80029d0:	4b60      	ldr	r3, [pc, #384]	; (8002b54 <HAL_ADC_Start_DMA+0x1a8>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f040 80b3 	bne.w	8002b44 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d101      	bne.n	80029ec <HAL_ADC_Start_DMA+0x40>
 80029e8:	2302      	movs	r3, #2
 80029ea:	e0ae      	b.n	8002b4a <HAL_ADC_Start_DMA+0x19e>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fad5 	bl	8002fa4 <ADC_Enable>
 80029fa:	4603      	mov	r3, r0
 80029fc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f040 809a 	bne.w	8002b3a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a4e      	ldr	r2, [pc, #312]	; (8002b58 <HAL_ADC_Start_DMA+0x1ac>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d105      	bne.n	8002a30 <HAL_ADC_Start_DMA+0x84>
 8002a24:	4b4b      	ldr	r3, [pc, #300]	; (8002b54 <HAL_ADC_Start_DMA+0x1a8>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d115      	bne.n	8002a5c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a34:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d026      	beq.n	8002a98 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a4e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a52:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a5a:	e01d      	b.n	8002a98 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a39      	ldr	r2, [pc, #228]	; (8002b54 <HAL_ADC_Start_DMA+0x1a8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d004      	beq.n	8002a7c <HAL_ADC_Start_DMA+0xd0>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a38      	ldr	r2, [pc, #224]	; (8002b58 <HAL_ADC_Start_DMA+0x1ac>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d10d      	bne.n	8002a98 <HAL_ADC_Start_DMA+0xec>
 8002a7c:	4b35      	ldr	r3, [pc, #212]	; (8002b54 <HAL_ADC_Start_DMA+0x1a8>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d007      	beq.n	8002a98 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d006      	beq.n	8002ab2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f023 0206 	bic.w	r2, r3, #6
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ab0:	e002      	b.n	8002ab8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	4a25      	ldr	r2, [pc, #148]	; (8002b5c <HAL_ADC_Start_DMA+0x1b0>)
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4a24      	ldr	r2, [pc, #144]	; (8002b60 <HAL_ADC_Start_DMA+0x1b4>)
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4a23      	ldr	r2, [pc, #140]	; (8002b64 <HAL_ADC_Start_DMA+0x1b8>)
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f06f 0202 	mvn.w	r2, #2
 8002ae0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a18      	ldr	r0, [r3, #32]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	334c      	adds	r3, #76	; 0x4c
 8002afc:	4619      	mov	r1, r3
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f000 fd71 	bl	80035e8 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b10:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b14:	d108      	bne.n	8002b28 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002b24:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002b26:	e00f      	b.n	8002b48 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002b36:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002b38:	e006      	b.n	8002b48 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8002b42:	e001      	b.n	8002b48 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40012400 	.word	0x40012400
 8002b58:	40012800 	.word	0x40012800
 8002b5c:	080030db 	.word	0x080030db
 8002b60:	08003157 	.word	0x08003157
 8002b64:	08003173 	.word	0x08003173

08002b68 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d101      	bne.n	8002b82 <HAL_ADC_Stop_DMA+0x1a>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	e03a      	b.n	8002bf8 <HAL_ADC_Stop_DMA+0x90>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa64 	bl	8003058 <ADC_ConversionStop_Disable>
 8002b90:	4603      	mov	r3, r0
 8002b92:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d129      	bne.n	8002bee <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba8:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d11a      	bne.n	8002bee <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 fd73 	bl	80036a8 <HAL_DMA_Abort>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10a      	bne.n	8002be2 <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002bd4:	f023 0301 	bic.w	r3, r3, #1
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
 8002be0:	e005      	b.n	8002bee <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3710      	adds	r7, #16
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d03e      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d039      	beq.n	8002ca0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	f003 0310 	and.w	r3, r3, #16
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d105      	bne.n	8002c44 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002c4e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002c52:	d11d      	bne.n	8002c90 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d119      	bne.n	8002c90 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0220 	bic.w	r2, r2, #32
 8002c6a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	f043 0201 	orr.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff fa23 	bl	80020dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f06f 0212 	mvn.w	r2, #18
 8002c9e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d04d      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d048      	beq.n	8002d46 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8002cd6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002cda:	d012      	beq.n	8002d02 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d125      	bne.n	8002d36 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002cf4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cf8:	d11d      	bne.n	8002d36 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d119      	bne.n	8002d36 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d10:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fae4 	bl	8003304 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f06f 020c 	mvn.w	r2, #12
 8002d44:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d012      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00d      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f812 	bl	8002d90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0201 	mvn.w	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bc80      	pop	{r7}
 8002da0:	4770      	bx	lr

08002da2 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bc80      	pop	{r7}
 8002db2:	4770      	bx	lr

08002db4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x20>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0dc      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x1da>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	d81c      	bhi.n	8002e1e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685a      	ldr	r2, [r3, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	3b05      	subs	r3, #5
 8002df6:	221f      	movs	r2, #31
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	4019      	ands	r1, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	3b05      	subs	r3, #5
 8002e10:	fa00 f203 	lsl.w	r2, r0, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	430a      	orrs	r2, r1
 8002e1a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e1c:	e03c      	b.n	8002e98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	2b0c      	cmp	r3, #12
 8002e24:	d81c      	bhi.n	8002e60 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	3b23      	subs	r3, #35	; 0x23
 8002e38:	221f      	movs	r2, #31
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43db      	mvns	r3, r3
 8002e40:	4019      	ands	r1, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	3b23      	subs	r3, #35	; 0x23
 8002e52:	fa00 f203 	lsl.w	r2, r0, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002e5e:	e01b      	b.n	8002e98 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	3b41      	subs	r3, #65	; 0x41
 8002e72:	221f      	movs	r2, #31
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	4019      	ands	r1, r3
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6818      	ldr	r0, [r3, #0]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685a      	ldr	r2, [r3, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	3b41      	subs	r3, #65	; 0x41
 8002e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b09      	cmp	r3, #9
 8002e9e:	d91c      	bls.n	8002eda <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68d9      	ldr	r1, [r3, #12]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b1e      	subs	r3, #30
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	4019      	ands	r1, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6898      	ldr	r0, [r3, #8]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	005b      	lsls	r3, r3, #1
 8002ec8:	4413      	add	r3, r2
 8002eca:	3b1e      	subs	r3, #30
 8002ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	60da      	str	r2, [r3, #12]
 8002ed8:	e019      	b.n	8002f0e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6919      	ldr	r1, [r3, #16]
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	2207      	movs	r2, #7
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	4019      	ands	r1, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	6898      	ldr	r0, [r3, #8]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4413      	add	r3, r2
 8002f02:	fa00 f203 	lsl.w	r2, r0, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2b10      	cmp	r3, #16
 8002f14:	d003      	beq.n	8002f1e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002f1a:	2b11      	cmp	r3, #17
 8002f1c:	d132      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <HAL_ADC_ConfigChannel+0x1e4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d125      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d126      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f44:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b10      	cmp	r3, #16
 8002f4c:	d11a      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f4e:	4b13      	ldr	r3, [pc, #76]	; (8002f9c <HAL_ADC_ConfigChannel+0x1e8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002f54:	fba2 2303 	umull	r2, r3, r2, r3
 8002f58:	0c9a      	lsrs	r2, r3, #18
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f64:	e002      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f9      	bne.n	8002f66 <HAL_ADC_ConfigChannel+0x1b2>
 8002f72:	e007      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	f043 0220 	orr.w	r2, r3, #32
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3714      	adds	r7, #20
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bc80      	pop	{r7}
 8002f96:	4770      	bx	lr
 8002f98:	40012400 	.word	0x40012400
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	431bde83 	.word	0x431bde83

08002fa4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d040      	beq.n	8003044 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f042 0201 	orr.w	r2, r2, #1
 8002fd0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002fd2:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <ADC_Enable+0xac>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a1f      	ldr	r2, [pc, #124]	; (8003054 <ADC_Enable+0xb0>)
 8002fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fdc:	0c9b      	lsrs	r3, r3, #18
 8002fde:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fe0:	e002      	b.n	8002fe8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f9      	bne.n	8002fe2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002fee:	f7ff fbd7 	bl	80027a0 <HAL_GetTick>
 8002ff2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ff4:	e01f      	b.n	8003036 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ff6:	f7ff fbd3 	bl	80027a0 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	2b02      	cmp	r3, #2
 8003002:	d918      	bls.n	8003036 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b01      	cmp	r3, #1
 8003010:	d011      	beq.n	8003036 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	f043 0210 	orr.w	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e007      	b.n	8003046 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	d1d8      	bne.n	8002ff6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20000004 	.word	0x20000004
 8003054:	431bde83 	.word	0x431bde83

08003058 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b01      	cmp	r3, #1
 8003070:	d12e      	bne.n	80030d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0201 	bic.w	r2, r2, #1
 8003080:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003082:	f7ff fb8d 	bl	80027a0 <HAL_GetTick>
 8003086:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003088:	e01b      	b.n	80030c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800308a:	f7ff fb89 	bl	80027a0 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d914      	bls.n	80030c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 0301 	and.w	r3, r3, #1
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d10d      	bne.n	80030c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030aa:	f043 0210 	orr.w	r2, r3, #16
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	f043 0201 	orr.w	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e007      	b.n	80030d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d0dc      	beq.n	800308a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d127      	bne.n	8003144 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800310a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800310e:	d115      	bne.n	800313c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003114:	2b00      	cmp	r3, #0
 8003116:	d111      	bne.n	800313c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003134:	f043 0201 	orr.w	r2, r3, #1
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7fe ffcd 	bl	80020dc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003142:	e004      	b.n	800314e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
}
 800314e:	bf00      	nop
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b084      	sub	sp, #16
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f7ff fe0a 	bl	8002d7e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b084      	sub	sp, #16
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003184:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003190:	f043 0204 	orr.w	r2, r3, #4
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff fe02 	bl	8002da2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80031a8:	b590      	push	{r4, r7, lr}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d101      	bne.n	80031c6 <HAL_ADCEx_Calibration_Start+0x1e>
 80031c2:	2302      	movs	r3, #2
 80031c4:	e097      	b.n	80032f6 <HAL_ADCEx_Calibration_Start+0x14e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7ff ff42 	bl	8003058 <ADC_ConversionStop_Disable>
 80031d4:	4603      	mov	r3, r0
 80031d6:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff fee3 	bl	8002fa4 <ADC_Enable>
 80031de:	4603      	mov	r3, r0
 80031e0:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80031e2:	7dfb      	ldrb	r3, [r7, #23]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 8081 	bne.w	80032ec <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031f2:	f023 0302 	bic.w	r3, r3, #2
 80031f6:	f043 0202 	orr.w	r2, r3, #2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80031fe:	4b40      	ldr	r3, [pc, #256]	; (8003300 <HAL_ADCEx_Calibration_Start+0x158>)
 8003200:	681c      	ldr	r4, [r3, #0]
 8003202:	2002      	movs	r0, #2
 8003204:	f001 fa22 	bl	800464c <HAL_RCCEx_GetPeriphCLKFreq>
 8003208:	4603      	mov	r3, r0
 800320a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800320e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8003210:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8003212:	e002      	b.n	800321a <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	3b01      	subs	r3, #1
 8003218:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f9      	bne.n	8003214 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0208 	orr.w	r2, r2, #8
 800322e:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8003230:	f7ff fab6 	bl	80027a0 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003236:	e01b      	b.n	8003270 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003238:	f7ff fab2 	bl	80027a0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b0a      	cmp	r3, #10
 8003244:	d914      	bls.n	8003270 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0308 	and.w	r3, r3, #8
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00d      	beq.n	8003270 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	f023 0312 	bic.w	r3, r3, #18
 800325c:	f043 0210 	orr.w	r2, r3, #16
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e042      	b.n	80032f6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1dc      	bne.n	8003238 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0204 	orr.w	r2, r2, #4
 800328c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800328e:	f7ff fa87 	bl	80027a0 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8003294:	e01b      	b.n	80032ce <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003296:	f7ff fa83 	bl	80027a0 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b0a      	cmp	r3, #10
 80032a2:	d914      	bls.n	80032ce <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	f023 0312 	bic.w	r3, r3, #18
 80032ba:	f043 0210 	orr.w	r2, r3, #16
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e013      	b.n	80032f6 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1dc      	bne.n	8003296 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	f023 0303 	bic.w	r3, r3, #3
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000004 	.word	0x20000004

08003304 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
	...

08003318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800332e:	68ba      	ldr	r2, [r7, #8]
 8003330:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003334:	4013      	ands	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003340:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003344:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800334a:	4a04      	ldr	r2, [pc, #16]	; (800335c <__NVIC_SetPriorityGrouping+0x44>)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	60d3      	str	r3, [r2, #12]
}
 8003350:	bf00      	nop
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003364:	4b04      	ldr	r3, [pc, #16]	; (8003378 <__NVIC_GetPriorityGrouping+0x18>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	f003 0307 	and.w	r3, r3, #7
}
 800336e:	4618      	mov	r0, r3
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	4603      	mov	r3, r0
 8003384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338a:	2b00      	cmp	r3, #0
 800338c:	db0b      	blt.n	80033a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	f003 021f 	and.w	r2, r3, #31
 8003394:	4906      	ldr	r1, [pc, #24]	; (80033b0 <__NVIC_EnableIRQ+0x34>)
 8003396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2001      	movs	r0, #1
 800339e:	fa00 f202 	lsl.w	r2, r0, r2
 80033a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	e000e100 	.word	0xe000e100

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3b01      	subs	r3, #1
 8003478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800347c:	d301      	bcc.n	8003482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800347e:	2301      	movs	r3, #1
 8003480:	e00f      	b.n	80034a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003482:	4a0a      	ldr	r2, [pc, #40]	; (80034ac <SysTick_Config+0x40>)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348a:	210f      	movs	r1, #15
 800348c:	f04f 30ff 	mov.w	r0, #4294967295
 8003490:	f7ff ff90 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003494:	4b05      	ldr	r3, [pc, #20]	; (80034ac <SysTick_Config+0x40>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <SysTick_Config+0x40>)
 800349c:	2207      	movs	r2, #7
 800349e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	e000e010 	.word	0xe000e010

080034b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff ff2d 	bl	8003318 <__NVIC_SetPriorityGrouping>
}
 80034be:	bf00      	nop
 80034c0:	3708      	adds	r7, #8
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}

080034c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b086      	sub	sp, #24
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	4603      	mov	r3, r0
 80034ce:	60b9      	str	r1, [r7, #8]
 80034d0:	607a      	str	r2, [r7, #4]
 80034d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80034d4:	2300      	movs	r3, #0
 80034d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80034d8:	f7ff ff42 	bl	8003360 <__NVIC_GetPriorityGrouping>
 80034dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	6978      	ldr	r0, [r7, #20]
 80034e4:	f7ff ff90 	bl	8003408 <NVIC_EncodePriority>
 80034e8:	4602      	mov	r2, r0
 80034ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff5f 	bl	80033b4 <__NVIC_SetPriority>
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff35 	bl	800337c <__NVIC_EnableIRQ>
}
 8003512:	bf00      	nop
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7ff ffa2 	bl	800346c <SysTick_Config>
 8003528:	4603      	mov	r3, r0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e043      	b.n	80035d2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	4b22      	ldr	r3, [pc, #136]	; (80035dc <HAL_DMA_Init+0xa8>)
 8003552:	4413      	add	r3, r2
 8003554:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <HAL_DMA_Init+0xac>)
 8003556:	fba2 2303 	umull	r2, r3, r2, r3
 800355a:	091b      	lsrs	r3, r3, #4
 800355c:	009a      	lsls	r2, r3, #2
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1f      	ldr	r2, [pc, #124]	; (80035e4 <HAL_DMA_Init+0xb0>)
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2202      	movs	r2, #2
 800356c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800357e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003582:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800358c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2200      	movs	r2, #0
 80035be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3714      	adds	r7, #20
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr
 80035dc:	bffdfff8 	.word	0xbffdfff8
 80035e0:	cccccccd 	.word	0xcccccccd
 80035e4:	40020000 	.word	0x40020000

080035e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_DMA_Start_IT+0x20>
 8003604:	2302      	movs	r3, #2
 8003606:	e04b      	b.n	80036a0 <HAL_DMA_Start_IT+0xb8>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d13a      	bne.n	8003692 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	68b9      	ldr	r1, [r7, #8]
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f973 	bl	800392c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d008      	beq.n	8003660 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 020e 	orr.w	r2, r2, #14
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	e00f      	b.n	8003680 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 020a 	orr.w	r2, r2, #10
 800367e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	e005      	b.n	800369e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800369a:	2302      	movs	r3, #2
 800369c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800369e:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3718      	adds	r7, #24
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d008      	beq.n	80036d2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2204      	movs	r2, #4
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e020      	b.n	8003714 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 020e 	bic.w	r2, r2, #14
 80036e0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0201 	bic.w	r2, r2, #1
 80036f0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	2101      	movs	r1, #1
 80036fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003700:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003712:	7bfb      	ldrb	r3, [r7, #15]
}
 8003714:	4618      	mov	r0, r3
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
	...

08003720 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	2204      	movs	r2, #4
 800373e:	409a      	lsls	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d04f      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xc8>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	2b00      	cmp	r3, #0
 8003750:	d04a      	beq.n	80037e8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d107      	bne.n	8003770 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 0204 	bic.w	r2, r2, #4
 800376e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a66      	ldr	r2, [pc, #408]	; (8003910 <HAL_DMA_IRQHandler+0x1f0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d029      	beq.n	80037ce <HAL_DMA_IRQHandler+0xae>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a65      	ldr	r2, [pc, #404]	; (8003914 <HAL_DMA_IRQHandler+0x1f4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d022      	beq.n	80037ca <HAL_DMA_IRQHandler+0xaa>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a63      	ldr	r2, [pc, #396]	; (8003918 <HAL_DMA_IRQHandler+0x1f8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d01a      	beq.n	80037c4 <HAL_DMA_IRQHandler+0xa4>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a62      	ldr	r2, [pc, #392]	; (800391c <HAL_DMA_IRQHandler+0x1fc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d012      	beq.n	80037be <HAL_DMA_IRQHandler+0x9e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a60      	ldr	r2, [pc, #384]	; (8003920 <HAL_DMA_IRQHandler+0x200>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00a      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x98>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a5f      	ldr	r2, [pc, #380]	; (8003924 <HAL_DMA_IRQHandler+0x204>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d102      	bne.n	80037b2 <HAL_DMA_IRQHandler+0x92>
 80037ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80037b0:	e00e      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80037b6:	e00b      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037b8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80037bc:	e008      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037c2:	e005      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037c8:	e002      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037ca:	2340      	movs	r3, #64	; 0x40
 80037cc:	e000      	b.n	80037d0 <HAL_DMA_IRQHandler+0xb0>
 80037ce:	2304      	movs	r3, #4
 80037d0:	4a55      	ldr	r2, [pc, #340]	; (8003928 <HAL_DMA_IRQHandler+0x208>)
 80037d2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 8094 	beq.w	8003906 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80037e6:	e08e      	b.n	8003906 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	2202      	movs	r2, #2
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d056      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x186>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d051      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10b      	bne.n	8003828 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 020a 	bic.w	r2, r2, #10
 800381e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a38      	ldr	r2, [pc, #224]	; (8003910 <HAL_DMA_IRQHandler+0x1f0>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d029      	beq.n	8003886 <HAL_DMA_IRQHandler+0x166>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a37      	ldr	r2, [pc, #220]	; (8003914 <HAL_DMA_IRQHandler+0x1f4>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d022      	beq.n	8003882 <HAL_DMA_IRQHandler+0x162>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a35      	ldr	r2, [pc, #212]	; (8003918 <HAL_DMA_IRQHandler+0x1f8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01a      	beq.n	800387c <HAL_DMA_IRQHandler+0x15c>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a34      	ldr	r2, [pc, #208]	; (800391c <HAL_DMA_IRQHandler+0x1fc>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d012      	beq.n	8003876 <HAL_DMA_IRQHandler+0x156>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a32      	ldr	r2, [pc, #200]	; (8003920 <HAL_DMA_IRQHandler+0x200>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d00a      	beq.n	8003870 <HAL_DMA_IRQHandler+0x150>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a31      	ldr	r2, [pc, #196]	; (8003924 <HAL_DMA_IRQHandler+0x204>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d102      	bne.n	800386a <HAL_DMA_IRQHandler+0x14a>
 8003864:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003868:	e00e      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 800386a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800386e:	e00b      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 8003870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003874:	e008      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 8003876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800387a:	e005      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 800387c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003880:	e002      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 8003882:	2320      	movs	r3, #32
 8003884:	e000      	b.n	8003888 <HAL_DMA_IRQHandler+0x168>
 8003886:	2302      	movs	r3, #2
 8003888:	4a27      	ldr	r2, [pc, #156]	; (8003928 <HAL_DMA_IRQHandler+0x208>)
 800388a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003898:	2b00      	cmp	r3, #0
 800389a:	d034      	beq.n	8003906 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038a4:	e02f      	b.n	8003906 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	2208      	movs	r2, #8
 80038ac:	409a      	lsls	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4013      	ands	r3, r2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d028      	beq.n	8003908 <HAL_DMA_IRQHandler+0x1e8>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d023      	beq.n	8003908 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 020e 	bic.w	r2, r2, #14
 80038ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d8:	2101      	movs	r1, #1
 80038da:	fa01 f202 	lsl.w	r2, r1, r2
 80038de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d004      	beq.n	8003908 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	4798      	blx	r3
    }
  }
  return;
 8003906:	bf00      	nop
 8003908:	bf00      	nop
}
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40020008 	.word	0x40020008
 8003914:	4002001c 	.word	0x4002001c
 8003918:	40020030 	.word	0x40020030
 800391c:	40020044 	.word	0x40020044
 8003920:	40020058 	.word	0x40020058
 8003924:	4002006c 	.word	0x4002006c
 8003928:	40020000 	.word	0x40020000

0800392c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800392c:	b480      	push	{r7}
 800392e:	b085      	sub	sp, #20
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
 8003938:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003942:	2101      	movs	r1, #1
 8003944:	fa01 f202 	lsl.w	r2, r1, r2
 8003948:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	2b10      	cmp	r3, #16
 8003958:	d108      	bne.n	800396c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800396a:	e007      	b.n	800397c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	60da      	str	r2, [r3, #12]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	bc80      	pop	{r7}
 8003984:	4770      	bx	lr
	...

08003988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003988:	b480      	push	{r7}
 800398a:	b08b      	sub	sp, #44	; 0x2c
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003992:	2300      	movs	r3, #0
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003996:	2300      	movs	r3, #0
 8003998:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800399a:	e169      	b.n	8003c70 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800399c:	2201      	movs	r2, #1
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	4013      	ands	r3, r2
 80039ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	f040 8158 	bne.w	8003c6a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4a9a      	ldr	r2, [pc, #616]	; (8003c28 <HAL_GPIO_Init+0x2a0>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d05e      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
 80039c4:	4a98      	ldr	r2, [pc, #608]	; (8003c28 <HAL_GPIO_Init+0x2a0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d875      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 80039ca:	4a98      	ldr	r2, [pc, #608]	; (8003c2c <HAL_GPIO_Init+0x2a4>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d058      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
 80039d0:	4a96      	ldr	r2, [pc, #600]	; (8003c2c <HAL_GPIO_Init+0x2a4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d86f      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 80039d6:	4a96      	ldr	r2, [pc, #600]	; (8003c30 <HAL_GPIO_Init+0x2a8>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d052      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
 80039dc:	4a94      	ldr	r2, [pc, #592]	; (8003c30 <HAL_GPIO_Init+0x2a8>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d869      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 80039e2:	4a94      	ldr	r2, [pc, #592]	; (8003c34 <HAL_GPIO_Init+0x2ac>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d04c      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
 80039e8:	4a92      	ldr	r2, [pc, #584]	; (8003c34 <HAL_GPIO_Init+0x2ac>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d863      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 80039ee:	4a92      	ldr	r2, [pc, #584]	; (8003c38 <HAL_GPIO_Init+0x2b0>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d046      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
 80039f4:	4a90      	ldr	r2, [pc, #576]	; (8003c38 <HAL_GPIO_Init+0x2b0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d85d      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 80039fa:	2b12      	cmp	r3, #18
 80039fc:	d82a      	bhi.n	8003a54 <HAL_GPIO_Init+0xcc>
 80039fe:	2b12      	cmp	r3, #18
 8003a00:	d859      	bhi.n	8003ab6 <HAL_GPIO_Init+0x12e>
 8003a02:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <HAL_GPIO_Init+0x80>)
 8003a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a08:	08003a83 	.word	0x08003a83
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	08003a6f 	.word	0x08003a6f
 8003a14:	08003ab1 	.word	0x08003ab1
 8003a18:	08003ab7 	.word	0x08003ab7
 8003a1c:	08003ab7 	.word	0x08003ab7
 8003a20:	08003ab7 	.word	0x08003ab7
 8003a24:	08003ab7 	.word	0x08003ab7
 8003a28:	08003ab7 	.word	0x08003ab7
 8003a2c:	08003ab7 	.word	0x08003ab7
 8003a30:	08003ab7 	.word	0x08003ab7
 8003a34:	08003ab7 	.word	0x08003ab7
 8003a38:	08003ab7 	.word	0x08003ab7
 8003a3c:	08003ab7 	.word	0x08003ab7
 8003a40:	08003ab7 	.word	0x08003ab7
 8003a44:	08003ab7 	.word	0x08003ab7
 8003a48:	08003ab7 	.word	0x08003ab7
 8003a4c:	08003a65 	.word	0x08003a65
 8003a50:	08003a79 	.word	0x08003a79
 8003a54:	4a79      	ldr	r2, [pc, #484]	; (8003c3c <HAL_GPIO_Init+0x2b4>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a5a:	e02c      	b.n	8003ab6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	623b      	str	r3, [r7, #32]
          break;
 8003a62:	e029      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	623b      	str	r3, [r7, #32]
          break;
 8003a6c:	e024      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	3308      	adds	r3, #8
 8003a74:	623b      	str	r3, [r7, #32]
          break;
 8003a76:	e01f      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	623b      	str	r3, [r7, #32]
          break;
 8003a80:	e01a      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d102      	bne.n	8003a90 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	623b      	str	r3, [r7, #32]
          break;
 8003a8e:	e013      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d105      	bne.n	8003aa4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a98:	2308      	movs	r3, #8
 8003a9a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	611a      	str	r2, [r3, #16]
          break;
 8003aa2:	e009      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003aa4:	2308      	movs	r3, #8
 8003aa6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69fa      	ldr	r2, [r7, #28]
 8003aac:	615a      	str	r2, [r3, #20]
          break;
 8003aae:	e003      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	623b      	str	r3, [r7, #32]
          break;
 8003ab4:	e000      	b.n	8003ab8 <HAL_GPIO_Init+0x130>
          break;
 8003ab6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2bff      	cmp	r3, #255	; 0xff
 8003abc:	d801      	bhi.n	8003ac2 <HAL_GPIO_Init+0x13a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	e001      	b.n	8003ac6 <HAL_GPIO_Init+0x13e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2bff      	cmp	r3, #255	; 0xff
 8003acc:	d802      	bhi.n	8003ad4 <HAL_GPIO_Init+0x14c>
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	e002      	b.n	8003ada <HAL_GPIO_Init+0x152>
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	3b08      	subs	r3, #8
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	210f      	movs	r1, #15
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	401a      	ands	r2, r3
 8003aec:	6a39      	ldr	r1, [r7, #32]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	fa01 f303 	lsl.w	r3, r1, r3
 8003af4:	431a      	orrs	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 80b1 	beq.w	8003c6a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b08:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <HAL_GPIO_Init+0x2b8>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	4a4c      	ldr	r2, [pc, #304]	; (8003c40 <HAL_GPIO_Init+0x2b8>)
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	6193      	str	r3, [r2, #24]
 8003b14:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <HAL_GPIO_Init+0x2b8>)
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b20:	4a48      	ldr	r2, [pc, #288]	; (8003c44 <HAL_GPIO_Init+0x2bc>)
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	089b      	lsrs	r3, r3, #2
 8003b26:	3302      	adds	r3, #2
 8003b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	220f      	movs	r2, #15
 8003b38:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a40      	ldr	r2, [pc, #256]	; (8003c48 <HAL_GPIO_Init+0x2c0>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d013      	beq.n	8003b74 <HAL_GPIO_Init+0x1ec>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a3f      	ldr	r2, [pc, #252]	; (8003c4c <HAL_GPIO_Init+0x2c4>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00d      	beq.n	8003b70 <HAL_GPIO_Init+0x1e8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a3e      	ldr	r2, [pc, #248]	; (8003c50 <HAL_GPIO_Init+0x2c8>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d007      	beq.n	8003b6c <HAL_GPIO_Init+0x1e4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a3d      	ldr	r2, [pc, #244]	; (8003c54 <HAL_GPIO_Init+0x2cc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_GPIO_Init+0x1e0>
 8003b64:	2303      	movs	r3, #3
 8003b66:	e006      	b.n	8003b76 <HAL_GPIO_Init+0x1ee>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	e004      	b.n	8003b76 <HAL_GPIO_Init+0x1ee>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e002      	b.n	8003b76 <HAL_GPIO_Init+0x1ee>
 8003b70:	2301      	movs	r3, #1
 8003b72:	e000      	b.n	8003b76 <HAL_GPIO_Init+0x1ee>
 8003b74:	2300      	movs	r3, #0
 8003b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b78:	f002 0203 	and.w	r2, r2, #3
 8003b7c:	0092      	lsls	r2, r2, #2
 8003b7e:	4093      	lsls	r3, r2
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b86:	492f      	ldr	r1, [pc, #188]	; (8003c44 <HAL_GPIO_Init+0x2bc>)
 8003b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	3302      	adds	r3, #2
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d006      	beq.n	8003bae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	492c      	ldr	r1, [pc, #176]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	608b      	str	r3, [r1, #8]
 8003bac:	e006      	b.n	8003bbc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003bae:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	4928      	ldr	r1, [pc, #160]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d006      	beq.n	8003bd6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003bc8:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bca:	68da      	ldr	r2, [r3, #12]
 8003bcc:	4922      	ldr	r1, [pc, #136]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60cb      	str	r3, [r1, #12]
 8003bd4:	e006      	b.n	8003be4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003bd6:	4b20      	ldr	r3, [pc, #128]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bd8:	68da      	ldr	r2, [r3, #12]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	491e      	ldr	r1, [pc, #120]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d006      	beq.n	8003bfe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bf0:	4b19      	ldr	r3, [pc, #100]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	4918      	ldr	r1, [pc, #96]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	604b      	str	r3, [r1, #4]
 8003bfc:	e006      	b.n	8003c0c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bfe:	4b16      	ldr	r3, [pc, #88]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	4914      	ldr	r1, [pc, #80]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d021      	beq.n	8003c5c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c18:	4b0f      	ldr	r3, [pc, #60]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	490e      	ldr	r1, [pc, #56]	; (8003c58 <HAL_GPIO_Init+0x2d0>)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	600b      	str	r3, [r1, #0]
 8003c24:	e021      	b.n	8003c6a <HAL_GPIO_Init+0x2e2>
 8003c26:	bf00      	nop
 8003c28:	10320000 	.word	0x10320000
 8003c2c:	10310000 	.word	0x10310000
 8003c30:	10220000 	.word	0x10220000
 8003c34:	10210000 	.word	0x10210000
 8003c38:	10120000 	.word	0x10120000
 8003c3c:	10110000 	.word	0x10110000
 8003c40:	40021000 	.word	0x40021000
 8003c44:	40010000 	.word	0x40010000
 8003c48:	40010800 	.word	0x40010800
 8003c4c:	40010c00 	.word	0x40010c00
 8003c50:	40011000 	.word	0x40011000
 8003c54:	40011400 	.word	0x40011400
 8003c58:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	69bb      	ldr	r3, [r7, #24]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	4909      	ldr	r1, [pc, #36]	; (8003c8c <HAL_GPIO_Init+0x304>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f47f ae8e 	bne.w	800399c <HAL_GPIO_Init+0x14>
  }
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	372c      	adds	r7, #44	; 0x2c
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr
 8003c8c:	40010400 	.word	0x40010400

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003cac:	e003      	b.n	8003cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	041a      	lsls	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	611a      	str	r2, [r3, #16]
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e272      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0301 	and.w	r3, r3, #1
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f000 8087 	beq.w	8003dee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ce0:	4b92      	ldr	r3, [pc, #584]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d00c      	beq.n	8003d06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cec:	4b8f      	ldr	r3, [pc, #572]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d112      	bne.n	8003d1e <HAL_RCC_OscConfig+0x5e>
 8003cf8:	4b8c      	ldr	r3, [pc, #560]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d04:	d10b      	bne.n	8003d1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d06:	4b89      	ldr	r3, [pc, #548]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d06c      	beq.n	8003dec <HAL_RCC_OscConfig+0x12c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d168      	bne.n	8003dec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e24c      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d26:	d106      	bne.n	8003d36 <HAL_RCC_OscConfig+0x76>
 8003d28:	4b80      	ldr	r3, [pc, #512]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a7f      	ldr	r2, [pc, #508]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	e02e      	b.n	8003d94 <HAL_RCC_OscConfig+0xd4>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCC_OscConfig+0x98>
 8003d3e:	4b7b      	ldr	r3, [pc, #492]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a7a      	ldr	r2, [pc, #488]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d48:	6013      	str	r3, [r2, #0]
 8003d4a:	4b78      	ldr	r3, [pc, #480]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a77      	ldr	r2, [pc, #476]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	e01d      	b.n	8003d94 <HAL_RCC_OscConfig+0xd4>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0xbc>
 8003d62:	4b72      	ldr	r3, [pc, #456]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a71      	ldr	r2, [pc, #452]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a6e      	ldr	r2, [pc, #440]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0xd4>
 8003d7c:	4b6b      	ldr	r3, [pc, #428]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a6a      	ldr	r2, [pc, #424]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b68      	ldr	r3, [pc, #416]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a67      	ldr	r2, [pc, #412]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d013      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fd00 	bl	80027a0 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fe fcfc 	bl	80027a0 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e200      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003db6:	4b5d      	ldr	r3, [pc, #372]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0xe4>
 8003dc2:	e014      	b.n	8003dee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fcec 	bl	80027a0 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fce8 	bl	80027a0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e1ec      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dde:	4b53      	ldr	r3, [pc, #332]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x10c>
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d063      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dfa:	4b4c      	ldr	r3, [pc, #304]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f003 030c 	and.w	r3, r3, #12
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d00b      	beq.n	8003e1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e06:	4b49      	ldr	r3, [pc, #292]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b08      	cmp	r3, #8
 8003e10:	d11c      	bne.n	8003e4c <HAL_RCC_OscConfig+0x18c>
 8003e12:	4b46      	ldr	r3, [pc, #280]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d116      	bne.n	8003e4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1e:	4b43      	ldr	r3, [pc, #268]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d005      	beq.n	8003e36 <HAL_RCC_OscConfig+0x176>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d001      	beq.n	8003e36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e1c0      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e36:	4b3d      	ldr	r3, [pc, #244]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4939      	ldr	r1, [pc, #228]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e4a:	e03a      	b.n	8003ec2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d020      	beq.n	8003e96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e54:	4b36      	ldr	r3, [pc, #216]	; (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5a:	f7fe fca1 	bl	80027a0 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e62:	f7fe fc9d 	bl	80027a0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e1a1      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e74:	4b2d      	ldr	r3, [pc, #180]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0302 	and.w	r3, r3, #2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e80:	4b2a      	ldr	r3, [pc, #168]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	4927      	ldr	r1, [pc, #156]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	600b      	str	r3, [r1, #0]
 8003e94:	e015      	b.n	8003ec2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e96:	4b26      	ldr	r3, [pc, #152]	; (8003f30 <HAL_RCC_OscConfig+0x270>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fe fc80 	bl	80027a0 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ea4:	f7fe fc7c 	bl	80027a0 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e180      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eb6:	4b1d      	ldr	r3, [pc, #116]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1f0      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d03a      	beq.n	8003f44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d019      	beq.n	8003f0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ed6:	4b17      	ldr	r3, [pc, #92]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	2201      	movs	r2, #1
 8003eda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003edc:	f7fe fc60 	bl	80027a0 <HAL_GetTick>
 8003ee0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee2:	e008      	b.n	8003ef6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee4:	f7fe fc5c 	bl	80027a0 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e160      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	; (8003f2c <HAL_RCC_OscConfig+0x26c>)
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f0      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f02:	2001      	movs	r0, #1
 8003f04:	f000 face 	bl	80044a4 <RCC_Delay>
 8003f08:	e01c      	b.n	8003f44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f10:	f7fe fc46 	bl	80027a0 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f16:	e00f      	b.n	8003f38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f18:	f7fe fc42 	bl	80027a0 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d908      	bls.n	8003f38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e146      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
 8003f2a:	bf00      	nop
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	42420000 	.word	0x42420000
 8003f34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f38:	4b92      	ldr	r3, [pc, #584]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1e9      	bne.n	8003f18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80a6 	beq.w	800409e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f56:	4b8b      	ldr	r3, [pc, #556]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10d      	bne.n	8003f7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f62:	4b88      	ldr	r3, [pc, #544]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	4a87      	ldr	r2, [pc, #540]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	61d3      	str	r3, [r2, #28]
 8003f6e:	4b85      	ldr	r3, [pc, #532]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	60bb      	str	r3, [r7, #8]
 8003f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f7e:	4b82      	ldr	r3, [pc, #520]	; (8004188 <HAL_RCC_OscConfig+0x4c8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d118      	bne.n	8003fbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f8a:	4b7f      	ldr	r3, [pc, #508]	; (8004188 <HAL_RCC_OscConfig+0x4c8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a7e      	ldr	r2, [pc, #504]	; (8004188 <HAL_RCC_OscConfig+0x4c8>)
 8003f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f96:	f7fe fc03 	bl	80027a0 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f9e:	f7fe fbff 	bl	80027a0 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b64      	cmp	r3, #100	; 0x64
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e103      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb0:	4b75      	ldr	r3, [pc, #468]	; (8004188 <HAL_RCC_OscConfig+0x4c8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d106      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x312>
 8003fc4:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003fc6:	6a1b      	ldr	r3, [r3, #32]
 8003fc8:	4a6e      	ldr	r2, [pc, #440]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	6213      	str	r3, [r2, #32]
 8003fd0:	e02d      	b.n	800402e <HAL_RCC_OscConfig+0x36e>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10c      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x334>
 8003fda:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4a69      	ldr	r2, [pc, #420]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	f023 0301 	bic.w	r3, r3, #1
 8003fe4:	6213      	str	r3, [r2, #32]
 8003fe6:	4b67      	ldr	r3, [pc, #412]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4a66      	ldr	r2, [pc, #408]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	6213      	str	r3, [r2, #32]
 8003ff2:	e01c      	b.n	800402e <HAL_RCC_OscConfig+0x36e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b05      	cmp	r3, #5
 8003ffa:	d10c      	bne.n	8004016 <HAL_RCC_OscConfig+0x356>
 8003ffc:	4b61      	ldr	r3, [pc, #388]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	4a60      	ldr	r2, [pc, #384]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8004002:	f043 0304 	orr.w	r3, r3, #4
 8004006:	6213      	str	r3, [r2, #32]
 8004008:	4b5e      	ldr	r3, [pc, #376]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4a5d      	ldr	r2, [pc, #372]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	6213      	str	r3, [r2, #32]
 8004014:	e00b      	b.n	800402e <HAL_RCC_OscConfig+0x36e>
 8004016:	4b5b      	ldr	r3, [pc, #364]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4a5a      	ldr	r2, [pc, #360]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 800401c:	f023 0301 	bic.w	r3, r3, #1
 8004020:	6213      	str	r3, [r2, #32]
 8004022:	4b58      	ldr	r3, [pc, #352]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	4a57      	ldr	r2, [pc, #348]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8004028:	f023 0304 	bic.w	r3, r3, #4
 800402c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d015      	beq.n	8004062 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004036:	f7fe fbb3 	bl	80027a0 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403c:	e00a      	b.n	8004054 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403e:	f7fe fbaf 	bl	80027a0 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	; 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e0b1      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004054:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d0ee      	beq.n	800403e <HAL_RCC_OscConfig+0x37e>
 8004060:	e014      	b.n	800408c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004062:	f7fe fb9d 	bl	80027a0 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004068:	e00a      	b.n	8004080 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800406a:	f7fe fb99 	bl	80027a0 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	f241 3288 	movw	r2, #5000	; 0x1388
 8004078:	4293      	cmp	r3, r2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e09b      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004080:	4b40      	ldr	r3, [pc, #256]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1ee      	bne.n	800406a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800408c:	7dfb      	ldrb	r3, [r7, #23]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d105      	bne.n	800409e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004092:	4b3c      	ldr	r3, [pc, #240]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	4a3b      	ldr	r2, [pc, #236]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8004098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800409c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 8087 	beq.w	80041b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040a8:	4b36      	ldr	r3, [pc, #216]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d061      	beq.n	8004178 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d146      	bne.n	800414a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040bc:	4b33      	ldr	r3, [pc, #204]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 80040be:	2200      	movs	r2, #0
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7fe fb6d 	bl	80027a0 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ca:	f7fe fb69 	bl	80027a0 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e06d      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040dc:	4b29      	ldr	r3, [pc, #164]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d108      	bne.n	8004104 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040f2:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	4921      	ldr	r1, [pc, #132]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004104:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a19      	ldr	r1, [r3, #32]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	430b      	orrs	r3, r1
 8004116:	491b      	ldr	r1, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004122:	f7fe fb3d 	bl	80027a0 <HAL_GetTick>
 8004126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004128:	e008      	b.n	800413c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800412a:	f7fe fb39 	bl	80027a0 <HAL_GetTick>
 800412e:	4602      	mov	r2, r0
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	2b02      	cmp	r3, #2
 8004136:	d901      	bls.n	800413c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e03d      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d0f0      	beq.n	800412a <HAL_RCC_OscConfig+0x46a>
 8004148:	e035      	b.n	80041b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414a:	4b10      	ldr	r3, [pc, #64]	; (800418c <HAL_RCC_OscConfig+0x4cc>)
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe fb26 	bl	80027a0 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004158:	f7fe fb22 	bl	80027a0 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e026      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCC_OscConfig+0x4c4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1f0      	bne.n	8004158 <HAL_RCC_OscConfig+0x498>
 8004176:	e01e      	b.n	80041b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d107      	bne.n	8004190 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e019      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
 8004184:	40021000 	.word	0x40021000
 8004188:	40007000 	.word	0x40007000
 800418c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_OscConfig+0x500>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000

080041c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0d0      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b6a      	ldr	r3, [pc, #424]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d910      	bls.n	8004208 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b67      	ldr	r3, [pc, #412]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f023 0207 	bic.w	r2, r3, #7
 80041ee:	4965      	ldr	r1, [pc, #404]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0b8      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004220:	4b59      	ldr	r3, [pc, #356]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4a58      	ldr	r2, [pc, #352]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004226:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800422a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	4a52      	ldr	r2, [pc, #328]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004242:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004244:	4b50      	ldr	r3, [pc, #320]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	494d      	ldr	r1, [pc, #308]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004252:	4313      	orrs	r3, r2
 8004254:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d040      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d115      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e07f      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	4b41      	ldr	r3, [pc, #260]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e073      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004292:	4b3d      	ldr	r3, [pc, #244]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e06b      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b39      	ldr	r3, [pc, #228]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4936      	ldr	r1, [pc, #216]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fe fa74 	bl	80027a0 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fe fa70 	bl	80027a0 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e053      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b27      	ldr	r3, [pc, #156]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d210      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b24      	ldr	r3, [pc, #144]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 0207 	bic.w	r2, r3, #7
 80042fa:	4922      	ldr	r1, [pc, #136]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	4313      	orrs	r3, r2
 8004300:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e032      	b.n	800437a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4916      	ldr	r1, [pc, #88]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	490e      	ldr	r1, [pc, #56]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004352:	f000 f821 	bl	8004398 <HAL_RCC_GetSysClockFreq>
 8004356:	4602      	mov	r2, r0
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	490a      	ldr	r1, [pc, #40]	; (800438c <HAL_RCC_ClockConfig+0x1c8>)
 8004364:	5ccb      	ldrb	r3, [r1, r3]
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	4a09      	ldr	r2, [pc, #36]	; (8004390 <HAL_RCC_ClockConfig+0x1cc>)
 800436c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_RCC_ClockConfig+0x1d0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe f9d2 	bl	800271c <HAL_InitTick>

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40022000 	.word	0x40022000
 8004388:	40021000 	.word	0x40021000
 800438c:	0800a62c 	.word	0x0800a62c
 8004390:	20000004 	.word	0x20000004
 8004394:	20000008 	.word	0x20000008

08004398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	2300      	movs	r3, #0
 80043ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043b2:	4b1e      	ldr	r3, [pc, #120]	; (800442c <HAL_RCC_GetSysClockFreq+0x94>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d002      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0x30>
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d003      	beq.n	80043ce <HAL_RCC_GetSysClockFreq+0x36>
 80043c6:	e027      	b.n	8004418 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043c8:	4b19      	ldr	r3, [pc, #100]	; (8004430 <HAL_RCC_GetSysClockFreq+0x98>)
 80043ca:	613b      	str	r3, [r7, #16]
      break;
 80043cc:	e027      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	0c9b      	lsrs	r3, r3, #18
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	4a17      	ldr	r2, [pc, #92]	; (8004434 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043d8:	5cd3      	ldrb	r3, [r2, r3]
 80043da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d010      	beq.n	8004408 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80043e6:	4b11      	ldr	r3, [pc, #68]	; (800442c <HAL_RCC_GetSysClockFreq+0x94>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	0c5b      	lsrs	r3, r3, #17
 80043ec:	f003 0301 	and.w	r3, r3, #1
 80043f0:	4a11      	ldr	r2, [pc, #68]	; (8004438 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043f2:	5cd3      	ldrb	r3, [r2, r3]
 80043f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a0d      	ldr	r2, [pc, #52]	; (8004430 <HAL_RCC_GetSysClockFreq+0x98>)
 80043fa:	fb03 f202 	mul.w	r2, r3, r2
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	fbb2 f3f3 	udiv	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	e004      	b.n	8004412 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a0c      	ldr	r2, [pc, #48]	; (800443c <HAL_RCC_GetSysClockFreq+0xa4>)
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	613b      	str	r3, [r7, #16]
      break;
 8004416:	e002      	b.n	800441e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <HAL_RCC_GetSysClockFreq+0x98>)
 800441a:	613b      	str	r3, [r7, #16]
      break;
 800441c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800441e:	693b      	ldr	r3, [r7, #16]
}
 8004420:	4618      	mov	r0, r3
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	40021000 	.word	0x40021000
 8004430:	007a1200 	.word	0x007a1200
 8004434:	0800a644 	.word	0x0800a644
 8004438:	0800a654 	.word	0x0800a654
 800443c:	003d0900 	.word	0x003d0900

08004440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004444:	4b02      	ldr	r3, [pc, #8]	; (8004450 <HAL_RCC_GetHCLKFreq+0x10>)
 8004446:	681b      	ldr	r3, [r3, #0]
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr
 8004450:	20000004 	.word	0x20000004

08004454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004458:	f7ff fff2 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 800445c:	4602      	mov	r2, r0
 800445e:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	0a1b      	lsrs	r3, r3, #8
 8004464:	f003 0307 	and.w	r3, r3, #7
 8004468:	4903      	ldr	r1, [pc, #12]	; (8004478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800446a:	5ccb      	ldrb	r3, [r1, r3]
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40021000 	.word	0x40021000
 8004478:	0800a63c 	.word	0x0800a63c

0800447c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004480:	f7ff ffde 	bl	8004440 <HAL_RCC_GetHCLKFreq>
 8004484:	4602      	mov	r2, r0
 8004486:	4b05      	ldr	r3, [pc, #20]	; (800449c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	0adb      	lsrs	r3, r3, #11
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	4903      	ldr	r1, [pc, #12]	; (80044a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004492:	5ccb      	ldrb	r3, [r1, r3]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004498:	4618      	mov	r0, r3
 800449a:	bd80      	pop	{r7, pc}
 800449c:	40021000 	.word	0x40021000
 80044a0:	0800a63c 	.word	0x0800a63c

080044a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044ac:	4b0a      	ldr	r3, [pc, #40]	; (80044d8 <RCC_Delay+0x34>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <RCC_Delay+0x38>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	0a5b      	lsrs	r3, r3, #9
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	fb02 f303 	mul.w	r3, r2, r3
 80044be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044c0:	bf00      	nop
  }
  while (Delay --);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	1e5a      	subs	r2, r3, #1
 80044c6:	60fa      	str	r2, [r7, #12]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1f9      	bne.n	80044c0 <RCC_Delay+0x1c>
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	3714      	adds	r7, #20
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr
 80044d8:	20000004 	.word	0x20000004
 80044dc:	10624dd3 	.word	0x10624dd3

080044e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	2300      	movs	r3, #0
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0301 	and.w	r3, r3, #1
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d07d      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044fc:	2300      	movs	r3, #0
 80044fe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004500:	4b4f      	ldr	r3, [pc, #316]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10d      	bne.n	8004528 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800450c:	4b4c      	ldr	r3, [pc, #304]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4a4b      	ldr	r2, [pc, #300]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004516:	61d3      	str	r3, [r2, #28]
 8004518:	4b49      	ldr	r3, [pc, #292]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800451a:	69db      	ldr	r3, [r3, #28]
 800451c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004520:	60bb      	str	r3, [r7, #8]
 8004522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004524:	2301      	movs	r3, #1
 8004526:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	4b46      	ldr	r3, [pc, #280]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d118      	bne.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a42      	ldr	r2, [pc, #264]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800453a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004540:	f7fe f92e 	bl	80027a0 <HAL_GetTick>
 8004544:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004546:	e008      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004548:	f7fe f92a 	bl	80027a0 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b64      	cmp	r3, #100	; 0x64
 8004554:	d901      	bls.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e06d      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800455a:	4b3a      	ldr	r3, [pc, #232]	; (8004644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004562:	2b00      	cmp	r3, #0
 8004564:	d0f0      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004566:	4b36      	ldr	r3, [pc, #216]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02e      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	429a      	cmp	r2, r3
 8004582:	d027      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004584:	4b2e      	ldr	r3, [pc, #184]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800458e:	4b2e      	ldr	r3, [pc, #184]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004590:	2201      	movs	r2, #1
 8004592:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004594:	4b2c      	ldr	r3, [pc, #176]	; (8004648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800459a:	4a29      	ldr	r2, [pc, #164]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d014      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045aa:	f7fe f8f9 	bl	80027a0 <HAL_GetTick>
 80045ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b0:	e00a      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045b2:	f7fe f8f5 	bl	80027a0 <HAL_GetTick>
 80045b6:	4602      	mov	r2, r0
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d901      	bls.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e036      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c8:	4b1d      	ldr	r3, [pc, #116]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ca:	6a1b      	ldr	r3, [r3, #32]
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0ee      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045d4:	4b1a      	ldr	r3, [pc, #104]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4917      	ldr	r1, [pc, #92]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e6:	7dfb      	ldrb	r3, [r7, #23]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d105      	bne.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ec:	4b14      	ldr	r3, [pc, #80]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	69db      	ldr	r3, [r3, #28]
 80045f0:	4a13      	ldr	r2, [pc, #76]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0302 	and.w	r3, r3, #2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004604:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	490b      	ldr	r1, [pc, #44]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	4313      	orrs	r3, r2
 8004614:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0310 	and.w	r3, r3, #16
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004622:	4b07      	ldr	r3, [pc, #28]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4904      	ldr	r1, [pc, #16]	; (8004640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004630:	4313      	orrs	r3, r2
 8004632:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40021000 	.word	0x40021000
 8004644:	40007000 	.word	0x40007000
 8004648:	42420440 	.word	0x42420440

0800464c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
 8004658:	2300      	movs	r3, #0
 800465a:	61fb      	str	r3, [r7, #28]
 800465c:	2300      	movs	r3, #0
 800465e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	2300      	movs	r3, #0
 8004666:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2b10      	cmp	r3, #16
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b10      	cmp	r3, #16
 8004672:	f200 808a 	bhi.w	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d045      	beq.n	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d075      	beq.n	800476e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004682:	e082      	b.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004684:	4b46      	ldr	r3, [pc, #280]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800468a:	4b45      	ldr	r3, [pc, #276]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d07b      	beq.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	0c9b      	lsrs	r3, r3, #18
 800469a:	f003 030f 	and.w	r3, r3, #15
 800469e:	4a41      	ldr	r2, [pc, #260]	; (80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80046a0:	5cd3      	ldrb	r3, [r2, r3]
 80046a2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d015      	beq.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80046ae:	4b3c      	ldr	r3, [pc, #240]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	0c5b      	lsrs	r3, r3, #17
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	4a3b      	ldr	r2, [pc, #236]	; (80047a8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80046ba:	5cd3      	ldrb	r3, [r2, r3]
 80046bc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00d      	beq.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80046c8:	4a38      	ldr	r2, [pc, #224]	; (80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	61fb      	str	r3, [r7, #28]
 80046d8:	e004      	b.n	80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	4a34      	ldr	r2, [pc, #208]	; (80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80046e4:	4b2e      	ldr	r3, [pc, #184]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f0:	d102      	bne.n	80046f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	61bb      	str	r3, [r7, #24]
      break;
 80046f6:	e04a      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	005b      	lsls	r3, r3, #1
 80046fc:	4a2d      	ldr	r2, [pc, #180]	; (80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	085b      	lsrs	r3, r3, #1
 8004704:	61bb      	str	r3, [r7, #24]
      break;
 8004706:	e042      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004708:	4b25      	ldr	r3, [pc, #148]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004714:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004718:	d108      	bne.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004724:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004728:	61bb      	str	r3, [r7, #24]
 800472a:	e01f      	b.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004736:	d109      	bne.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004738:	4b19      	ldr	r3, [pc, #100]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004744:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e00f      	b.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004756:	d11c      	bne.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004758:	4b11      	ldr	r3, [pc, #68]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d016      	beq.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004764:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004768:	61bb      	str	r3, [r7, #24]
      break;
 800476a:	e012      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800476c:	e011      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800476e:	f7ff fe85 	bl	800447c <HAL_RCC_GetPCLK2Freq>
 8004772:	4602      	mov	r2, r0
 8004774:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	0b9b      	lsrs	r3, r3, #14
 800477a:	f003 0303 	and.w	r3, r3, #3
 800477e:	3301      	adds	r3, #1
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	fbb2 f3f3 	udiv	r3, r2, r3
 8004786:	61bb      	str	r3, [r7, #24]
      break;
 8004788:	e004      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800478a:	bf00      	nop
 800478c:	e002      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800478e:	bf00      	nop
 8004790:	e000      	b.n	8004794 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004792:	bf00      	nop
    }
  }
  return (frequency);
 8004794:	69bb      	ldr	r3, [r7, #24]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3720      	adds	r7, #32
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}
 800479e:	bf00      	nop
 80047a0:	40021000 	.word	0x40021000
 80047a4:	0800a658 	.word	0x0800a658
 80047a8:	0800a668 	.word	0x0800a668
 80047ac:	007a1200 	.word	0x007a1200
 80047b0:	003d0900 	.word	0x003d0900
 80047b4:	aaaaaaab 	.word	0xaaaaaaab

080047b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047c6:	2301      	movs	r3, #1
 80047c8:	e076      	b.n	80048b8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d108      	bne.n	80047e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047da:	d009      	beq.n	80047f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	61da      	str	r2, [r3, #28]
 80047e2:	e005      	b.n	80047f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fd fd24 	bl	8002258 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004826:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	431a      	orrs	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	ea42 0103 	orr.w	r1, r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	430a      	orrs	r2, r1
 8004886:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	0c1a      	lsrs	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f002 0204 	and.w	r2, r2, #4
 8004896:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048a6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	603b      	str	r3, [r7, #0]
 80048cc:	4613      	mov	r3, r2
 80048ce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048d0:	2300      	movs	r3, #0
 80048d2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_SPI_Transmit+0x22>
 80048de:	2302      	movs	r3, #2
 80048e0:	e12d      	b.n	8004b3e <HAL_SPI_Transmit+0x27e>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048ea:	f7fd ff59 	bl	80027a0 <HAL_GetTick>
 80048ee:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80048f0:	88fb      	ldrh	r3, [r7, #6]
 80048f2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d002      	beq.n	8004906 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004900:	2302      	movs	r3, #2
 8004902:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004904:	e116      	b.n	8004b34 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_SPI_Transmit+0x52>
 800490c:	88fb      	ldrh	r3, [r7, #6]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d102      	bne.n	8004918 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004916:	e10d      	b.n	8004b34 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2203      	movs	r2, #3
 800491c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	88fa      	ldrh	r2, [r7, #6]
 8004930:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	88fa      	ldrh	r2, [r7, #6]
 8004936:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2200      	movs	r2, #0
 800493c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	2200      	movs	r2, #0
 8004948:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800495e:	d10f      	bne.n	8004980 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800496e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800497e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498a:	2b40      	cmp	r3, #64	; 0x40
 800498c:	d007      	beq.n	800499e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800499c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a6:	d14f      	bne.n	8004a48 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d002      	beq.n	80049b6 <HAL_SPI_Transmit+0xf6>
 80049b0:	8afb      	ldrh	r3, [r7, #22]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d142      	bne.n	8004a3c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	881a      	ldrh	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	1c9a      	adds	r2, r3, #2
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80049da:	e02f      	b.n	8004a3c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d112      	bne.n	8004a10 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ee:	881a      	ldrh	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049fa:	1c9a      	adds	r2, r3, #2
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a0e:	e015      	b.n	8004a3c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a10:	f7fd fec6 	bl	80027a0 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d803      	bhi.n	8004a28 <HAL_SPI_Transmit+0x168>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	d102      	bne.n	8004a2e <HAL_SPI_Transmit+0x16e>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d106      	bne.n	8004a3c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004a3a:	e07b      	b.n	8004b34 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1ca      	bne.n	80049dc <HAL_SPI_Transmit+0x11c>
 8004a46:	e050      	b.n	8004aea <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_SPI_Transmit+0x196>
 8004a50:	8afb      	ldrh	r3, [r7, #22]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d144      	bne.n	8004ae0 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	330c      	adds	r3, #12
 8004a60:	7812      	ldrb	r2, [r2, #0]
 8004a62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004a7c:	e030      	b.n	8004ae0 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d113      	bne.n	8004ab4 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	7812      	ldrb	r2, [r2, #0]
 8004a98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9e:	1c5a      	adds	r2, r3, #1
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa8:	b29b      	uxth	r3, r3
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ab2:	e015      	b.n	8004ae0 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ab4:	f7fd fe74 	bl	80027a0 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d803      	bhi.n	8004acc <HAL_SPI_Transmit+0x20c>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d102      	bne.n	8004ad2 <HAL_SPI_Transmit+0x212>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d106      	bne.n	8004ae0 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ade:	e029      	b.n	8004b34 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1c9      	bne.n	8004a7e <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	6839      	ldr	r1, [r7, #0]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f9f8 	bl	8004ee4 <SPI_EndRxTxTransaction>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	613b      	str	r3, [r7, #16]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	613b      	str	r3, [r7, #16]
 8004b1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d002      	beq.n	8004b2c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	77fb      	strb	r3, [r7, #31]
 8004b2a:	e003      	b.n	8004b34 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d101      	bne.n	8004b68 <HAL_SPI_Transmit_DMA+0x20>
 8004b64:	2302      	movs	r3, #2
 8004b66:	e097      	b.n	8004c98 <HAL_SPI_Transmit_DMA+0x150>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d002      	beq.n	8004b82 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b80:	e085      	b.n	8004c8e <HAL_SPI_Transmit_DMA+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <HAL_SPI_Transmit_DMA+0x46>
 8004b88:	88fb      	ldrh	r3, [r7, #6]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d102      	bne.n	8004b94 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b92:	e07c      	b.n	8004c8e <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2203      	movs	r2, #3
 8004b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68ba      	ldr	r2, [r7, #8]
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bda:	d10f      	bne.n	8004bfc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bfa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <HAL_SPI_Transmit_DMA+0x158>)
 8004c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c08:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <HAL_SPI_Transmit_DMA+0x15c>)
 8004c0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c10:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <HAL_SPI_Transmit_DMA+0x160>)
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c18:	2200      	movs	r2, #0
 8004c1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c24:	4619      	mov	r1, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c32:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004c34:	f7fe fcd8 	bl	80035e8 <HAL_DMA_Start_IT>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d008      	beq.n	8004c50 <HAL_SPI_Transmit_DMA+0x108>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c42:	f043 0210 	orr.w	r2, r3, #16
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	75fb      	strb	r3, [r7, #23]

    goto error;
 8004c4e:	e01e      	b.n	8004c8e <HAL_SPI_Transmit_DMA+0x146>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b40      	cmp	r3, #64	; 0x40
 8004c5c:	d007      	beq.n	8004c6e <HAL_SPI_Transmit_DMA+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c6c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685a      	ldr	r2, [r3, #4]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0220 	orr.w	r2, r2, #32
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 0202 	orr.w	r2, r2, #2
 8004c8c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	08004d77 	.word	0x08004d77
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	08004d93 	.word	0x08004d93

08004cac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cde:	f7fd fd5f 	bl	80027a0 <HAL_GetTick>
 8004ce2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d03b      	beq.n	8004d6a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685a      	ldr	r2, [r3, #4]
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f022 0220 	bic.w	r2, r2, #32
 8004d00:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0202 	bic.w	r2, r2, #2
 8004d10:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	2164      	movs	r1, #100	; 0x64
 8004d16:	6978      	ldr	r0, [r7, #20]
 8004d18:	f000 f8e4 	bl	8004ee4 <SPI_EndRxTxTransaction>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004d62:	6978      	ldr	r0, [r7, #20]
 8004d64:	f7ff ffab 	bl	8004cbe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004d68:	e002      	b.n	8004d70 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004d6a:	6978      	ldr	r0, [r7, #20]
 8004d6c:	f7fc fea6 	bl	8001abc <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7ff ff91 	bl	8004cac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004d8a:	bf00      	nop
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b084      	sub	sp, #16
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f022 0203 	bic.w	r2, r2, #3
 8004dae:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db4:	f043 0210 	orr.w	r2, r3, #16
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f7ff ff7a 	bl	8004cbe <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004dca:	bf00      	nop
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
	...

08004dd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b088      	sub	sp, #32
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	603b      	str	r3, [r7, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004de4:	f7fd fcdc 	bl	80027a0 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	4413      	add	r3, r2
 8004df2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004df4:	f7fd fcd4 	bl	80027a0 <HAL_GetTick>
 8004df8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dfa:	4b39      	ldr	r3, [pc, #228]	; (8004ee0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	015b      	lsls	r3, r3, #5
 8004e00:	0d1b      	lsrs	r3, r3, #20
 8004e02:	69fa      	ldr	r2, [r7, #28]
 8004e04:	fb02 f303 	mul.w	r3, r2, r3
 8004e08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e0a:	e054      	b.n	8004eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e12:	d050      	beq.n	8004eb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e14:	f7fd fcc4 	bl	80027a0 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d902      	bls.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d13d      	bne.n	8004ea6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e42:	d111      	bne.n	8004e68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4c:	d004      	beq.n	8004e58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e56:	d107      	bne.n	8004e68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e70:	d10f      	bne.n	8004e92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e017      	b.n	8004ed6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	bf0c      	ite	eq
 8004ec6:	2301      	moveq	r3, #1
 8004ec8:	2300      	movne	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	461a      	mov	r2, r3
 8004ece:	79fb      	ldrb	r3, [r7, #7]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d19b      	bne.n	8004e0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3720      	adds	r7, #32
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000004 	.word	0x20000004

08004ee4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	60f8      	str	r0, [r7, #12]
 8004eec:	60b9      	str	r1, [r7, #8]
 8004eee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff ff6a 	bl	8004dd4 <SPI_WaitFlagStateUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e000      	b.n	8004f18 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e041      	b.n	8004fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7fd fa38 	bl	80023bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	f000 f8f4 	bl	800514c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_TIM_ConfigClockSource+0x1c>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e0b4      	b.n	8005144 <HAL_TIM_ConfigClockSource+0x186>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ff8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005000:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005012:	d03e      	beq.n	8005092 <HAL_TIM_ConfigClockSource+0xd4>
 8005014:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005018:	f200 8087 	bhi.w	800512a <HAL_TIM_ConfigClockSource+0x16c>
 800501c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005020:	f000 8086 	beq.w	8005130 <HAL_TIM_ConfigClockSource+0x172>
 8005024:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005028:	d87f      	bhi.n	800512a <HAL_TIM_ConfigClockSource+0x16c>
 800502a:	2b70      	cmp	r3, #112	; 0x70
 800502c:	d01a      	beq.n	8005064 <HAL_TIM_ConfigClockSource+0xa6>
 800502e:	2b70      	cmp	r3, #112	; 0x70
 8005030:	d87b      	bhi.n	800512a <HAL_TIM_ConfigClockSource+0x16c>
 8005032:	2b60      	cmp	r3, #96	; 0x60
 8005034:	d050      	beq.n	80050d8 <HAL_TIM_ConfigClockSource+0x11a>
 8005036:	2b60      	cmp	r3, #96	; 0x60
 8005038:	d877      	bhi.n	800512a <HAL_TIM_ConfigClockSource+0x16c>
 800503a:	2b50      	cmp	r3, #80	; 0x50
 800503c:	d03c      	beq.n	80050b8 <HAL_TIM_ConfigClockSource+0xfa>
 800503e:	2b50      	cmp	r3, #80	; 0x50
 8005040:	d873      	bhi.n	800512a <HAL_TIM_ConfigClockSource+0x16c>
 8005042:	2b40      	cmp	r3, #64	; 0x40
 8005044:	d058      	beq.n	80050f8 <HAL_TIM_ConfigClockSource+0x13a>
 8005046:	2b40      	cmp	r3, #64	; 0x40
 8005048:	d86f      	bhi.n	800512a <HAL_TIM_ConfigClockSource+0x16c>
 800504a:	2b30      	cmp	r3, #48	; 0x30
 800504c:	d064      	beq.n	8005118 <HAL_TIM_ConfigClockSource+0x15a>
 800504e:	2b30      	cmp	r3, #48	; 0x30
 8005050:	d86b      	bhi.n	800512a <HAL_TIM_ConfigClockSource+0x16c>
 8005052:	2b20      	cmp	r3, #32
 8005054:	d060      	beq.n	8005118 <HAL_TIM_ConfigClockSource+0x15a>
 8005056:	2b20      	cmp	r3, #32
 8005058:	d867      	bhi.n	800512a <HAL_TIM_ConfigClockSource+0x16c>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d05c      	beq.n	8005118 <HAL_TIM_ConfigClockSource+0x15a>
 800505e:	2b10      	cmp	r3, #16
 8005060:	d05a      	beq.n	8005118 <HAL_TIM_ConfigClockSource+0x15a>
 8005062:	e062      	b.n	800512a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005074:	f000 f943 	bl	80052fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005086:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	609a      	str	r2, [r3, #8]
      break;
 8005090:	e04f      	b.n	8005132 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050a2:	f000 f92c 	bl	80052fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050b4:	609a      	str	r2, [r3, #8]
      break;
 80050b6:	e03c      	b.n	8005132 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c4:	461a      	mov	r2, r3
 80050c6:	f000 f8a3 	bl	8005210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2150      	movs	r1, #80	; 0x50
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 f8fa 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 80050d6:	e02c      	b.n	8005132 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050e4:	461a      	mov	r2, r3
 80050e6:	f000 f8c1 	bl	800526c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2160      	movs	r1, #96	; 0x60
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 f8ea 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 80050f6:	e01c      	b.n	8005132 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005104:	461a      	mov	r2, r3
 8005106:	f000 f883 	bl	8005210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2140      	movs	r1, #64	; 0x40
 8005110:	4618      	mov	r0, r3
 8005112:	f000 f8da 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8005116:	e00c      	b.n	8005132 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4619      	mov	r1, r3
 8005122:	4610      	mov	r0, r2
 8005124:	f000 f8d1 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 8005128:	e003      	b.n	8005132 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	73fb      	strb	r3, [r7, #15]
      break;
 800512e:	e000      	b.n	8005132 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005130:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005142:	7bfb      	ldrb	r3, [r7, #15]
}
 8005144:	4618      	mov	r0, r3
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a29      	ldr	r2, [pc, #164]	; (8005204 <TIM_Base_SetConfig+0xb8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516a:	d007      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a26      	ldr	r2, [pc, #152]	; (8005208 <TIM_Base_SetConfig+0xbc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a25      	ldr	r2, [pc, #148]	; (800520c <TIM_Base_SetConfig+0xc0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d108      	bne.n	800518e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <TIM_Base_SetConfig+0xb8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519c:	d007      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <TIM_Base_SetConfig+0xbc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <TIM_Base_SetConfig+0xc0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d108      	bne.n	80051c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a07      	ldr	r2, [pc, #28]	; (8005204 <TIM_Base_SetConfig+0xb8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800

08005210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0201 	bic.w	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 030a 	bic.w	r3, r3, #10
 800524c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr

0800526c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f023 0210 	bic.w	r2, r3, #16
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	031b      	lsls	r3, r3, #12
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr

080052ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f043 0307 	orr.w	r3, r3, #7
 80052ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	609a      	str	r2, [r3, #8]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr

080052fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052fe:	b480      	push	{r7}
 8005300:	b087      	sub	sp, #28
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005318:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	021a      	lsls	r2, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	431a      	orrs	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4313      	orrs	r3, r2
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	609a      	str	r2, [r3, #8]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005350:	2302      	movs	r3, #2
 8005352:	e046      	b.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a16      	ldr	r2, [pc, #88]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00e      	beq.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a0:	d009      	beq.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a10      	ldr	r2, [pc, #64]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d10c      	bne.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800

080053f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e042      	b.n	8005490 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d106      	bne.n	8005424 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7fc ffe8 	bl	80023f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2224      	movs	r2, #36	; 0x24
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800543a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 f82b 	bl	8005498 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005450:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	695a      	ldr	r2, [r3, #20]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005460:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005470:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80054d2:	f023 030c 	bic.w	r3, r3, #12
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6812      	ldr	r2, [r2, #0]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	430b      	orrs	r3, r1
 80054de:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a2c      	ldr	r2, [pc, #176]	; (80055ac <UART_SetConfig+0x114>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d103      	bne.n	8005508 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005500:	f7fe ffbc 	bl	800447c <HAL_RCC_GetPCLK2Freq>
 8005504:	60f8      	str	r0, [r7, #12]
 8005506:	e002      	b.n	800550e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005508:	f7fe ffa4 	bl	8004454 <HAL_RCC_GetPCLK1Freq>
 800550c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4613      	mov	r3, r2
 8005512:	009b      	lsls	r3, r3, #2
 8005514:	4413      	add	r3, r2
 8005516:	009a      	lsls	r2, r3, #2
 8005518:	441a      	add	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	fbb2 f3f3 	udiv	r3, r2, r3
 8005524:	4a22      	ldr	r2, [pc, #136]	; (80055b0 <UART_SetConfig+0x118>)
 8005526:	fba2 2303 	umull	r2, r3, r2, r3
 800552a:	095b      	lsrs	r3, r3, #5
 800552c:	0119      	lsls	r1, r3, #4
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009a      	lsls	r2, r3, #2
 8005538:	441a      	add	r2, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	fbb2 f2f3 	udiv	r2, r2, r3
 8005544:	4b1a      	ldr	r3, [pc, #104]	; (80055b0 <UART_SetConfig+0x118>)
 8005546:	fba3 0302 	umull	r0, r3, r3, r2
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	2064      	movs	r0, #100	; 0x64
 800554e:	fb00 f303 	mul.w	r3, r0, r3
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	3332      	adds	r3, #50	; 0x32
 8005558:	4a15      	ldr	r2, [pc, #84]	; (80055b0 <UART_SetConfig+0x118>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005564:	4419      	add	r1, r3
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	4613      	mov	r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	4413      	add	r3, r2
 800556e:	009a      	lsls	r2, r3, #2
 8005570:	441a      	add	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	fbb2 f2f3 	udiv	r2, r2, r3
 800557c:	4b0c      	ldr	r3, [pc, #48]	; (80055b0 <UART_SetConfig+0x118>)
 800557e:	fba3 0302 	umull	r0, r3, r3, r2
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2064      	movs	r0, #100	; 0x64
 8005586:	fb00 f303 	mul.w	r3, r0, r3
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	3332      	adds	r3, #50	; 0x32
 8005590:	4a07      	ldr	r2, [pc, #28]	; (80055b0 <UART_SetConfig+0x118>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	f003 020f 	and.w	r2, r3, #15
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	440a      	add	r2, r1
 80055a2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055a4:	bf00      	nop
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40013800 	.word	0x40013800
 80055b0:	51eb851f 	.word	0x51eb851f

080055b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80055b8:	4904      	ldr	r1, [pc, #16]	; (80055cc <MX_FATFS_Init+0x18>)
 80055ba:	4805      	ldr	r0, [pc, #20]	; (80055d0 <MX_FATFS_Init+0x1c>)
 80055bc:	f000 f8a6 	bl	800570c <FATFS_LinkDriver>
 80055c0:	4603      	mov	r3, r0
 80055c2:	461a      	mov	r2, r3
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <MX_FATFS_Init+0x20>)
 80055c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80055c8:	bf00      	nop
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000424 	.word	0x20000424
 80055d0:	20000010 	.word	0x20000010
 80055d4:	20000420 	.word	0x20000420

080055d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80055e2:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <USER_initialize+0x20>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80055e8:	4b03      	ldr	r3, [pc, #12]	; (80055f8 <USER_initialize+0x20>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bc80      	pop	{r7}
 80055f6:	4770      	bx	lr
 80055f8:	2000000d 	.word	0x2000000d

080055fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	4603      	mov	r3, r0
 8005604:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8005606:	4b05      	ldr	r3, [pc, #20]	; (800561c <USER_status+0x20>)
 8005608:	2201      	movs	r2, #1
 800560a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800560c:	4b03      	ldr	r3, [pc, #12]	; (800561c <USER_status+0x20>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr
 800561c:	2000000d 	.word	0x2000000d

08005620 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005630:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	607a      	str	r2, [r7, #4]
 8005646:	603b      	str	r3, [r7, #0]
 8005648:	4603      	mov	r3, r0
 800564a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800564c:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800564e:	4618      	mov	r0, r3
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	bc80      	pop	{r7}
 8005656:	4770      	bx	lr

08005658 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	603a      	str	r2, [r7, #0]
 8005662:	71fb      	strb	r3, [r7, #7]
 8005664:	460b      	mov	r3, r1
 8005666:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	73fb      	strb	r3, [r7, #15]
    return res;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	bc80      	pop	{r7}
 8005676:	4770      	bx	lr

08005678 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	4613      	mov	r3, r2
 8005684:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005686:	2301      	movs	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800568e:	4b1e      	ldr	r3, [pc, #120]	; (8005708 <FATFS_LinkDriverEx+0x90>)
 8005690:	7a5b      	ldrb	r3, [r3, #9]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b01      	cmp	r3, #1
 8005696:	d831      	bhi.n	80056fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005698:	4b1b      	ldr	r3, [pc, #108]	; (8005708 <FATFS_LinkDriverEx+0x90>)
 800569a:	7a5b      	ldrb	r3, [r3, #9]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	461a      	mov	r2, r3
 80056a0:	4b19      	ldr	r3, [pc, #100]	; (8005708 <FATFS_LinkDriverEx+0x90>)
 80056a2:	2100      	movs	r1, #0
 80056a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 80056a6:	4b18      	ldr	r3, [pc, #96]	; (8005708 <FATFS_LinkDriverEx+0x90>)
 80056a8:	7a5b      	ldrb	r3, [r3, #9]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	4a16      	ldr	r2, [pc, #88]	; (8005708 <FATFS_LinkDriverEx+0x90>)
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 80056b6:	4b14      	ldr	r3, [pc, #80]	; (8005708 <FATFS_LinkDriverEx+0x90>)
 80056b8:	7a5b      	ldrb	r3, [r3, #9]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	4b12      	ldr	r3, [pc, #72]	; (8005708 <FATFS_LinkDriverEx+0x90>)
 80056c0:	4413      	add	r3, r2
 80056c2:	79fa      	ldrb	r2, [r7, #7]
 80056c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80056c6:	4b10      	ldr	r3, [pc, #64]	; (8005708 <FATFS_LinkDriverEx+0x90>)
 80056c8:	7a5b      	ldrb	r3, [r3, #9]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	1c5a      	adds	r2, r3, #1
 80056ce:	b2d1      	uxtb	r1, r2
 80056d0:	4a0d      	ldr	r2, [pc, #52]	; (8005708 <FATFS_LinkDriverEx+0x90>)
 80056d2:	7251      	strb	r1, [r2, #9]
 80056d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80056d6:	7dbb      	ldrb	r3, [r7, #22]
 80056d8:	3330      	adds	r3, #48	; 0x30
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	3301      	adds	r3, #1
 80056e4:	223a      	movs	r2, #58	; 0x3a
 80056e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	3302      	adds	r3, #2
 80056ec:	222f      	movs	r2, #47	; 0x2f
 80056ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	3303      	adds	r3, #3
 80056f4:	2200      	movs	r2, #0
 80056f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr
 8005708:	20000428 	.word	0x20000428

0800570c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005716:	2200      	movs	r2, #0
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f7ff ffac 	bl	8005678 <FATFS_LinkDriverEx>
 8005720:	4603      	mov	r3, r0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <__cvt>:
 800572a:	2b00      	cmp	r3, #0
 800572c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005730:	461f      	mov	r7, r3
 8005732:	bfbb      	ittet	lt
 8005734:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005738:	461f      	movlt	r7, r3
 800573a:	2300      	movge	r3, #0
 800573c:	232d      	movlt	r3, #45	; 0x2d
 800573e:	b088      	sub	sp, #32
 8005740:	4614      	mov	r4, r2
 8005742:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005744:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005746:	7013      	strb	r3, [r2, #0]
 8005748:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800574a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800574e:	f023 0820 	bic.w	r8, r3, #32
 8005752:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005756:	d005      	beq.n	8005764 <__cvt+0x3a>
 8005758:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800575c:	d100      	bne.n	8005760 <__cvt+0x36>
 800575e:	3501      	adds	r5, #1
 8005760:	2302      	movs	r3, #2
 8005762:	e000      	b.n	8005766 <__cvt+0x3c>
 8005764:	2303      	movs	r3, #3
 8005766:	aa07      	add	r2, sp, #28
 8005768:	9204      	str	r2, [sp, #16]
 800576a:	aa06      	add	r2, sp, #24
 800576c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005770:	e9cd 3500 	strd	r3, r5, [sp]
 8005774:	4622      	mov	r2, r4
 8005776:	463b      	mov	r3, r7
 8005778:	f000 fe82 	bl	8006480 <_dtoa_r>
 800577c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005780:	4606      	mov	r6, r0
 8005782:	d102      	bne.n	800578a <__cvt+0x60>
 8005784:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005786:	07db      	lsls	r3, r3, #31
 8005788:	d522      	bpl.n	80057d0 <__cvt+0xa6>
 800578a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800578e:	eb06 0905 	add.w	r9, r6, r5
 8005792:	d110      	bne.n	80057b6 <__cvt+0x8c>
 8005794:	7833      	ldrb	r3, [r6, #0]
 8005796:	2b30      	cmp	r3, #48	; 0x30
 8005798:	d10a      	bne.n	80057b0 <__cvt+0x86>
 800579a:	2200      	movs	r2, #0
 800579c:	2300      	movs	r3, #0
 800579e:	4620      	mov	r0, r4
 80057a0:	4639      	mov	r1, r7
 80057a2:	f7fb f901 	bl	80009a8 <__aeabi_dcmpeq>
 80057a6:	b918      	cbnz	r0, 80057b0 <__cvt+0x86>
 80057a8:	f1c5 0501 	rsb	r5, r5, #1
 80057ac:	f8ca 5000 	str.w	r5, [sl]
 80057b0:	f8da 3000 	ldr.w	r3, [sl]
 80057b4:	4499      	add	r9, r3
 80057b6:	2200      	movs	r2, #0
 80057b8:	2300      	movs	r3, #0
 80057ba:	4620      	mov	r0, r4
 80057bc:	4639      	mov	r1, r7
 80057be:	f7fb f8f3 	bl	80009a8 <__aeabi_dcmpeq>
 80057c2:	b108      	cbz	r0, 80057c8 <__cvt+0x9e>
 80057c4:	f8cd 901c 	str.w	r9, [sp, #28]
 80057c8:	2230      	movs	r2, #48	; 0x30
 80057ca:	9b07      	ldr	r3, [sp, #28]
 80057cc:	454b      	cmp	r3, r9
 80057ce:	d307      	bcc.n	80057e0 <__cvt+0xb6>
 80057d0:	4630      	mov	r0, r6
 80057d2:	9b07      	ldr	r3, [sp, #28]
 80057d4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80057d6:	1b9b      	subs	r3, r3, r6
 80057d8:	6013      	str	r3, [r2, #0]
 80057da:	b008      	add	sp, #32
 80057dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057e0:	1c59      	adds	r1, r3, #1
 80057e2:	9107      	str	r1, [sp, #28]
 80057e4:	701a      	strb	r2, [r3, #0]
 80057e6:	e7f0      	b.n	80057ca <__cvt+0xa0>

080057e8 <__exponent>:
 80057e8:	4603      	mov	r3, r0
 80057ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057ec:	2900      	cmp	r1, #0
 80057ee:	f803 2b02 	strb.w	r2, [r3], #2
 80057f2:	bfb6      	itet	lt
 80057f4:	222d      	movlt	r2, #45	; 0x2d
 80057f6:	222b      	movge	r2, #43	; 0x2b
 80057f8:	4249      	neglt	r1, r1
 80057fa:	2909      	cmp	r1, #9
 80057fc:	7042      	strb	r2, [r0, #1]
 80057fe:	dd2a      	ble.n	8005856 <__exponent+0x6e>
 8005800:	f10d 0207 	add.w	r2, sp, #7
 8005804:	4617      	mov	r7, r2
 8005806:	260a      	movs	r6, #10
 8005808:	fb91 f5f6 	sdiv	r5, r1, r6
 800580c:	4694      	mov	ip, r2
 800580e:	fb06 1415 	mls	r4, r6, r5, r1
 8005812:	3430      	adds	r4, #48	; 0x30
 8005814:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005818:	460c      	mov	r4, r1
 800581a:	2c63      	cmp	r4, #99	; 0x63
 800581c:	4629      	mov	r1, r5
 800581e:	f102 32ff 	add.w	r2, r2, #4294967295
 8005822:	dcf1      	bgt.n	8005808 <__exponent+0x20>
 8005824:	3130      	adds	r1, #48	; 0x30
 8005826:	f1ac 0402 	sub.w	r4, ip, #2
 800582a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800582e:	4622      	mov	r2, r4
 8005830:	1c41      	adds	r1, r0, #1
 8005832:	42ba      	cmp	r2, r7
 8005834:	d30a      	bcc.n	800584c <__exponent+0x64>
 8005836:	f10d 0209 	add.w	r2, sp, #9
 800583a:	eba2 020c 	sub.w	r2, r2, ip
 800583e:	42bc      	cmp	r4, r7
 8005840:	bf88      	it	hi
 8005842:	2200      	movhi	r2, #0
 8005844:	4413      	add	r3, r2
 8005846:	1a18      	subs	r0, r3, r0
 8005848:	b003      	add	sp, #12
 800584a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800584c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005850:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005854:	e7ed      	b.n	8005832 <__exponent+0x4a>
 8005856:	2330      	movs	r3, #48	; 0x30
 8005858:	3130      	adds	r1, #48	; 0x30
 800585a:	7083      	strb	r3, [r0, #2]
 800585c:	70c1      	strb	r1, [r0, #3]
 800585e:	1d03      	adds	r3, r0, #4
 8005860:	e7f1      	b.n	8005846 <__exponent+0x5e>
	...

08005864 <_printf_float>:
 8005864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005868:	b091      	sub	sp, #68	; 0x44
 800586a:	460c      	mov	r4, r1
 800586c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005870:	4616      	mov	r6, r2
 8005872:	461f      	mov	r7, r3
 8005874:	4605      	mov	r5, r0
 8005876:	f000 fce5 	bl	8006244 <_localeconv_r>
 800587a:	6803      	ldr	r3, [r0, #0]
 800587c:	4618      	mov	r0, r3
 800587e:	9309      	str	r3, [sp, #36]	; 0x24
 8005880:	f7fa fc66 	bl	8000150 <strlen>
 8005884:	2300      	movs	r3, #0
 8005886:	930e      	str	r3, [sp, #56]	; 0x38
 8005888:	f8d8 3000 	ldr.w	r3, [r8]
 800588c:	900a      	str	r0, [sp, #40]	; 0x28
 800588e:	3307      	adds	r3, #7
 8005890:	f023 0307 	bic.w	r3, r3, #7
 8005894:	f103 0208 	add.w	r2, r3, #8
 8005898:	f894 9018 	ldrb.w	r9, [r4, #24]
 800589c:	f8d4 b000 	ldr.w	fp, [r4]
 80058a0:	f8c8 2000 	str.w	r2, [r8]
 80058a4:	e9d3 a800 	ldrd	sl, r8, [r3]
 80058a8:	4652      	mov	r2, sl
 80058aa:	4643      	mov	r3, r8
 80058ac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80058b0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80058b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80058b6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ba:	4650      	mov	r0, sl
 80058bc:	4b9c      	ldr	r3, [pc, #624]	; (8005b30 <_printf_float+0x2cc>)
 80058be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058c0:	f7fb f8a4 	bl	8000a0c <__aeabi_dcmpun>
 80058c4:	bb70      	cbnz	r0, 8005924 <_printf_float+0xc0>
 80058c6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ca:	4650      	mov	r0, sl
 80058cc:	4b98      	ldr	r3, [pc, #608]	; (8005b30 <_printf_float+0x2cc>)
 80058ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80058d0:	f7fb f87e 	bl	80009d0 <__aeabi_dcmple>
 80058d4:	bb30      	cbnz	r0, 8005924 <_printf_float+0xc0>
 80058d6:	2200      	movs	r2, #0
 80058d8:	2300      	movs	r3, #0
 80058da:	4650      	mov	r0, sl
 80058dc:	4641      	mov	r1, r8
 80058de:	f7fb f86d 	bl	80009bc <__aeabi_dcmplt>
 80058e2:	b110      	cbz	r0, 80058ea <_printf_float+0x86>
 80058e4:	232d      	movs	r3, #45	; 0x2d
 80058e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ea:	4a92      	ldr	r2, [pc, #584]	; (8005b34 <_printf_float+0x2d0>)
 80058ec:	4b92      	ldr	r3, [pc, #584]	; (8005b38 <_printf_float+0x2d4>)
 80058ee:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80058f2:	bf94      	ite	ls
 80058f4:	4690      	movls	r8, r2
 80058f6:	4698      	movhi	r8, r3
 80058f8:	2303      	movs	r3, #3
 80058fa:	f04f 0a00 	mov.w	sl, #0
 80058fe:	6123      	str	r3, [r4, #16]
 8005900:	f02b 0304 	bic.w	r3, fp, #4
 8005904:	6023      	str	r3, [r4, #0]
 8005906:	4633      	mov	r3, r6
 8005908:	4621      	mov	r1, r4
 800590a:	4628      	mov	r0, r5
 800590c:	9700      	str	r7, [sp, #0]
 800590e:	aa0f      	add	r2, sp, #60	; 0x3c
 8005910:	f000 f9d6 	bl	8005cc0 <_printf_common>
 8005914:	3001      	adds	r0, #1
 8005916:	f040 8090 	bne.w	8005a3a <_printf_float+0x1d6>
 800591a:	f04f 30ff 	mov.w	r0, #4294967295
 800591e:	b011      	add	sp, #68	; 0x44
 8005920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005924:	4652      	mov	r2, sl
 8005926:	4643      	mov	r3, r8
 8005928:	4650      	mov	r0, sl
 800592a:	4641      	mov	r1, r8
 800592c:	f7fb f86e 	bl	8000a0c <__aeabi_dcmpun>
 8005930:	b148      	cbz	r0, 8005946 <_printf_float+0xe2>
 8005932:	f1b8 0f00 	cmp.w	r8, #0
 8005936:	bfb8      	it	lt
 8005938:	232d      	movlt	r3, #45	; 0x2d
 800593a:	4a80      	ldr	r2, [pc, #512]	; (8005b3c <_printf_float+0x2d8>)
 800593c:	bfb8      	it	lt
 800593e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005942:	4b7f      	ldr	r3, [pc, #508]	; (8005b40 <_printf_float+0x2dc>)
 8005944:	e7d3      	b.n	80058ee <_printf_float+0x8a>
 8005946:	6863      	ldr	r3, [r4, #4]
 8005948:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	d142      	bne.n	80059d6 <_printf_float+0x172>
 8005950:	2306      	movs	r3, #6
 8005952:	6063      	str	r3, [r4, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	9206      	str	r2, [sp, #24]
 8005958:	aa0e      	add	r2, sp, #56	; 0x38
 800595a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800595e:	aa0d      	add	r2, sp, #52	; 0x34
 8005960:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005964:	9203      	str	r2, [sp, #12]
 8005966:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800596a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800596e:	6023      	str	r3, [r4, #0]
 8005970:	6863      	ldr	r3, [r4, #4]
 8005972:	4652      	mov	r2, sl
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	4628      	mov	r0, r5
 8005978:	4643      	mov	r3, r8
 800597a:	910b      	str	r1, [sp, #44]	; 0x2c
 800597c:	f7ff fed5 	bl	800572a <__cvt>
 8005980:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005982:	4680      	mov	r8, r0
 8005984:	2947      	cmp	r1, #71	; 0x47
 8005986:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005988:	d108      	bne.n	800599c <_printf_float+0x138>
 800598a:	1cc8      	adds	r0, r1, #3
 800598c:	db02      	blt.n	8005994 <_printf_float+0x130>
 800598e:	6863      	ldr	r3, [r4, #4]
 8005990:	4299      	cmp	r1, r3
 8005992:	dd40      	ble.n	8005a16 <_printf_float+0x1b2>
 8005994:	f1a9 0902 	sub.w	r9, r9, #2
 8005998:	fa5f f989 	uxtb.w	r9, r9
 800599c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80059a0:	d81f      	bhi.n	80059e2 <_printf_float+0x17e>
 80059a2:	464a      	mov	r2, r9
 80059a4:	3901      	subs	r1, #1
 80059a6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80059aa:	910d      	str	r1, [sp, #52]	; 0x34
 80059ac:	f7ff ff1c 	bl	80057e8 <__exponent>
 80059b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059b2:	4682      	mov	sl, r0
 80059b4:	1813      	adds	r3, r2, r0
 80059b6:	2a01      	cmp	r2, #1
 80059b8:	6123      	str	r3, [r4, #16]
 80059ba:	dc02      	bgt.n	80059c2 <_printf_float+0x15e>
 80059bc:	6822      	ldr	r2, [r4, #0]
 80059be:	07d2      	lsls	r2, r2, #31
 80059c0:	d501      	bpl.n	80059c6 <_printf_float+0x162>
 80059c2:	3301      	adds	r3, #1
 80059c4:	6123      	str	r3, [r4, #16]
 80059c6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d09b      	beq.n	8005906 <_printf_float+0xa2>
 80059ce:	232d      	movs	r3, #45	; 0x2d
 80059d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d4:	e797      	b.n	8005906 <_printf_float+0xa2>
 80059d6:	2947      	cmp	r1, #71	; 0x47
 80059d8:	d1bc      	bne.n	8005954 <_printf_float+0xf0>
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1ba      	bne.n	8005954 <_printf_float+0xf0>
 80059de:	2301      	movs	r3, #1
 80059e0:	e7b7      	b.n	8005952 <_printf_float+0xee>
 80059e2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80059e6:	d118      	bne.n	8005a1a <_printf_float+0x1b6>
 80059e8:	2900      	cmp	r1, #0
 80059ea:	6863      	ldr	r3, [r4, #4]
 80059ec:	dd0b      	ble.n	8005a06 <_printf_float+0x1a2>
 80059ee:	6121      	str	r1, [r4, #16]
 80059f0:	b913      	cbnz	r3, 80059f8 <_printf_float+0x194>
 80059f2:	6822      	ldr	r2, [r4, #0]
 80059f4:	07d0      	lsls	r0, r2, #31
 80059f6:	d502      	bpl.n	80059fe <_printf_float+0x19a>
 80059f8:	3301      	adds	r3, #1
 80059fa:	440b      	add	r3, r1
 80059fc:	6123      	str	r3, [r4, #16]
 80059fe:	f04f 0a00 	mov.w	sl, #0
 8005a02:	65a1      	str	r1, [r4, #88]	; 0x58
 8005a04:	e7df      	b.n	80059c6 <_printf_float+0x162>
 8005a06:	b913      	cbnz	r3, 8005a0e <_printf_float+0x1aa>
 8005a08:	6822      	ldr	r2, [r4, #0]
 8005a0a:	07d2      	lsls	r2, r2, #31
 8005a0c:	d501      	bpl.n	8005a12 <_printf_float+0x1ae>
 8005a0e:	3302      	adds	r3, #2
 8005a10:	e7f4      	b.n	80059fc <_printf_float+0x198>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e7f2      	b.n	80059fc <_printf_float+0x198>
 8005a16:	f04f 0967 	mov.w	r9, #103	; 0x67
 8005a1a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a1c:	4299      	cmp	r1, r3
 8005a1e:	db05      	blt.n	8005a2c <_printf_float+0x1c8>
 8005a20:	6823      	ldr	r3, [r4, #0]
 8005a22:	6121      	str	r1, [r4, #16]
 8005a24:	07d8      	lsls	r0, r3, #31
 8005a26:	d5ea      	bpl.n	80059fe <_printf_float+0x19a>
 8005a28:	1c4b      	adds	r3, r1, #1
 8005a2a:	e7e7      	b.n	80059fc <_printf_float+0x198>
 8005a2c:	2900      	cmp	r1, #0
 8005a2e:	bfcc      	ite	gt
 8005a30:	2201      	movgt	r2, #1
 8005a32:	f1c1 0202 	rsble	r2, r1, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	e7e0      	b.n	80059fc <_printf_float+0x198>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	055a      	lsls	r2, r3, #21
 8005a3e:	d407      	bmi.n	8005a50 <_printf_float+0x1ec>
 8005a40:	6923      	ldr	r3, [r4, #16]
 8005a42:	4642      	mov	r2, r8
 8005a44:	4631      	mov	r1, r6
 8005a46:	4628      	mov	r0, r5
 8005a48:	47b8      	blx	r7
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	d12b      	bne.n	8005aa6 <_printf_float+0x242>
 8005a4e:	e764      	b.n	800591a <_printf_float+0xb6>
 8005a50:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005a54:	f240 80dd 	bls.w	8005c12 <_printf_float+0x3ae>
 8005a58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f7fa ffa2 	bl	80009a8 <__aeabi_dcmpeq>
 8005a64:	2800      	cmp	r0, #0
 8005a66:	d033      	beq.n	8005ad0 <_printf_float+0x26c>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	4a35      	ldr	r2, [pc, #212]	; (8005b44 <_printf_float+0x2e0>)
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	f43f af51 	beq.w	800591a <_printf_float+0xb6>
 8005a78:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	db02      	blt.n	8005a86 <_printf_float+0x222>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	07d8      	lsls	r0, r3, #31
 8005a84:	d50f      	bpl.n	8005aa6 <_printf_float+0x242>
 8005a86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	f43f af42 	beq.w	800591a <_printf_float+0xb6>
 8005a96:	f04f 0800 	mov.w	r8, #0
 8005a9a:	f104 091a 	add.w	r9, r4, #26
 8005a9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	4543      	cmp	r3, r8
 8005aa4:	dc09      	bgt.n	8005aba <_printf_float+0x256>
 8005aa6:	6823      	ldr	r3, [r4, #0]
 8005aa8:	079b      	lsls	r3, r3, #30
 8005aaa:	f100 8104 	bmi.w	8005cb6 <_printf_float+0x452>
 8005aae:	68e0      	ldr	r0, [r4, #12]
 8005ab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ab2:	4298      	cmp	r0, r3
 8005ab4:	bfb8      	it	lt
 8005ab6:	4618      	movlt	r0, r3
 8005ab8:	e731      	b.n	800591e <_printf_float+0xba>
 8005aba:	2301      	movs	r3, #1
 8005abc:	464a      	mov	r2, r9
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b8      	blx	r7
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	f43f af28 	beq.w	800591a <_printf_float+0xb6>
 8005aca:	f108 0801 	add.w	r8, r8, #1
 8005ace:	e7e6      	b.n	8005a9e <_printf_float+0x23a>
 8005ad0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	dc38      	bgt.n	8005b48 <_printf_float+0x2e4>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4631      	mov	r1, r6
 8005ada:	4628      	mov	r0, r5
 8005adc:	4a19      	ldr	r2, [pc, #100]	; (8005b44 <_printf_float+0x2e0>)
 8005ade:	47b8      	blx	r7
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	f43f af1a 	beq.w	800591a <_printf_float+0xb6>
 8005ae6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005aea:	4313      	orrs	r3, r2
 8005aec:	d102      	bne.n	8005af4 <_printf_float+0x290>
 8005aee:	6823      	ldr	r3, [r4, #0]
 8005af0:	07d9      	lsls	r1, r3, #31
 8005af2:	d5d8      	bpl.n	8005aa6 <_printf_float+0x242>
 8005af4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005af8:	4631      	mov	r1, r6
 8005afa:	4628      	mov	r0, r5
 8005afc:	47b8      	blx	r7
 8005afe:	3001      	adds	r0, #1
 8005b00:	f43f af0b 	beq.w	800591a <_printf_float+0xb6>
 8005b04:	f04f 0900 	mov.w	r9, #0
 8005b08:	f104 0a1a 	add.w	sl, r4, #26
 8005b0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b0e:	425b      	negs	r3, r3
 8005b10:	454b      	cmp	r3, r9
 8005b12:	dc01      	bgt.n	8005b18 <_printf_float+0x2b4>
 8005b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b16:	e794      	b.n	8005a42 <_printf_float+0x1de>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	4652      	mov	r2, sl
 8005b1c:	4631      	mov	r1, r6
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b8      	blx	r7
 8005b22:	3001      	adds	r0, #1
 8005b24:	f43f aef9 	beq.w	800591a <_printf_float+0xb6>
 8005b28:	f109 0901 	add.w	r9, r9, #1
 8005b2c:	e7ee      	b.n	8005b0c <_printf_float+0x2a8>
 8005b2e:	bf00      	nop
 8005b30:	7fefffff 	.word	0x7fefffff
 8005b34:	0800a66a 	.word	0x0800a66a
 8005b38:	0800a66e 	.word	0x0800a66e
 8005b3c:	0800a672 	.word	0x0800a672
 8005b40:	0800a676 	.word	0x0800a676
 8005b44:	0800a67a 	.word	0x0800a67a
 8005b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	bfa8      	it	ge
 8005b50:	461a      	movge	r2, r3
 8005b52:	2a00      	cmp	r2, #0
 8005b54:	4691      	mov	r9, r2
 8005b56:	dc37      	bgt.n	8005bc8 <_printf_float+0x364>
 8005b58:	f04f 0b00 	mov.w	fp, #0
 8005b5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b60:	f104 021a 	add.w	r2, r4, #26
 8005b64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b68:	ebaa 0309 	sub.w	r3, sl, r9
 8005b6c:	455b      	cmp	r3, fp
 8005b6e:	dc33      	bgt.n	8005bd8 <_printf_float+0x374>
 8005b70:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b74:	429a      	cmp	r2, r3
 8005b76:	db3b      	blt.n	8005bf0 <_printf_float+0x38c>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	07da      	lsls	r2, r3, #31
 8005b7c:	d438      	bmi.n	8005bf0 <_printf_float+0x38c>
 8005b7e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005b82:	eba2 0903 	sub.w	r9, r2, r3
 8005b86:	eba2 020a 	sub.w	r2, r2, sl
 8005b8a:	4591      	cmp	r9, r2
 8005b8c:	bfa8      	it	ge
 8005b8e:	4691      	movge	r9, r2
 8005b90:	f1b9 0f00 	cmp.w	r9, #0
 8005b94:	dc34      	bgt.n	8005c00 <_printf_float+0x39c>
 8005b96:	f04f 0800 	mov.w	r8, #0
 8005b9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b9e:	f104 0a1a 	add.w	sl, r4, #26
 8005ba2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005ba6:	1a9b      	subs	r3, r3, r2
 8005ba8:	eba3 0309 	sub.w	r3, r3, r9
 8005bac:	4543      	cmp	r3, r8
 8005bae:	f77f af7a 	ble.w	8005aa6 <_printf_float+0x242>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	4652      	mov	r2, sl
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b8      	blx	r7
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f43f aeac 	beq.w	800591a <_printf_float+0xb6>
 8005bc2:	f108 0801 	add.w	r8, r8, #1
 8005bc6:	e7ec      	b.n	8005ba2 <_printf_float+0x33e>
 8005bc8:	4613      	mov	r3, r2
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4642      	mov	r2, r8
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b8      	blx	r7
 8005bd2:	3001      	adds	r0, #1
 8005bd4:	d1c0      	bne.n	8005b58 <_printf_float+0x2f4>
 8005bd6:	e6a0      	b.n	800591a <_printf_float+0xb6>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	920b      	str	r2, [sp, #44]	; 0x2c
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	f43f ae99 	beq.w	800591a <_printf_float+0xb6>
 8005be8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bea:	f10b 0b01 	add.w	fp, fp, #1
 8005bee:	e7b9      	b.n	8005b64 <_printf_float+0x300>
 8005bf0:	4631      	mov	r1, r6
 8005bf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	47b8      	blx	r7
 8005bfa:	3001      	adds	r0, #1
 8005bfc:	d1bf      	bne.n	8005b7e <_printf_float+0x31a>
 8005bfe:	e68c      	b.n	800591a <_printf_float+0xb6>
 8005c00:	464b      	mov	r3, r9
 8005c02:	4631      	mov	r1, r6
 8005c04:	4628      	mov	r0, r5
 8005c06:	eb08 020a 	add.w	r2, r8, sl
 8005c0a:	47b8      	blx	r7
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	d1c2      	bne.n	8005b96 <_printf_float+0x332>
 8005c10:	e683      	b.n	800591a <_printf_float+0xb6>
 8005c12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c14:	2a01      	cmp	r2, #1
 8005c16:	dc01      	bgt.n	8005c1c <_printf_float+0x3b8>
 8005c18:	07db      	lsls	r3, r3, #31
 8005c1a:	d539      	bpl.n	8005c90 <_printf_float+0x42c>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4642      	mov	r2, r8
 8005c20:	4631      	mov	r1, r6
 8005c22:	4628      	mov	r0, r5
 8005c24:	47b8      	blx	r7
 8005c26:	3001      	adds	r0, #1
 8005c28:	f43f ae77 	beq.w	800591a <_printf_float+0xb6>
 8005c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c30:	4631      	mov	r1, r6
 8005c32:	4628      	mov	r0, r5
 8005c34:	47b8      	blx	r7
 8005c36:	3001      	adds	r0, #1
 8005c38:	f43f ae6f 	beq.w	800591a <_printf_float+0xb6>
 8005c3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c40:	2200      	movs	r2, #0
 8005c42:	2300      	movs	r3, #0
 8005c44:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8005c48:	f7fa feae 	bl	80009a8 <__aeabi_dcmpeq>
 8005c4c:	b9d8      	cbnz	r0, 8005c86 <_printf_float+0x422>
 8005c4e:	f109 33ff 	add.w	r3, r9, #4294967295
 8005c52:	f108 0201 	add.w	r2, r8, #1
 8005c56:	4631      	mov	r1, r6
 8005c58:	4628      	mov	r0, r5
 8005c5a:	47b8      	blx	r7
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d10e      	bne.n	8005c7e <_printf_float+0x41a>
 8005c60:	e65b      	b.n	800591a <_printf_float+0xb6>
 8005c62:	2301      	movs	r3, #1
 8005c64:	464a      	mov	r2, r9
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	f43f ae54 	beq.w	800591a <_printf_float+0xb6>
 8005c72:	f108 0801 	add.w	r8, r8, #1
 8005c76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	4543      	cmp	r3, r8
 8005c7c:	dcf1      	bgt.n	8005c62 <_printf_float+0x3fe>
 8005c7e:	4653      	mov	r3, sl
 8005c80:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c84:	e6de      	b.n	8005a44 <_printf_float+0x1e0>
 8005c86:	f04f 0800 	mov.w	r8, #0
 8005c8a:	f104 091a 	add.w	r9, r4, #26
 8005c8e:	e7f2      	b.n	8005c76 <_printf_float+0x412>
 8005c90:	2301      	movs	r3, #1
 8005c92:	4642      	mov	r2, r8
 8005c94:	e7df      	b.n	8005c56 <_printf_float+0x3f2>
 8005c96:	2301      	movs	r3, #1
 8005c98:	464a      	mov	r2, r9
 8005c9a:	4631      	mov	r1, r6
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b8      	blx	r7
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f43f ae3a 	beq.w	800591a <_printf_float+0xb6>
 8005ca6:	f108 0801 	add.w	r8, r8, #1
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8005cae:	1a5b      	subs	r3, r3, r1
 8005cb0:	4543      	cmp	r3, r8
 8005cb2:	dcf0      	bgt.n	8005c96 <_printf_float+0x432>
 8005cb4:	e6fb      	b.n	8005aae <_printf_float+0x24a>
 8005cb6:	f04f 0800 	mov.w	r8, #0
 8005cba:	f104 0919 	add.w	r9, r4, #25
 8005cbe:	e7f4      	b.n	8005caa <_printf_float+0x446>

08005cc0 <_printf_common>:
 8005cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	4616      	mov	r6, r2
 8005cc6:	4699      	mov	r9, r3
 8005cc8:	688a      	ldr	r2, [r1, #8]
 8005cca:	690b      	ldr	r3, [r1, #16]
 8005ccc:	4607      	mov	r7, r0
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	bfb8      	it	lt
 8005cd2:	4613      	movlt	r3, r2
 8005cd4:	6033      	str	r3, [r6, #0]
 8005cd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cda:	460c      	mov	r4, r1
 8005cdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ce0:	b10a      	cbz	r2, 8005ce6 <_printf_common+0x26>
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	6033      	str	r3, [r6, #0]
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	0699      	lsls	r1, r3, #26
 8005cea:	bf42      	ittt	mi
 8005cec:	6833      	ldrmi	r3, [r6, #0]
 8005cee:	3302      	addmi	r3, #2
 8005cf0:	6033      	strmi	r3, [r6, #0]
 8005cf2:	6825      	ldr	r5, [r4, #0]
 8005cf4:	f015 0506 	ands.w	r5, r5, #6
 8005cf8:	d106      	bne.n	8005d08 <_printf_common+0x48>
 8005cfa:	f104 0a19 	add.w	sl, r4, #25
 8005cfe:	68e3      	ldr	r3, [r4, #12]
 8005d00:	6832      	ldr	r2, [r6, #0]
 8005d02:	1a9b      	subs	r3, r3, r2
 8005d04:	42ab      	cmp	r3, r5
 8005d06:	dc2b      	bgt.n	8005d60 <_printf_common+0xa0>
 8005d08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d0c:	1e13      	subs	r3, r2, #0
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	bf18      	it	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	0692      	lsls	r2, r2, #26
 8005d16:	d430      	bmi.n	8005d7a <_printf_common+0xba>
 8005d18:	4649      	mov	r1, r9
 8005d1a:	4638      	mov	r0, r7
 8005d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d20:	47c0      	blx	r8
 8005d22:	3001      	adds	r0, #1
 8005d24:	d023      	beq.n	8005d6e <_printf_common+0xae>
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	6922      	ldr	r2, [r4, #16]
 8005d2a:	f003 0306 	and.w	r3, r3, #6
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	bf14      	ite	ne
 8005d32:	2500      	movne	r5, #0
 8005d34:	6833      	ldreq	r3, [r6, #0]
 8005d36:	f04f 0600 	mov.w	r6, #0
 8005d3a:	bf08      	it	eq
 8005d3c:	68e5      	ldreq	r5, [r4, #12]
 8005d3e:	f104 041a 	add.w	r4, r4, #26
 8005d42:	bf08      	it	eq
 8005d44:	1aed      	subeq	r5, r5, r3
 8005d46:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d4a:	bf08      	it	eq
 8005d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d50:	4293      	cmp	r3, r2
 8005d52:	bfc4      	itt	gt
 8005d54:	1a9b      	subgt	r3, r3, r2
 8005d56:	18ed      	addgt	r5, r5, r3
 8005d58:	42b5      	cmp	r5, r6
 8005d5a:	d11a      	bne.n	8005d92 <_printf_common+0xd2>
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	e008      	b.n	8005d72 <_printf_common+0xb2>
 8005d60:	2301      	movs	r3, #1
 8005d62:	4652      	mov	r2, sl
 8005d64:	4649      	mov	r1, r9
 8005d66:	4638      	mov	r0, r7
 8005d68:	47c0      	blx	r8
 8005d6a:	3001      	adds	r0, #1
 8005d6c:	d103      	bne.n	8005d76 <_printf_common+0xb6>
 8005d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d76:	3501      	adds	r5, #1
 8005d78:	e7c1      	b.n	8005cfe <_printf_common+0x3e>
 8005d7a:	2030      	movs	r0, #48	; 0x30
 8005d7c:	18e1      	adds	r1, r4, r3
 8005d7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d82:	1c5a      	adds	r2, r3, #1
 8005d84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d88:	4422      	add	r2, r4
 8005d8a:	3302      	adds	r3, #2
 8005d8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d90:	e7c2      	b.n	8005d18 <_printf_common+0x58>
 8005d92:	2301      	movs	r3, #1
 8005d94:	4622      	mov	r2, r4
 8005d96:	4649      	mov	r1, r9
 8005d98:	4638      	mov	r0, r7
 8005d9a:	47c0      	blx	r8
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d0e6      	beq.n	8005d6e <_printf_common+0xae>
 8005da0:	3601      	adds	r6, #1
 8005da2:	e7d9      	b.n	8005d58 <_printf_common+0x98>

08005da4 <_printf_i>:
 8005da4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005da8:	7e0f      	ldrb	r7, [r1, #24]
 8005daa:	4691      	mov	r9, r2
 8005dac:	2f78      	cmp	r7, #120	; 0x78
 8005dae:	4680      	mov	r8, r0
 8005db0:	460c      	mov	r4, r1
 8005db2:	469a      	mov	sl, r3
 8005db4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005db6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005dba:	d807      	bhi.n	8005dcc <_printf_i+0x28>
 8005dbc:	2f62      	cmp	r7, #98	; 0x62
 8005dbe:	d80a      	bhi.n	8005dd6 <_printf_i+0x32>
 8005dc0:	2f00      	cmp	r7, #0
 8005dc2:	f000 80d5 	beq.w	8005f70 <_printf_i+0x1cc>
 8005dc6:	2f58      	cmp	r7, #88	; 0x58
 8005dc8:	f000 80c1 	beq.w	8005f4e <_printf_i+0x1aa>
 8005dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dd4:	e03a      	b.n	8005e4c <_printf_i+0xa8>
 8005dd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dda:	2b15      	cmp	r3, #21
 8005ddc:	d8f6      	bhi.n	8005dcc <_printf_i+0x28>
 8005dde:	a101      	add	r1, pc, #4	; (adr r1, 8005de4 <_printf_i+0x40>)
 8005de0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005de4:	08005e3d 	.word	0x08005e3d
 8005de8:	08005e51 	.word	0x08005e51
 8005dec:	08005dcd 	.word	0x08005dcd
 8005df0:	08005dcd 	.word	0x08005dcd
 8005df4:	08005dcd 	.word	0x08005dcd
 8005df8:	08005dcd 	.word	0x08005dcd
 8005dfc:	08005e51 	.word	0x08005e51
 8005e00:	08005dcd 	.word	0x08005dcd
 8005e04:	08005dcd 	.word	0x08005dcd
 8005e08:	08005dcd 	.word	0x08005dcd
 8005e0c:	08005dcd 	.word	0x08005dcd
 8005e10:	08005f57 	.word	0x08005f57
 8005e14:	08005e7d 	.word	0x08005e7d
 8005e18:	08005f11 	.word	0x08005f11
 8005e1c:	08005dcd 	.word	0x08005dcd
 8005e20:	08005dcd 	.word	0x08005dcd
 8005e24:	08005f79 	.word	0x08005f79
 8005e28:	08005dcd 	.word	0x08005dcd
 8005e2c:	08005e7d 	.word	0x08005e7d
 8005e30:	08005dcd 	.word	0x08005dcd
 8005e34:	08005dcd 	.word	0x08005dcd
 8005e38:	08005f19 	.word	0x08005f19
 8005e3c:	682b      	ldr	r3, [r5, #0]
 8005e3e:	1d1a      	adds	r2, r3, #4
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	602a      	str	r2, [r5, #0]
 8005e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e0a0      	b.n	8005f92 <_printf_i+0x1ee>
 8005e50:	6820      	ldr	r0, [r4, #0]
 8005e52:	682b      	ldr	r3, [r5, #0]
 8005e54:	0607      	lsls	r7, r0, #24
 8005e56:	f103 0104 	add.w	r1, r3, #4
 8005e5a:	6029      	str	r1, [r5, #0]
 8005e5c:	d501      	bpl.n	8005e62 <_printf_i+0xbe>
 8005e5e:	681e      	ldr	r6, [r3, #0]
 8005e60:	e003      	b.n	8005e6a <_printf_i+0xc6>
 8005e62:	0646      	lsls	r6, r0, #25
 8005e64:	d5fb      	bpl.n	8005e5e <_printf_i+0xba>
 8005e66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005e6a:	2e00      	cmp	r6, #0
 8005e6c:	da03      	bge.n	8005e76 <_printf_i+0xd2>
 8005e6e:	232d      	movs	r3, #45	; 0x2d
 8005e70:	4276      	negs	r6, r6
 8005e72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e76:	230a      	movs	r3, #10
 8005e78:	4859      	ldr	r0, [pc, #356]	; (8005fe0 <_printf_i+0x23c>)
 8005e7a:	e012      	b.n	8005ea2 <_printf_i+0xfe>
 8005e7c:	682b      	ldr	r3, [r5, #0]
 8005e7e:	6820      	ldr	r0, [r4, #0]
 8005e80:	1d19      	adds	r1, r3, #4
 8005e82:	6029      	str	r1, [r5, #0]
 8005e84:	0605      	lsls	r5, r0, #24
 8005e86:	d501      	bpl.n	8005e8c <_printf_i+0xe8>
 8005e88:	681e      	ldr	r6, [r3, #0]
 8005e8a:	e002      	b.n	8005e92 <_printf_i+0xee>
 8005e8c:	0641      	lsls	r1, r0, #25
 8005e8e:	d5fb      	bpl.n	8005e88 <_printf_i+0xe4>
 8005e90:	881e      	ldrh	r6, [r3, #0]
 8005e92:	2f6f      	cmp	r7, #111	; 0x6f
 8005e94:	bf0c      	ite	eq
 8005e96:	2308      	moveq	r3, #8
 8005e98:	230a      	movne	r3, #10
 8005e9a:	4851      	ldr	r0, [pc, #324]	; (8005fe0 <_printf_i+0x23c>)
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ea2:	6865      	ldr	r5, [r4, #4]
 8005ea4:	2d00      	cmp	r5, #0
 8005ea6:	bfa8      	it	ge
 8005ea8:	6821      	ldrge	r1, [r4, #0]
 8005eaa:	60a5      	str	r5, [r4, #8]
 8005eac:	bfa4      	itt	ge
 8005eae:	f021 0104 	bicge.w	r1, r1, #4
 8005eb2:	6021      	strge	r1, [r4, #0]
 8005eb4:	b90e      	cbnz	r6, 8005eba <_printf_i+0x116>
 8005eb6:	2d00      	cmp	r5, #0
 8005eb8:	d04b      	beq.n	8005f52 <_printf_i+0x1ae>
 8005eba:	4615      	mov	r5, r2
 8005ebc:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ec0:	fb03 6711 	mls	r7, r3, r1, r6
 8005ec4:	5dc7      	ldrb	r7, [r0, r7]
 8005ec6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005eca:	4637      	mov	r7, r6
 8005ecc:	42bb      	cmp	r3, r7
 8005ece:	460e      	mov	r6, r1
 8005ed0:	d9f4      	bls.n	8005ebc <_printf_i+0x118>
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d10b      	bne.n	8005eee <_printf_i+0x14a>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	07de      	lsls	r6, r3, #31
 8005eda:	d508      	bpl.n	8005eee <_printf_i+0x14a>
 8005edc:	6923      	ldr	r3, [r4, #16]
 8005ede:	6861      	ldr	r1, [r4, #4]
 8005ee0:	4299      	cmp	r1, r3
 8005ee2:	bfde      	ittt	le
 8005ee4:	2330      	movle	r3, #48	; 0x30
 8005ee6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005eea:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005eee:	1b52      	subs	r2, r2, r5
 8005ef0:	6122      	str	r2, [r4, #16]
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	4640      	mov	r0, r8
 8005ef8:	f8cd a000 	str.w	sl, [sp]
 8005efc:	aa03      	add	r2, sp, #12
 8005efe:	f7ff fedf 	bl	8005cc0 <_printf_common>
 8005f02:	3001      	adds	r0, #1
 8005f04:	d14a      	bne.n	8005f9c <_printf_i+0x1f8>
 8005f06:	f04f 30ff 	mov.w	r0, #4294967295
 8005f0a:	b004      	add	sp, #16
 8005f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f10:	6823      	ldr	r3, [r4, #0]
 8005f12:	f043 0320 	orr.w	r3, r3, #32
 8005f16:	6023      	str	r3, [r4, #0]
 8005f18:	2778      	movs	r7, #120	; 0x78
 8005f1a:	4832      	ldr	r0, [pc, #200]	; (8005fe4 <_printf_i+0x240>)
 8005f1c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	6829      	ldr	r1, [r5, #0]
 8005f24:	061f      	lsls	r7, r3, #24
 8005f26:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f2a:	d402      	bmi.n	8005f32 <_printf_i+0x18e>
 8005f2c:	065f      	lsls	r7, r3, #25
 8005f2e:	bf48      	it	mi
 8005f30:	b2b6      	uxthmi	r6, r6
 8005f32:	07df      	lsls	r7, r3, #31
 8005f34:	bf48      	it	mi
 8005f36:	f043 0320 	orrmi.w	r3, r3, #32
 8005f3a:	6029      	str	r1, [r5, #0]
 8005f3c:	bf48      	it	mi
 8005f3e:	6023      	strmi	r3, [r4, #0]
 8005f40:	b91e      	cbnz	r6, 8005f4a <_printf_i+0x1a6>
 8005f42:	6823      	ldr	r3, [r4, #0]
 8005f44:	f023 0320 	bic.w	r3, r3, #32
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	2310      	movs	r3, #16
 8005f4c:	e7a6      	b.n	8005e9c <_printf_i+0xf8>
 8005f4e:	4824      	ldr	r0, [pc, #144]	; (8005fe0 <_printf_i+0x23c>)
 8005f50:	e7e4      	b.n	8005f1c <_printf_i+0x178>
 8005f52:	4615      	mov	r5, r2
 8005f54:	e7bd      	b.n	8005ed2 <_printf_i+0x12e>
 8005f56:	682b      	ldr	r3, [r5, #0]
 8005f58:	6826      	ldr	r6, [r4, #0]
 8005f5a:	1d18      	adds	r0, r3, #4
 8005f5c:	6961      	ldr	r1, [r4, #20]
 8005f5e:	6028      	str	r0, [r5, #0]
 8005f60:	0635      	lsls	r5, r6, #24
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	d501      	bpl.n	8005f6a <_printf_i+0x1c6>
 8005f66:	6019      	str	r1, [r3, #0]
 8005f68:	e002      	b.n	8005f70 <_printf_i+0x1cc>
 8005f6a:	0670      	lsls	r0, r6, #25
 8005f6c:	d5fb      	bpl.n	8005f66 <_printf_i+0x1c2>
 8005f6e:	8019      	strh	r1, [r3, #0]
 8005f70:	2300      	movs	r3, #0
 8005f72:	4615      	mov	r5, r2
 8005f74:	6123      	str	r3, [r4, #16]
 8005f76:	e7bc      	b.n	8005ef2 <_printf_i+0x14e>
 8005f78:	682b      	ldr	r3, [r5, #0]
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	1d1a      	adds	r2, r3, #4
 8005f7e:	602a      	str	r2, [r5, #0]
 8005f80:	681d      	ldr	r5, [r3, #0]
 8005f82:	6862      	ldr	r2, [r4, #4]
 8005f84:	4628      	mov	r0, r5
 8005f86:	f000 f9d4 	bl	8006332 <memchr>
 8005f8a:	b108      	cbz	r0, 8005f90 <_printf_i+0x1ec>
 8005f8c:	1b40      	subs	r0, r0, r5
 8005f8e:	6060      	str	r0, [r4, #4]
 8005f90:	6863      	ldr	r3, [r4, #4]
 8005f92:	6123      	str	r3, [r4, #16]
 8005f94:	2300      	movs	r3, #0
 8005f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f9a:	e7aa      	b.n	8005ef2 <_printf_i+0x14e>
 8005f9c:	462a      	mov	r2, r5
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	4640      	mov	r0, r8
 8005fa2:	6923      	ldr	r3, [r4, #16]
 8005fa4:	47d0      	blx	sl
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	d0ad      	beq.n	8005f06 <_printf_i+0x162>
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	079b      	lsls	r3, r3, #30
 8005fae:	d413      	bmi.n	8005fd8 <_printf_i+0x234>
 8005fb0:	68e0      	ldr	r0, [r4, #12]
 8005fb2:	9b03      	ldr	r3, [sp, #12]
 8005fb4:	4298      	cmp	r0, r3
 8005fb6:	bfb8      	it	lt
 8005fb8:	4618      	movlt	r0, r3
 8005fba:	e7a6      	b.n	8005f0a <_printf_i+0x166>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	4632      	mov	r2, r6
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	4640      	mov	r0, r8
 8005fc4:	47d0      	blx	sl
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d09d      	beq.n	8005f06 <_printf_i+0x162>
 8005fca:	3501      	adds	r5, #1
 8005fcc:	68e3      	ldr	r3, [r4, #12]
 8005fce:	9903      	ldr	r1, [sp, #12]
 8005fd0:	1a5b      	subs	r3, r3, r1
 8005fd2:	42ab      	cmp	r3, r5
 8005fd4:	dcf2      	bgt.n	8005fbc <_printf_i+0x218>
 8005fd6:	e7eb      	b.n	8005fb0 <_printf_i+0x20c>
 8005fd8:	2500      	movs	r5, #0
 8005fda:	f104 0619 	add.w	r6, r4, #25
 8005fde:	e7f5      	b.n	8005fcc <_printf_i+0x228>
 8005fe0:	0800a67c 	.word	0x0800a67c
 8005fe4:	0800a68d 	.word	0x0800a68d

08005fe8 <std>:
 8005fe8:	2300      	movs	r3, #0
 8005fea:	b510      	push	{r4, lr}
 8005fec:	4604      	mov	r4, r0
 8005fee:	e9c0 3300 	strd	r3, r3, [r0]
 8005ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ff6:	6083      	str	r3, [r0, #8]
 8005ff8:	8181      	strh	r1, [r0, #12]
 8005ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8005ffc:	81c2      	strh	r2, [r0, #14]
 8005ffe:	6183      	str	r3, [r0, #24]
 8006000:	4619      	mov	r1, r3
 8006002:	2208      	movs	r2, #8
 8006004:	305c      	adds	r0, #92	; 0x5c
 8006006:	f000 f914 	bl	8006232 <memset>
 800600a:	4b0d      	ldr	r3, [pc, #52]	; (8006040 <std+0x58>)
 800600c:	6224      	str	r4, [r4, #32]
 800600e:	6263      	str	r3, [r4, #36]	; 0x24
 8006010:	4b0c      	ldr	r3, [pc, #48]	; (8006044 <std+0x5c>)
 8006012:	62a3      	str	r3, [r4, #40]	; 0x28
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <std+0x60>)
 8006016:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006018:	4b0c      	ldr	r3, [pc, #48]	; (800604c <std+0x64>)
 800601a:	6323      	str	r3, [r4, #48]	; 0x30
 800601c:	4b0c      	ldr	r3, [pc, #48]	; (8006050 <std+0x68>)
 800601e:	429c      	cmp	r4, r3
 8006020:	d006      	beq.n	8006030 <std+0x48>
 8006022:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006026:	4294      	cmp	r4, r2
 8006028:	d002      	beq.n	8006030 <std+0x48>
 800602a:	33d0      	adds	r3, #208	; 0xd0
 800602c:	429c      	cmp	r4, r3
 800602e:	d105      	bne.n	800603c <std+0x54>
 8006030:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006038:	f000 b978 	b.w	800632c <__retarget_lock_init_recursive>
 800603c:	bd10      	pop	{r4, pc}
 800603e:	bf00      	nop
 8006040:	080061ad 	.word	0x080061ad
 8006044:	080061cf 	.word	0x080061cf
 8006048:	08006207 	.word	0x08006207
 800604c:	0800622b 	.word	0x0800622b
 8006050:	20000434 	.word	0x20000434

08006054 <stdio_exit_handler>:
 8006054:	4a02      	ldr	r2, [pc, #8]	; (8006060 <stdio_exit_handler+0xc>)
 8006056:	4903      	ldr	r1, [pc, #12]	; (8006064 <stdio_exit_handler+0x10>)
 8006058:	4803      	ldr	r0, [pc, #12]	; (8006068 <stdio_exit_handler+0x14>)
 800605a:	f000 b869 	b.w	8006130 <_fwalk_sglue>
 800605e:	bf00      	nop
 8006060:	20000024 	.word	0x20000024
 8006064:	08007ce5 	.word	0x08007ce5
 8006068:	20000030 	.word	0x20000030

0800606c <cleanup_stdio>:
 800606c:	6841      	ldr	r1, [r0, #4]
 800606e:	4b0c      	ldr	r3, [pc, #48]	; (80060a0 <cleanup_stdio+0x34>)
 8006070:	b510      	push	{r4, lr}
 8006072:	4299      	cmp	r1, r3
 8006074:	4604      	mov	r4, r0
 8006076:	d001      	beq.n	800607c <cleanup_stdio+0x10>
 8006078:	f001 fe34 	bl	8007ce4 <_fflush_r>
 800607c:	68a1      	ldr	r1, [r4, #8]
 800607e:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <cleanup_stdio+0x38>)
 8006080:	4299      	cmp	r1, r3
 8006082:	d002      	beq.n	800608a <cleanup_stdio+0x1e>
 8006084:	4620      	mov	r0, r4
 8006086:	f001 fe2d 	bl	8007ce4 <_fflush_r>
 800608a:	68e1      	ldr	r1, [r4, #12]
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <cleanup_stdio+0x3c>)
 800608e:	4299      	cmp	r1, r3
 8006090:	d004      	beq.n	800609c <cleanup_stdio+0x30>
 8006092:	4620      	mov	r0, r4
 8006094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006098:	f001 be24 	b.w	8007ce4 <_fflush_r>
 800609c:	bd10      	pop	{r4, pc}
 800609e:	bf00      	nop
 80060a0:	20000434 	.word	0x20000434
 80060a4:	2000049c 	.word	0x2000049c
 80060a8:	20000504 	.word	0x20000504

080060ac <global_stdio_init.part.0>:
 80060ac:	b510      	push	{r4, lr}
 80060ae:	4b0b      	ldr	r3, [pc, #44]	; (80060dc <global_stdio_init.part.0+0x30>)
 80060b0:	4c0b      	ldr	r4, [pc, #44]	; (80060e0 <global_stdio_init.part.0+0x34>)
 80060b2:	4a0c      	ldr	r2, [pc, #48]	; (80060e4 <global_stdio_init.part.0+0x38>)
 80060b4:	4620      	mov	r0, r4
 80060b6:	601a      	str	r2, [r3, #0]
 80060b8:	2104      	movs	r1, #4
 80060ba:	2200      	movs	r2, #0
 80060bc:	f7ff ff94 	bl	8005fe8 <std>
 80060c0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80060c4:	2201      	movs	r2, #1
 80060c6:	2109      	movs	r1, #9
 80060c8:	f7ff ff8e 	bl	8005fe8 <std>
 80060cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80060d0:	2202      	movs	r2, #2
 80060d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060d6:	2112      	movs	r1, #18
 80060d8:	f7ff bf86 	b.w	8005fe8 <std>
 80060dc:	2000056c 	.word	0x2000056c
 80060e0:	20000434 	.word	0x20000434
 80060e4:	08006055 	.word	0x08006055

080060e8 <__sfp_lock_acquire>:
 80060e8:	4801      	ldr	r0, [pc, #4]	; (80060f0 <__sfp_lock_acquire+0x8>)
 80060ea:	f000 b920 	b.w	800632e <__retarget_lock_acquire_recursive>
 80060ee:	bf00      	nop
 80060f0:	20000575 	.word	0x20000575

080060f4 <__sfp_lock_release>:
 80060f4:	4801      	ldr	r0, [pc, #4]	; (80060fc <__sfp_lock_release+0x8>)
 80060f6:	f000 b91b 	b.w	8006330 <__retarget_lock_release_recursive>
 80060fa:	bf00      	nop
 80060fc:	20000575 	.word	0x20000575

08006100 <__sinit>:
 8006100:	b510      	push	{r4, lr}
 8006102:	4604      	mov	r4, r0
 8006104:	f7ff fff0 	bl	80060e8 <__sfp_lock_acquire>
 8006108:	6a23      	ldr	r3, [r4, #32]
 800610a:	b11b      	cbz	r3, 8006114 <__sinit+0x14>
 800610c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006110:	f7ff bff0 	b.w	80060f4 <__sfp_lock_release>
 8006114:	4b04      	ldr	r3, [pc, #16]	; (8006128 <__sinit+0x28>)
 8006116:	6223      	str	r3, [r4, #32]
 8006118:	4b04      	ldr	r3, [pc, #16]	; (800612c <__sinit+0x2c>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d1f5      	bne.n	800610c <__sinit+0xc>
 8006120:	f7ff ffc4 	bl	80060ac <global_stdio_init.part.0>
 8006124:	e7f2      	b.n	800610c <__sinit+0xc>
 8006126:	bf00      	nop
 8006128:	0800606d 	.word	0x0800606d
 800612c:	2000056c 	.word	0x2000056c

08006130 <_fwalk_sglue>:
 8006130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006134:	4607      	mov	r7, r0
 8006136:	4688      	mov	r8, r1
 8006138:	4614      	mov	r4, r2
 800613a:	2600      	movs	r6, #0
 800613c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006140:	f1b9 0901 	subs.w	r9, r9, #1
 8006144:	d505      	bpl.n	8006152 <_fwalk_sglue+0x22>
 8006146:	6824      	ldr	r4, [r4, #0]
 8006148:	2c00      	cmp	r4, #0
 800614a:	d1f7      	bne.n	800613c <_fwalk_sglue+0xc>
 800614c:	4630      	mov	r0, r6
 800614e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d907      	bls.n	8006168 <_fwalk_sglue+0x38>
 8006158:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800615c:	3301      	adds	r3, #1
 800615e:	d003      	beq.n	8006168 <_fwalk_sglue+0x38>
 8006160:	4629      	mov	r1, r5
 8006162:	4638      	mov	r0, r7
 8006164:	47c0      	blx	r8
 8006166:	4306      	orrs	r6, r0
 8006168:	3568      	adds	r5, #104	; 0x68
 800616a:	e7e9      	b.n	8006140 <_fwalk_sglue+0x10>

0800616c <siprintf>:
 800616c:	b40e      	push	{r1, r2, r3}
 800616e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006172:	b500      	push	{lr}
 8006174:	b09c      	sub	sp, #112	; 0x70
 8006176:	ab1d      	add	r3, sp, #116	; 0x74
 8006178:	9002      	str	r0, [sp, #8]
 800617a:	9006      	str	r0, [sp, #24]
 800617c:	9107      	str	r1, [sp, #28]
 800617e:	9104      	str	r1, [sp, #16]
 8006180:	4808      	ldr	r0, [pc, #32]	; (80061a4 <siprintf+0x38>)
 8006182:	4909      	ldr	r1, [pc, #36]	; (80061a8 <siprintf+0x3c>)
 8006184:	f853 2b04 	ldr.w	r2, [r3], #4
 8006188:	9105      	str	r1, [sp, #20]
 800618a:	6800      	ldr	r0, [r0, #0]
 800618c:	a902      	add	r1, sp, #8
 800618e:	9301      	str	r3, [sp, #4]
 8006190:	f001 fc28 	bl	80079e4 <_svfiprintf_r>
 8006194:	2200      	movs	r2, #0
 8006196:	9b02      	ldr	r3, [sp, #8]
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	b01c      	add	sp, #112	; 0x70
 800619c:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a0:	b003      	add	sp, #12
 80061a2:	4770      	bx	lr
 80061a4:	2000007c 	.word	0x2000007c
 80061a8:	ffff0208 	.word	0xffff0208

080061ac <__sread>:
 80061ac:	b510      	push	{r4, lr}
 80061ae:	460c      	mov	r4, r1
 80061b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b4:	f000 f86c 	bl	8006290 <_read_r>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	bfab      	itete	ge
 80061bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061be:	89a3      	ldrhlt	r3, [r4, #12]
 80061c0:	181b      	addge	r3, r3, r0
 80061c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061c6:	bfac      	ite	ge
 80061c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80061ca:	81a3      	strhlt	r3, [r4, #12]
 80061cc:	bd10      	pop	{r4, pc}

080061ce <__swrite>:
 80061ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061d2:	461f      	mov	r7, r3
 80061d4:	898b      	ldrh	r3, [r1, #12]
 80061d6:	4605      	mov	r5, r0
 80061d8:	05db      	lsls	r3, r3, #23
 80061da:	460c      	mov	r4, r1
 80061dc:	4616      	mov	r6, r2
 80061de:	d505      	bpl.n	80061ec <__swrite+0x1e>
 80061e0:	2302      	movs	r3, #2
 80061e2:	2200      	movs	r2, #0
 80061e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e8:	f000 f840 	bl	800626c <_lseek_r>
 80061ec:	89a3      	ldrh	r3, [r4, #12]
 80061ee:	4632      	mov	r2, r6
 80061f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061f4:	81a3      	strh	r3, [r4, #12]
 80061f6:	4628      	mov	r0, r5
 80061f8:	463b      	mov	r3, r7
 80061fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006202:	f000 b857 	b.w	80062b4 <_write_r>

08006206 <__sseek>:
 8006206:	b510      	push	{r4, lr}
 8006208:	460c      	mov	r4, r1
 800620a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620e:	f000 f82d 	bl	800626c <_lseek_r>
 8006212:	1c43      	adds	r3, r0, #1
 8006214:	89a3      	ldrh	r3, [r4, #12]
 8006216:	bf15      	itete	ne
 8006218:	6560      	strne	r0, [r4, #84]	; 0x54
 800621a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800621e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006222:	81a3      	strheq	r3, [r4, #12]
 8006224:	bf18      	it	ne
 8006226:	81a3      	strhne	r3, [r4, #12]
 8006228:	bd10      	pop	{r4, pc}

0800622a <__sclose>:
 800622a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800622e:	f000 b80d 	b.w	800624c <_close_r>

08006232 <memset>:
 8006232:	4603      	mov	r3, r0
 8006234:	4402      	add	r2, r0
 8006236:	4293      	cmp	r3, r2
 8006238:	d100      	bne.n	800623c <memset+0xa>
 800623a:	4770      	bx	lr
 800623c:	f803 1b01 	strb.w	r1, [r3], #1
 8006240:	e7f9      	b.n	8006236 <memset+0x4>
	...

08006244 <_localeconv_r>:
 8006244:	4800      	ldr	r0, [pc, #0]	; (8006248 <_localeconv_r+0x4>)
 8006246:	4770      	bx	lr
 8006248:	20000170 	.word	0x20000170

0800624c <_close_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	2300      	movs	r3, #0
 8006250:	4d05      	ldr	r5, [pc, #20]	; (8006268 <_close_r+0x1c>)
 8006252:	4604      	mov	r4, r0
 8006254:	4608      	mov	r0, r1
 8006256:	602b      	str	r3, [r5, #0]
 8006258:	f7fc f9b8 	bl	80025cc <_close>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_close_r+0x1a>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_close_r+0x1a>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	20000570 	.word	0x20000570

0800626c <_lseek_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4604      	mov	r4, r0
 8006270:	4608      	mov	r0, r1
 8006272:	4611      	mov	r1, r2
 8006274:	2200      	movs	r2, #0
 8006276:	4d05      	ldr	r5, [pc, #20]	; (800628c <_lseek_r+0x20>)
 8006278:	602a      	str	r2, [r5, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	f7fc f9ca 	bl	8002614 <_lseek>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_lseek_r+0x1e>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b103      	cbz	r3, 800628a <_lseek_r+0x1e>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	20000570 	.word	0x20000570

08006290 <_read_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4604      	mov	r4, r0
 8006294:	4608      	mov	r0, r1
 8006296:	4611      	mov	r1, r2
 8006298:	2200      	movs	r2, #0
 800629a:	4d05      	ldr	r5, [pc, #20]	; (80062b0 <_read_r+0x20>)
 800629c:	602a      	str	r2, [r5, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f7fc f95b 	bl	800255a <_read>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_read_r+0x1e>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_read_r+0x1e>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	20000570 	.word	0x20000570

080062b4 <_write_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4604      	mov	r4, r0
 80062b8:	4608      	mov	r0, r1
 80062ba:	4611      	mov	r1, r2
 80062bc:	2200      	movs	r2, #0
 80062be:	4d05      	ldr	r5, [pc, #20]	; (80062d4 <_write_r+0x20>)
 80062c0:	602a      	str	r2, [r5, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f7fc f966 	bl	8002594 <_write>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_write_r+0x1e>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_write_r+0x1e>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	20000570 	.word	0x20000570

080062d8 <__errno>:
 80062d8:	4b01      	ldr	r3, [pc, #4]	; (80062e0 <__errno+0x8>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	2000007c 	.word	0x2000007c

080062e4 <__libc_init_array>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	2600      	movs	r6, #0
 80062e8:	4d0c      	ldr	r5, [pc, #48]	; (800631c <__libc_init_array+0x38>)
 80062ea:	4c0d      	ldr	r4, [pc, #52]	; (8006320 <__libc_init_array+0x3c>)
 80062ec:	1b64      	subs	r4, r4, r5
 80062ee:	10a4      	asrs	r4, r4, #2
 80062f0:	42a6      	cmp	r6, r4
 80062f2:	d109      	bne.n	8006308 <__libc_init_array+0x24>
 80062f4:	f002 f888 	bl	8008408 <_init>
 80062f8:	2600      	movs	r6, #0
 80062fa:	4d0a      	ldr	r5, [pc, #40]	; (8006324 <__libc_init_array+0x40>)
 80062fc:	4c0a      	ldr	r4, [pc, #40]	; (8006328 <__libc_init_array+0x44>)
 80062fe:	1b64      	subs	r4, r4, r5
 8006300:	10a4      	asrs	r4, r4, #2
 8006302:	42a6      	cmp	r6, r4
 8006304:	d105      	bne.n	8006312 <__libc_init_array+0x2e>
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	f855 3b04 	ldr.w	r3, [r5], #4
 800630c:	4798      	blx	r3
 800630e:	3601      	adds	r6, #1
 8006310:	e7ee      	b.n	80062f0 <__libc_init_array+0xc>
 8006312:	f855 3b04 	ldr.w	r3, [r5], #4
 8006316:	4798      	blx	r3
 8006318:	3601      	adds	r6, #1
 800631a:	e7f2      	b.n	8006302 <__libc_init_array+0x1e>
 800631c:	0800a9dc 	.word	0x0800a9dc
 8006320:	0800a9dc 	.word	0x0800a9dc
 8006324:	0800a9dc 	.word	0x0800a9dc
 8006328:	0800a9e0 	.word	0x0800a9e0

0800632c <__retarget_lock_init_recursive>:
 800632c:	4770      	bx	lr

0800632e <__retarget_lock_acquire_recursive>:
 800632e:	4770      	bx	lr

08006330 <__retarget_lock_release_recursive>:
 8006330:	4770      	bx	lr

08006332 <memchr>:
 8006332:	4603      	mov	r3, r0
 8006334:	b510      	push	{r4, lr}
 8006336:	b2c9      	uxtb	r1, r1
 8006338:	4402      	add	r2, r0
 800633a:	4293      	cmp	r3, r2
 800633c:	4618      	mov	r0, r3
 800633e:	d101      	bne.n	8006344 <memchr+0x12>
 8006340:	2000      	movs	r0, #0
 8006342:	e003      	b.n	800634c <memchr+0x1a>
 8006344:	7804      	ldrb	r4, [r0, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	428c      	cmp	r4, r1
 800634a:	d1f6      	bne.n	800633a <memchr+0x8>
 800634c:	bd10      	pop	{r4, pc}

0800634e <memcpy>:
 800634e:	440a      	add	r2, r1
 8006350:	4291      	cmp	r1, r2
 8006352:	f100 33ff 	add.w	r3, r0, #4294967295
 8006356:	d100      	bne.n	800635a <memcpy+0xc>
 8006358:	4770      	bx	lr
 800635a:	b510      	push	{r4, lr}
 800635c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006360:	4291      	cmp	r1, r2
 8006362:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006366:	d1f9      	bne.n	800635c <memcpy+0xe>
 8006368:	bd10      	pop	{r4, pc}

0800636a <quorem>:
 800636a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800636e:	6903      	ldr	r3, [r0, #16]
 8006370:	690c      	ldr	r4, [r1, #16]
 8006372:	4607      	mov	r7, r0
 8006374:	42a3      	cmp	r3, r4
 8006376:	db7f      	blt.n	8006478 <quorem+0x10e>
 8006378:	3c01      	subs	r4, #1
 800637a:	f100 0514 	add.w	r5, r0, #20
 800637e:	f101 0814 	add.w	r8, r1, #20
 8006382:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800638c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006390:	3301      	adds	r3, #1
 8006392:	429a      	cmp	r2, r3
 8006394:	fbb2 f6f3 	udiv	r6, r2, r3
 8006398:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800639c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063a0:	d331      	bcc.n	8006406 <quorem+0x9c>
 80063a2:	f04f 0e00 	mov.w	lr, #0
 80063a6:	4640      	mov	r0, r8
 80063a8:	46ac      	mov	ip, r5
 80063aa:	46f2      	mov	sl, lr
 80063ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80063b0:	b293      	uxth	r3, r2
 80063b2:	fb06 e303 	mla	r3, r6, r3, lr
 80063b6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063ba:	0c1a      	lsrs	r2, r3, #16
 80063bc:	b29b      	uxth	r3, r3
 80063be:	fb06 220e 	mla	r2, r6, lr, r2
 80063c2:	ebaa 0303 	sub.w	r3, sl, r3
 80063c6:	f8dc a000 	ldr.w	sl, [ip]
 80063ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063ce:	fa1f fa8a 	uxth.w	sl, sl
 80063d2:	4453      	add	r3, sl
 80063d4:	f8dc a000 	ldr.w	sl, [ip]
 80063d8:	b292      	uxth	r2, r2
 80063da:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80063de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063e8:	4581      	cmp	r9, r0
 80063ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80063ee:	f84c 3b04 	str.w	r3, [ip], #4
 80063f2:	d2db      	bcs.n	80063ac <quorem+0x42>
 80063f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80063f8:	b92b      	cbnz	r3, 8006406 <quorem+0x9c>
 80063fa:	9b01      	ldr	r3, [sp, #4]
 80063fc:	3b04      	subs	r3, #4
 80063fe:	429d      	cmp	r5, r3
 8006400:	461a      	mov	r2, r3
 8006402:	d32d      	bcc.n	8006460 <quorem+0xf6>
 8006404:	613c      	str	r4, [r7, #16]
 8006406:	4638      	mov	r0, r7
 8006408:	f001 f994 	bl	8007734 <__mcmp>
 800640c:	2800      	cmp	r0, #0
 800640e:	db23      	blt.n	8006458 <quorem+0xee>
 8006410:	4629      	mov	r1, r5
 8006412:	2000      	movs	r0, #0
 8006414:	3601      	adds	r6, #1
 8006416:	f858 2b04 	ldr.w	r2, [r8], #4
 800641a:	f8d1 c000 	ldr.w	ip, [r1]
 800641e:	b293      	uxth	r3, r2
 8006420:	1ac3      	subs	r3, r0, r3
 8006422:	0c12      	lsrs	r2, r2, #16
 8006424:	fa1f f08c 	uxth.w	r0, ip
 8006428:	4403      	add	r3, r0
 800642a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800642e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006432:	b29b      	uxth	r3, r3
 8006434:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006438:	45c1      	cmp	r9, r8
 800643a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800643e:	f841 3b04 	str.w	r3, [r1], #4
 8006442:	d2e8      	bcs.n	8006416 <quorem+0xac>
 8006444:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006448:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800644c:	b922      	cbnz	r2, 8006458 <quorem+0xee>
 800644e:	3b04      	subs	r3, #4
 8006450:	429d      	cmp	r5, r3
 8006452:	461a      	mov	r2, r3
 8006454:	d30a      	bcc.n	800646c <quorem+0x102>
 8006456:	613c      	str	r4, [r7, #16]
 8006458:	4630      	mov	r0, r6
 800645a:	b003      	add	sp, #12
 800645c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006460:	6812      	ldr	r2, [r2, #0]
 8006462:	3b04      	subs	r3, #4
 8006464:	2a00      	cmp	r2, #0
 8006466:	d1cd      	bne.n	8006404 <quorem+0x9a>
 8006468:	3c01      	subs	r4, #1
 800646a:	e7c8      	b.n	80063fe <quorem+0x94>
 800646c:	6812      	ldr	r2, [r2, #0]
 800646e:	3b04      	subs	r3, #4
 8006470:	2a00      	cmp	r2, #0
 8006472:	d1f0      	bne.n	8006456 <quorem+0xec>
 8006474:	3c01      	subs	r4, #1
 8006476:	e7eb      	b.n	8006450 <quorem+0xe6>
 8006478:	2000      	movs	r0, #0
 800647a:	e7ee      	b.n	800645a <quorem+0xf0>
 800647c:	0000      	movs	r0, r0
	...

08006480 <_dtoa_r>:
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	4616      	mov	r6, r2
 8006486:	461f      	mov	r7, r3
 8006488:	69c4      	ldr	r4, [r0, #28]
 800648a:	b099      	sub	sp, #100	; 0x64
 800648c:	4605      	mov	r5, r0
 800648e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006492:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006496:	b974      	cbnz	r4, 80064b6 <_dtoa_r+0x36>
 8006498:	2010      	movs	r0, #16
 800649a:	f000 fe1d 	bl	80070d8 <malloc>
 800649e:	4602      	mov	r2, r0
 80064a0:	61e8      	str	r0, [r5, #28]
 80064a2:	b920      	cbnz	r0, 80064ae <_dtoa_r+0x2e>
 80064a4:	21ef      	movs	r1, #239	; 0xef
 80064a6:	4bac      	ldr	r3, [pc, #688]	; (8006758 <_dtoa_r+0x2d8>)
 80064a8:	48ac      	ldr	r0, [pc, #688]	; (800675c <_dtoa_r+0x2dc>)
 80064aa:	f001 fc6d 	bl	8007d88 <__assert_func>
 80064ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064b2:	6004      	str	r4, [r0, #0]
 80064b4:	60c4      	str	r4, [r0, #12]
 80064b6:	69eb      	ldr	r3, [r5, #28]
 80064b8:	6819      	ldr	r1, [r3, #0]
 80064ba:	b151      	cbz	r1, 80064d2 <_dtoa_r+0x52>
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	2301      	movs	r3, #1
 80064c0:	4093      	lsls	r3, r2
 80064c2:	604a      	str	r2, [r1, #4]
 80064c4:	608b      	str	r3, [r1, #8]
 80064c6:	4628      	mov	r0, r5
 80064c8:	f000 fefa 	bl	80072c0 <_Bfree>
 80064cc:	2200      	movs	r2, #0
 80064ce:	69eb      	ldr	r3, [r5, #28]
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	1e3b      	subs	r3, r7, #0
 80064d4:	bfaf      	iteee	ge
 80064d6:	2300      	movge	r3, #0
 80064d8:	2201      	movlt	r2, #1
 80064da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064de:	9305      	strlt	r3, [sp, #20]
 80064e0:	bfa8      	it	ge
 80064e2:	f8c8 3000 	strge.w	r3, [r8]
 80064e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80064ea:	4b9d      	ldr	r3, [pc, #628]	; (8006760 <_dtoa_r+0x2e0>)
 80064ec:	bfb8      	it	lt
 80064ee:	f8c8 2000 	strlt.w	r2, [r8]
 80064f2:	ea33 0309 	bics.w	r3, r3, r9
 80064f6:	d119      	bne.n	800652c <_dtoa_r+0xac>
 80064f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80064fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006504:	4333      	orrs	r3, r6
 8006506:	f000 8589 	beq.w	800701c <_dtoa_r+0xb9c>
 800650a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800650c:	b953      	cbnz	r3, 8006524 <_dtoa_r+0xa4>
 800650e:	4b95      	ldr	r3, [pc, #596]	; (8006764 <_dtoa_r+0x2e4>)
 8006510:	e023      	b.n	800655a <_dtoa_r+0xda>
 8006512:	4b95      	ldr	r3, [pc, #596]	; (8006768 <_dtoa_r+0x2e8>)
 8006514:	9303      	str	r3, [sp, #12]
 8006516:	3308      	adds	r3, #8
 8006518:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	9803      	ldr	r0, [sp, #12]
 800651e:	b019      	add	sp, #100	; 0x64
 8006520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006524:	4b8f      	ldr	r3, [pc, #572]	; (8006764 <_dtoa_r+0x2e4>)
 8006526:	9303      	str	r3, [sp, #12]
 8006528:	3303      	adds	r3, #3
 800652a:	e7f5      	b.n	8006518 <_dtoa_r+0x98>
 800652c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006530:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006534:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006538:	2200      	movs	r2, #0
 800653a:	2300      	movs	r3, #0
 800653c:	f7fa fa34 	bl	80009a8 <__aeabi_dcmpeq>
 8006540:	4680      	mov	r8, r0
 8006542:	b160      	cbz	r0, 800655e <_dtoa_r+0xde>
 8006544:	2301      	movs	r3, #1
 8006546:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 8562 	beq.w	8007016 <_dtoa_r+0xb96>
 8006552:	4b86      	ldr	r3, [pc, #536]	; (800676c <_dtoa_r+0x2ec>)
 8006554:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006556:	6013      	str	r3, [r2, #0]
 8006558:	3b01      	subs	r3, #1
 800655a:	9303      	str	r3, [sp, #12]
 800655c:	e7de      	b.n	800651c <_dtoa_r+0x9c>
 800655e:	ab16      	add	r3, sp, #88	; 0x58
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	ab17      	add	r3, sp, #92	; 0x5c
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	4628      	mov	r0, r5
 8006568:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800656c:	f001 f98a 	bl	8007884 <__d2b>
 8006570:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006574:	4682      	mov	sl, r0
 8006576:	2c00      	cmp	r4, #0
 8006578:	d07e      	beq.n	8006678 <_dtoa_r+0x1f8>
 800657a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800657e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006580:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006588:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800658c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006590:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006594:	4619      	mov	r1, r3
 8006596:	2200      	movs	r2, #0
 8006598:	4b75      	ldr	r3, [pc, #468]	; (8006770 <_dtoa_r+0x2f0>)
 800659a:	f7f9 fde5 	bl	8000168 <__aeabi_dsub>
 800659e:	a368      	add	r3, pc, #416	; (adr r3, 8006740 <_dtoa_r+0x2c0>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f7f9 ff98 	bl	80004d8 <__aeabi_dmul>
 80065a8:	a367      	add	r3, pc, #412	; (adr r3, 8006748 <_dtoa_r+0x2c8>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f7f9 fddd 	bl	800016c <__adddf3>
 80065b2:	4606      	mov	r6, r0
 80065b4:	4620      	mov	r0, r4
 80065b6:	460f      	mov	r7, r1
 80065b8:	f7f9 ff24 	bl	8000404 <__aeabi_i2d>
 80065bc:	a364      	add	r3, pc, #400	; (adr r3, 8006750 <_dtoa_r+0x2d0>)
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f7f9 ff89 	bl	80004d8 <__aeabi_dmul>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4630      	mov	r0, r6
 80065cc:	4639      	mov	r1, r7
 80065ce:	f7f9 fdcd 	bl	800016c <__adddf3>
 80065d2:	4606      	mov	r6, r0
 80065d4:	460f      	mov	r7, r1
 80065d6:	f7fa fa2f 	bl	8000a38 <__aeabi_d2iz>
 80065da:	2200      	movs	r2, #0
 80065dc:	4683      	mov	fp, r0
 80065de:	2300      	movs	r3, #0
 80065e0:	4630      	mov	r0, r6
 80065e2:	4639      	mov	r1, r7
 80065e4:	f7fa f9ea 	bl	80009bc <__aeabi_dcmplt>
 80065e8:	b148      	cbz	r0, 80065fe <_dtoa_r+0x17e>
 80065ea:	4658      	mov	r0, fp
 80065ec:	f7f9 ff0a 	bl	8000404 <__aeabi_i2d>
 80065f0:	4632      	mov	r2, r6
 80065f2:	463b      	mov	r3, r7
 80065f4:	f7fa f9d8 	bl	80009a8 <__aeabi_dcmpeq>
 80065f8:	b908      	cbnz	r0, 80065fe <_dtoa_r+0x17e>
 80065fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065fe:	f1bb 0f16 	cmp.w	fp, #22
 8006602:	d857      	bhi.n	80066b4 <_dtoa_r+0x234>
 8006604:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006608:	4b5a      	ldr	r3, [pc, #360]	; (8006774 <_dtoa_r+0x2f4>)
 800660a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f7fa f9d3 	bl	80009bc <__aeabi_dcmplt>
 8006616:	2800      	cmp	r0, #0
 8006618:	d04e      	beq.n	80066b8 <_dtoa_r+0x238>
 800661a:	2300      	movs	r3, #0
 800661c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006620:	930f      	str	r3, [sp, #60]	; 0x3c
 8006622:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006624:	1b1b      	subs	r3, r3, r4
 8006626:	1e5a      	subs	r2, r3, #1
 8006628:	bf46      	itte	mi
 800662a:	f1c3 0901 	rsbmi	r9, r3, #1
 800662e:	2300      	movmi	r3, #0
 8006630:	f04f 0900 	movpl.w	r9, #0
 8006634:	9209      	str	r2, [sp, #36]	; 0x24
 8006636:	bf48      	it	mi
 8006638:	9309      	strmi	r3, [sp, #36]	; 0x24
 800663a:	f1bb 0f00 	cmp.w	fp, #0
 800663e:	db3d      	blt.n	80066bc <_dtoa_r+0x23c>
 8006640:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006642:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006646:	445b      	add	r3, fp
 8006648:	9309      	str	r3, [sp, #36]	; 0x24
 800664a:	2300      	movs	r3, #0
 800664c:	930a      	str	r3, [sp, #40]	; 0x28
 800664e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006650:	2b09      	cmp	r3, #9
 8006652:	d867      	bhi.n	8006724 <_dtoa_r+0x2a4>
 8006654:	2b05      	cmp	r3, #5
 8006656:	bfc4      	itt	gt
 8006658:	3b04      	subgt	r3, #4
 800665a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800665c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800665e:	bfc8      	it	gt
 8006660:	2400      	movgt	r4, #0
 8006662:	f1a3 0302 	sub.w	r3, r3, #2
 8006666:	bfd8      	it	le
 8006668:	2401      	movle	r4, #1
 800666a:	2b03      	cmp	r3, #3
 800666c:	f200 8086 	bhi.w	800677c <_dtoa_r+0x2fc>
 8006670:	e8df f003 	tbb	[pc, r3]
 8006674:	5637392c 	.word	0x5637392c
 8006678:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800667c:	441c      	add	r4, r3
 800667e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006682:	2b20      	cmp	r3, #32
 8006684:	bfc1      	itttt	gt
 8006686:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800668a:	fa09 f903 	lslgt.w	r9, r9, r3
 800668e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006692:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006696:	bfd6      	itet	le
 8006698:	f1c3 0320 	rsble	r3, r3, #32
 800669c:	ea49 0003 	orrgt.w	r0, r9, r3
 80066a0:	fa06 f003 	lslle.w	r0, r6, r3
 80066a4:	f7f9 fe9e 	bl	80003e4 <__aeabi_ui2d>
 80066a8:	2201      	movs	r2, #1
 80066aa:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80066ae:	3c01      	subs	r4, #1
 80066b0:	9213      	str	r2, [sp, #76]	; 0x4c
 80066b2:	e76f      	b.n	8006594 <_dtoa_r+0x114>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e7b3      	b.n	8006620 <_dtoa_r+0x1a0>
 80066b8:	900f      	str	r0, [sp, #60]	; 0x3c
 80066ba:	e7b2      	b.n	8006622 <_dtoa_r+0x1a2>
 80066bc:	f1cb 0300 	rsb	r3, fp, #0
 80066c0:	930a      	str	r3, [sp, #40]	; 0x28
 80066c2:	2300      	movs	r3, #0
 80066c4:	eba9 090b 	sub.w	r9, r9, fp
 80066c8:	930e      	str	r3, [sp, #56]	; 0x38
 80066ca:	e7c0      	b.n	800664e <_dtoa_r+0x1ce>
 80066cc:	2300      	movs	r3, #0
 80066ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80066d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	dc55      	bgt.n	8006782 <_dtoa_r+0x302>
 80066d6:	2301      	movs	r3, #1
 80066d8:	461a      	mov	r2, r3
 80066da:	9306      	str	r3, [sp, #24]
 80066dc:	9308      	str	r3, [sp, #32]
 80066de:	9223      	str	r2, [sp, #140]	; 0x8c
 80066e0:	e00b      	b.n	80066fa <_dtoa_r+0x27a>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e7f3      	b.n	80066ce <_dtoa_r+0x24e>
 80066e6:	2300      	movs	r3, #0
 80066e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80066ea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066ec:	445b      	add	r3, fp
 80066ee:	9306      	str	r3, [sp, #24]
 80066f0:	3301      	adds	r3, #1
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	9308      	str	r3, [sp, #32]
 80066f6:	bfb8      	it	lt
 80066f8:	2301      	movlt	r3, #1
 80066fa:	2100      	movs	r1, #0
 80066fc:	2204      	movs	r2, #4
 80066fe:	69e8      	ldr	r0, [r5, #28]
 8006700:	f102 0614 	add.w	r6, r2, #20
 8006704:	429e      	cmp	r6, r3
 8006706:	d940      	bls.n	800678a <_dtoa_r+0x30a>
 8006708:	6041      	str	r1, [r0, #4]
 800670a:	4628      	mov	r0, r5
 800670c:	f000 fd98 	bl	8007240 <_Balloc>
 8006710:	9003      	str	r0, [sp, #12]
 8006712:	2800      	cmp	r0, #0
 8006714:	d13c      	bne.n	8006790 <_dtoa_r+0x310>
 8006716:	4602      	mov	r2, r0
 8006718:	f240 11af 	movw	r1, #431	; 0x1af
 800671c:	4b16      	ldr	r3, [pc, #88]	; (8006778 <_dtoa_r+0x2f8>)
 800671e:	e6c3      	b.n	80064a8 <_dtoa_r+0x28>
 8006720:	2301      	movs	r3, #1
 8006722:	e7e1      	b.n	80066e8 <_dtoa_r+0x268>
 8006724:	2401      	movs	r4, #1
 8006726:	2300      	movs	r3, #0
 8006728:	940b      	str	r4, [sp, #44]	; 0x2c
 800672a:	9322      	str	r3, [sp, #136]	; 0x88
 800672c:	f04f 33ff 	mov.w	r3, #4294967295
 8006730:	2200      	movs	r2, #0
 8006732:	9306      	str	r3, [sp, #24]
 8006734:	9308      	str	r3, [sp, #32]
 8006736:	2312      	movs	r3, #18
 8006738:	e7d1      	b.n	80066de <_dtoa_r+0x25e>
 800673a:	bf00      	nop
 800673c:	f3af 8000 	nop.w
 8006740:	636f4361 	.word	0x636f4361
 8006744:	3fd287a7 	.word	0x3fd287a7
 8006748:	8b60c8b3 	.word	0x8b60c8b3
 800674c:	3fc68a28 	.word	0x3fc68a28
 8006750:	509f79fb 	.word	0x509f79fb
 8006754:	3fd34413 	.word	0x3fd34413
 8006758:	0800a6ab 	.word	0x0800a6ab
 800675c:	0800a6c2 	.word	0x0800a6c2
 8006760:	7ff00000 	.word	0x7ff00000
 8006764:	0800a6a7 	.word	0x0800a6a7
 8006768:	0800a69e 	.word	0x0800a69e
 800676c:	0800a67b 	.word	0x0800a67b
 8006770:	3ff80000 	.word	0x3ff80000
 8006774:	0800a7b0 	.word	0x0800a7b0
 8006778:	0800a71a 	.word	0x0800a71a
 800677c:	2301      	movs	r3, #1
 800677e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006780:	e7d4      	b.n	800672c <_dtoa_r+0x2ac>
 8006782:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006784:	9306      	str	r3, [sp, #24]
 8006786:	9308      	str	r3, [sp, #32]
 8006788:	e7b7      	b.n	80066fa <_dtoa_r+0x27a>
 800678a:	3101      	adds	r1, #1
 800678c:	0052      	lsls	r2, r2, #1
 800678e:	e7b7      	b.n	8006700 <_dtoa_r+0x280>
 8006790:	69eb      	ldr	r3, [r5, #28]
 8006792:	9a03      	ldr	r2, [sp, #12]
 8006794:	601a      	str	r2, [r3, #0]
 8006796:	9b08      	ldr	r3, [sp, #32]
 8006798:	2b0e      	cmp	r3, #14
 800679a:	f200 80a8 	bhi.w	80068ee <_dtoa_r+0x46e>
 800679e:	2c00      	cmp	r4, #0
 80067a0:	f000 80a5 	beq.w	80068ee <_dtoa_r+0x46e>
 80067a4:	f1bb 0f00 	cmp.w	fp, #0
 80067a8:	dd34      	ble.n	8006814 <_dtoa_r+0x394>
 80067aa:	4b9a      	ldr	r3, [pc, #616]	; (8006a14 <_dtoa_r+0x594>)
 80067ac:	f00b 020f 	and.w	r2, fp, #15
 80067b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067b4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80067b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067bc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80067c0:	ea4f 142b 	mov.w	r4, fp, asr #4
 80067c4:	d016      	beq.n	80067f4 <_dtoa_r+0x374>
 80067c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067ca:	4b93      	ldr	r3, [pc, #588]	; (8006a18 <_dtoa_r+0x598>)
 80067cc:	2703      	movs	r7, #3
 80067ce:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067d2:	f7f9 ffab 	bl	800072c <__aeabi_ddiv>
 80067d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067da:	f004 040f 	and.w	r4, r4, #15
 80067de:	4e8e      	ldr	r6, [pc, #568]	; (8006a18 <_dtoa_r+0x598>)
 80067e0:	b954      	cbnz	r4, 80067f8 <_dtoa_r+0x378>
 80067e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80067e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067ea:	f7f9 ff9f 	bl	800072c <__aeabi_ddiv>
 80067ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067f2:	e029      	b.n	8006848 <_dtoa_r+0x3c8>
 80067f4:	2702      	movs	r7, #2
 80067f6:	e7f2      	b.n	80067de <_dtoa_r+0x35e>
 80067f8:	07e1      	lsls	r1, r4, #31
 80067fa:	d508      	bpl.n	800680e <_dtoa_r+0x38e>
 80067fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006800:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006804:	f7f9 fe68 	bl	80004d8 <__aeabi_dmul>
 8006808:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800680c:	3701      	adds	r7, #1
 800680e:	1064      	asrs	r4, r4, #1
 8006810:	3608      	adds	r6, #8
 8006812:	e7e5      	b.n	80067e0 <_dtoa_r+0x360>
 8006814:	f000 80a5 	beq.w	8006962 <_dtoa_r+0x4e2>
 8006818:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800681c:	f1cb 0400 	rsb	r4, fp, #0
 8006820:	4b7c      	ldr	r3, [pc, #496]	; (8006a14 <_dtoa_r+0x594>)
 8006822:	f004 020f 	and.w	r2, r4, #15
 8006826:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800682a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682e:	f7f9 fe53 	bl	80004d8 <__aeabi_dmul>
 8006832:	2702      	movs	r7, #2
 8006834:	2300      	movs	r3, #0
 8006836:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800683a:	4e77      	ldr	r6, [pc, #476]	; (8006a18 <_dtoa_r+0x598>)
 800683c:	1124      	asrs	r4, r4, #4
 800683e:	2c00      	cmp	r4, #0
 8006840:	f040 8084 	bne.w	800694c <_dtoa_r+0x4cc>
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1d2      	bne.n	80067ee <_dtoa_r+0x36e>
 8006848:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800684c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006850:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006852:	2b00      	cmp	r3, #0
 8006854:	f000 8087 	beq.w	8006966 <_dtoa_r+0x4e6>
 8006858:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800685c:	2200      	movs	r2, #0
 800685e:	4b6f      	ldr	r3, [pc, #444]	; (8006a1c <_dtoa_r+0x59c>)
 8006860:	f7fa f8ac 	bl	80009bc <__aeabi_dcmplt>
 8006864:	2800      	cmp	r0, #0
 8006866:	d07e      	beq.n	8006966 <_dtoa_r+0x4e6>
 8006868:	9b08      	ldr	r3, [sp, #32]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d07b      	beq.n	8006966 <_dtoa_r+0x4e6>
 800686e:	9b06      	ldr	r3, [sp, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	dd38      	ble.n	80068e6 <_dtoa_r+0x466>
 8006874:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006878:	2200      	movs	r2, #0
 800687a:	4b69      	ldr	r3, [pc, #420]	; (8006a20 <_dtoa_r+0x5a0>)
 800687c:	f7f9 fe2c 	bl	80004d8 <__aeabi_dmul>
 8006880:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006884:	9c06      	ldr	r4, [sp, #24]
 8006886:	f10b 38ff 	add.w	r8, fp, #4294967295
 800688a:	3701      	adds	r7, #1
 800688c:	4638      	mov	r0, r7
 800688e:	f7f9 fdb9 	bl	8000404 <__aeabi_i2d>
 8006892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006896:	f7f9 fe1f 	bl	80004d8 <__aeabi_dmul>
 800689a:	2200      	movs	r2, #0
 800689c:	4b61      	ldr	r3, [pc, #388]	; (8006a24 <_dtoa_r+0x5a4>)
 800689e:	f7f9 fc65 	bl	800016c <__adddf3>
 80068a2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80068a6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068aa:	9611      	str	r6, [sp, #68]	; 0x44
 80068ac:	2c00      	cmp	r4, #0
 80068ae:	d15d      	bne.n	800696c <_dtoa_r+0x4ec>
 80068b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b4:	2200      	movs	r2, #0
 80068b6:	4b5c      	ldr	r3, [pc, #368]	; (8006a28 <_dtoa_r+0x5a8>)
 80068b8:	f7f9 fc56 	bl	8000168 <__aeabi_dsub>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068c4:	4633      	mov	r3, r6
 80068c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068c8:	f7fa f896 	bl	80009f8 <__aeabi_dcmpgt>
 80068cc:	2800      	cmp	r0, #0
 80068ce:	f040 8295 	bne.w	8006dfc <_dtoa_r+0x97c>
 80068d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068d6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80068dc:	f7fa f86e 	bl	80009bc <__aeabi_dcmplt>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	f040 8289 	bne.w	8006df8 <_dtoa_r+0x978>
 80068e6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80068ea:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80068ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f2c0 8151 	blt.w	8006b98 <_dtoa_r+0x718>
 80068f6:	f1bb 0f0e 	cmp.w	fp, #14
 80068fa:	f300 814d 	bgt.w	8006b98 <_dtoa_r+0x718>
 80068fe:	4b45      	ldr	r3, [pc, #276]	; (8006a14 <_dtoa_r+0x594>)
 8006900:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006904:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006908:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800690c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800690e:	2b00      	cmp	r3, #0
 8006910:	f280 80da 	bge.w	8006ac8 <_dtoa_r+0x648>
 8006914:	9b08      	ldr	r3, [sp, #32]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f300 80d6 	bgt.w	8006ac8 <_dtoa_r+0x648>
 800691c:	f040 826b 	bne.w	8006df6 <_dtoa_r+0x976>
 8006920:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006924:	2200      	movs	r2, #0
 8006926:	4b40      	ldr	r3, [pc, #256]	; (8006a28 <_dtoa_r+0x5a8>)
 8006928:	f7f9 fdd6 	bl	80004d8 <__aeabi_dmul>
 800692c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006930:	f7fa f858 	bl	80009e4 <__aeabi_dcmpge>
 8006934:	9c08      	ldr	r4, [sp, #32]
 8006936:	4626      	mov	r6, r4
 8006938:	2800      	cmp	r0, #0
 800693a:	f040 8241 	bne.w	8006dc0 <_dtoa_r+0x940>
 800693e:	2331      	movs	r3, #49	; 0x31
 8006940:	9f03      	ldr	r7, [sp, #12]
 8006942:	f10b 0b01 	add.w	fp, fp, #1
 8006946:	f807 3b01 	strb.w	r3, [r7], #1
 800694a:	e23d      	b.n	8006dc8 <_dtoa_r+0x948>
 800694c:	07e2      	lsls	r2, r4, #31
 800694e:	d505      	bpl.n	800695c <_dtoa_r+0x4dc>
 8006950:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006954:	f7f9 fdc0 	bl	80004d8 <__aeabi_dmul>
 8006958:	2301      	movs	r3, #1
 800695a:	3701      	adds	r7, #1
 800695c:	1064      	asrs	r4, r4, #1
 800695e:	3608      	adds	r6, #8
 8006960:	e76d      	b.n	800683e <_dtoa_r+0x3be>
 8006962:	2702      	movs	r7, #2
 8006964:	e770      	b.n	8006848 <_dtoa_r+0x3c8>
 8006966:	46d8      	mov	r8, fp
 8006968:	9c08      	ldr	r4, [sp, #32]
 800696a:	e78f      	b.n	800688c <_dtoa_r+0x40c>
 800696c:	9903      	ldr	r1, [sp, #12]
 800696e:	4b29      	ldr	r3, [pc, #164]	; (8006a14 <_dtoa_r+0x594>)
 8006970:	4421      	add	r1, r4
 8006972:	9112      	str	r1, [sp, #72]	; 0x48
 8006974:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006976:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800697a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800697e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006982:	2900      	cmp	r1, #0
 8006984:	d054      	beq.n	8006a30 <_dtoa_r+0x5b0>
 8006986:	2000      	movs	r0, #0
 8006988:	4928      	ldr	r1, [pc, #160]	; (8006a2c <_dtoa_r+0x5ac>)
 800698a:	f7f9 fecf 	bl	800072c <__aeabi_ddiv>
 800698e:	463b      	mov	r3, r7
 8006990:	4632      	mov	r2, r6
 8006992:	f7f9 fbe9 	bl	8000168 <__aeabi_dsub>
 8006996:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800699a:	9f03      	ldr	r7, [sp, #12]
 800699c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069a0:	f7fa f84a 	bl	8000a38 <__aeabi_d2iz>
 80069a4:	4604      	mov	r4, r0
 80069a6:	f7f9 fd2d 	bl	8000404 <__aeabi_i2d>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069b2:	f7f9 fbd9 	bl	8000168 <__aeabi_dsub>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	3430      	adds	r4, #48	; 0x30
 80069bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069c4:	f807 4b01 	strb.w	r4, [r7], #1
 80069c8:	f7f9 fff8 	bl	80009bc <__aeabi_dcmplt>
 80069cc:	2800      	cmp	r0, #0
 80069ce:	d173      	bne.n	8006ab8 <_dtoa_r+0x638>
 80069d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069d4:	2000      	movs	r0, #0
 80069d6:	4911      	ldr	r1, [pc, #68]	; (8006a1c <_dtoa_r+0x59c>)
 80069d8:	f7f9 fbc6 	bl	8000168 <__aeabi_dsub>
 80069dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069e0:	f7f9 ffec 	bl	80009bc <__aeabi_dcmplt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f040 80b6 	bne.w	8006b56 <_dtoa_r+0x6d6>
 80069ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80069ec:	429f      	cmp	r7, r3
 80069ee:	f43f af7a 	beq.w	80068e6 <_dtoa_r+0x466>
 80069f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80069f6:	2200      	movs	r2, #0
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <_dtoa_r+0x5a0>)
 80069fa:	f7f9 fd6d 	bl	80004d8 <__aeabi_dmul>
 80069fe:	2200      	movs	r2, #0
 8006a00:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a08:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <_dtoa_r+0x5a0>)
 8006a0a:	f7f9 fd65 	bl	80004d8 <__aeabi_dmul>
 8006a0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a12:	e7c3      	b.n	800699c <_dtoa_r+0x51c>
 8006a14:	0800a7b0 	.word	0x0800a7b0
 8006a18:	0800a788 	.word	0x0800a788
 8006a1c:	3ff00000 	.word	0x3ff00000
 8006a20:	40240000 	.word	0x40240000
 8006a24:	401c0000 	.word	0x401c0000
 8006a28:	40140000 	.word	0x40140000
 8006a2c:	3fe00000 	.word	0x3fe00000
 8006a30:	4630      	mov	r0, r6
 8006a32:	4639      	mov	r1, r7
 8006a34:	f7f9 fd50 	bl	80004d8 <__aeabi_dmul>
 8006a38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a3a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a3e:	9c03      	ldr	r4, [sp, #12]
 8006a40:	9314      	str	r3, [sp, #80]	; 0x50
 8006a42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a46:	f7f9 fff7 	bl	8000a38 <__aeabi_d2iz>
 8006a4a:	9015      	str	r0, [sp, #84]	; 0x54
 8006a4c:	f7f9 fcda 	bl	8000404 <__aeabi_i2d>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a58:	f7f9 fb86 	bl	8000168 <__aeabi_dsub>
 8006a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a5e:	4606      	mov	r6, r0
 8006a60:	3330      	adds	r3, #48	; 0x30
 8006a62:	f804 3b01 	strb.w	r3, [r4], #1
 8006a66:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a68:	460f      	mov	r7, r1
 8006a6a:	429c      	cmp	r4, r3
 8006a6c:	f04f 0200 	mov.w	r2, #0
 8006a70:	d124      	bne.n	8006abc <_dtoa_r+0x63c>
 8006a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a76:	4baf      	ldr	r3, [pc, #700]	; (8006d34 <_dtoa_r+0x8b4>)
 8006a78:	f7f9 fb78 	bl	800016c <__adddf3>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4630      	mov	r0, r6
 8006a82:	4639      	mov	r1, r7
 8006a84:	f7f9 ffb8 	bl	80009f8 <__aeabi_dcmpgt>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d163      	bne.n	8006b54 <_dtoa_r+0x6d4>
 8006a8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a90:	2000      	movs	r0, #0
 8006a92:	49a8      	ldr	r1, [pc, #672]	; (8006d34 <_dtoa_r+0x8b4>)
 8006a94:	f7f9 fb68 	bl	8000168 <__aeabi_dsub>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	4639      	mov	r1, r7
 8006aa0:	f7f9 ff8c 	bl	80009bc <__aeabi_dcmplt>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	f43f af1e 	beq.w	80068e6 <_dtoa_r+0x466>
 8006aaa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006aac:	1e7b      	subs	r3, r7, #1
 8006aae:	9314      	str	r3, [sp, #80]	; 0x50
 8006ab0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006ab4:	2b30      	cmp	r3, #48	; 0x30
 8006ab6:	d0f8      	beq.n	8006aaa <_dtoa_r+0x62a>
 8006ab8:	46c3      	mov	fp, r8
 8006aba:	e03b      	b.n	8006b34 <_dtoa_r+0x6b4>
 8006abc:	4b9e      	ldr	r3, [pc, #632]	; (8006d38 <_dtoa_r+0x8b8>)
 8006abe:	f7f9 fd0b 	bl	80004d8 <__aeabi_dmul>
 8006ac2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ac6:	e7bc      	b.n	8006a42 <_dtoa_r+0x5c2>
 8006ac8:	9f03      	ldr	r7, [sp, #12]
 8006aca:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006ace:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ad2:	4640      	mov	r0, r8
 8006ad4:	4649      	mov	r1, r9
 8006ad6:	f7f9 fe29 	bl	800072c <__aeabi_ddiv>
 8006ada:	f7f9 ffad 	bl	8000a38 <__aeabi_d2iz>
 8006ade:	4604      	mov	r4, r0
 8006ae0:	f7f9 fc90 	bl	8000404 <__aeabi_i2d>
 8006ae4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ae8:	f7f9 fcf6 	bl	80004d8 <__aeabi_dmul>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4640      	mov	r0, r8
 8006af2:	4649      	mov	r1, r9
 8006af4:	f7f9 fb38 	bl	8000168 <__aeabi_dsub>
 8006af8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006afc:	f807 6b01 	strb.w	r6, [r7], #1
 8006b00:	9e03      	ldr	r6, [sp, #12]
 8006b02:	f8dd c020 	ldr.w	ip, [sp, #32]
 8006b06:	1bbe      	subs	r6, r7, r6
 8006b08:	45b4      	cmp	ip, r6
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	d136      	bne.n	8006b7e <_dtoa_r+0x6fe>
 8006b10:	f7f9 fb2c 	bl	800016c <__adddf3>
 8006b14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b18:	4680      	mov	r8, r0
 8006b1a:	4689      	mov	r9, r1
 8006b1c:	f7f9 ff6c 	bl	80009f8 <__aeabi_dcmpgt>
 8006b20:	bb58      	cbnz	r0, 8006b7a <_dtoa_r+0x6fa>
 8006b22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b26:	4640      	mov	r0, r8
 8006b28:	4649      	mov	r1, r9
 8006b2a:	f7f9 ff3d 	bl	80009a8 <__aeabi_dcmpeq>
 8006b2e:	b108      	cbz	r0, 8006b34 <_dtoa_r+0x6b4>
 8006b30:	07e3      	lsls	r3, r4, #31
 8006b32:	d422      	bmi.n	8006b7a <_dtoa_r+0x6fa>
 8006b34:	4651      	mov	r1, sl
 8006b36:	4628      	mov	r0, r5
 8006b38:	f000 fbc2 	bl	80072c0 <_Bfree>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006b40:	703b      	strb	r3, [r7, #0]
 8006b42:	f10b 0301 	add.w	r3, fp, #1
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f43f ace6 	beq.w	800651c <_dtoa_r+0x9c>
 8006b50:	601f      	str	r7, [r3, #0]
 8006b52:	e4e3      	b.n	800651c <_dtoa_r+0x9c>
 8006b54:	4627      	mov	r7, r4
 8006b56:	463b      	mov	r3, r7
 8006b58:	461f      	mov	r7, r3
 8006b5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b5e:	2a39      	cmp	r2, #57	; 0x39
 8006b60:	d107      	bne.n	8006b72 <_dtoa_r+0x6f2>
 8006b62:	9a03      	ldr	r2, [sp, #12]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d1f7      	bne.n	8006b58 <_dtoa_r+0x6d8>
 8006b68:	2230      	movs	r2, #48	; 0x30
 8006b6a:	9903      	ldr	r1, [sp, #12]
 8006b6c:	f108 0801 	add.w	r8, r8, #1
 8006b70:	700a      	strb	r2, [r1, #0]
 8006b72:	781a      	ldrb	r2, [r3, #0]
 8006b74:	3201      	adds	r2, #1
 8006b76:	701a      	strb	r2, [r3, #0]
 8006b78:	e79e      	b.n	8006ab8 <_dtoa_r+0x638>
 8006b7a:	46d8      	mov	r8, fp
 8006b7c:	e7eb      	b.n	8006b56 <_dtoa_r+0x6d6>
 8006b7e:	2200      	movs	r2, #0
 8006b80:	4b6d      	ldr	r3, [pc, #436]	; (8006d38 <_dtoa_r+0x8b8>)
 8006b82:	f7f9 fca9 	bl	80004d8 <__aeabi_dmul>
 8006b86:	2200      	movs	r2, #0
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4680      	mov	r8, r0
 8006b8c:	4689      	mov	r9, r1
 8006b8e:	f7f9 ff0b 	bl	80009a8 <__aeabi_dcmpeq>
 8006b92:	2800      	cmp	r0, #0
 8006b94:	d09b      	beq.n	8006ace <_dtoa_r+0x64e>
 8006b96:	e7cd      	b.n	8006b34 <_dtoa_r+0x6b4>
 8006b98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	f000 80c4 	beq.w	8006d28 <_dtoa_r+0x8a8>
 8006ba0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ba2:	2a01      	cmp	r2, #1
 8006ba4:	f300 80a8 	bgt.w	8006cf8 <_dtoa_r+0x878>
 8006ba8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006baa:	2a00      	cmp	r2, #0
 8006bac:	f000 80a0 	beq.w	8006cf0 <_dtoa_r+0x870>
 8006bb0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bb4:	464f      	mov	r7, r9
 8006bb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bba:	2101      	movs	r1, #1
 8006bbc:	441a      	add	r2, r3
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	4499      	add	r9, r3
 8006bc2:	9209      	str	r2, [sp, #36]	; 0x24
 8006bc4:	f000 fc32 	bl	800742c <__i2b>
 8006bc8:	4606      	mov	r6, r0
 8006bca:	b15f      	cbz	r7, 8006be4 <_dtoa_r+0x764>
 8006bcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dd08      	ble.n	8006be4 <_dtoa_r+0x764>
 8006bd2:	42bb      	cmp	r3, r7
 8006bd4:	bfa8      	it	ge
 8006bd6:	463b      	movge	r3, r7
 8006bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bda:	eba9 0903 	sub.w	r9, r9, r3
 8006bde:	1aff      	subs	r7, r7, r3
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	9309      	str	r3, [sp, #36]	; 0x24
 8006be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006be6:	b1f3      	cbz	r3, 8006c26 <_dtoa_r+0x7a6>
 8006be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 80a0 	beq.w	8006d30 <_dtoa_r+0x8b0>
 8006bf0:	2c00      	cmp	r4, #0
 8006bf2:	dd10      	ble.n	8006c16 <_dtoa_r+0x796>
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	4622      	mov	r2, r4
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	f000 fcd5 	bl	80075a8 <__pow5mult>
 8006bfe:	4652      	mov	r2, sl
 8006c00:	4601      	mov	r1, r0
 8006c02:	4606      	mov	r6, r0
 8006c04:	4628      	mov	r0, r5
 8006c06:	f000 fc27 	bl	8007458 <__multiply>
 8006c0a:	4680      	mov	r8, r0
 8006c0c:	4651      	mov	r1, sl
 8006c0e:	4628      	mov	r0, r5
 8006c10:	f000 fb56 	bl	80072c0 <_Bfree>
 8006c14:	46c2      	mov	sl, r8
 8006c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c18:	1b1a      	subs	r2, r3, r4
 8006c1a:	d004      	beq.n	8006c26 <_dtoa_r+0x7a6>
 8006c1c:	4651      	mov	r1, sl
 8006c1e:	4628      	mov	r0, r5
 8006c20:	f000 fcc2 	bl	80075a8 <__pow5mult>
 8006c24:	4682      	mov	sl, r0
 8006c26:	2101      	movs	r1, #1
 8006c28:	4628      	mov	r0, r5
 8006c2a:	f000 fbff 	bl	800742c <__i2b>
 8006c2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c30:	4604      	mov	r4, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f340 8082 	ble.w	8006d3c <_dtoa_r+0x8bc>
 8006c38:	461a      	mov	r2, r3
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	f000 fcb3 	bl	80075a8 <__pow5mult>
 8006c42:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c44:	4604      	mov	r4, r0
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	dd7b      	ble.n	8006d42 <_dtoa_r+0x8c2>
 8006c4a:	f04f 0800 	mov.w	r8, #0
 8006c4e:	6923      	ldr	r3, [r4, #16]
 8006c50:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c54:	6918      	ldr	r0, [r3, #16]
 8006c56:	f000 fb9b 	bl	8007390 <__hi0bits>
 8006c5a:	f1c0 0020 	rsb	r0, r0, #32
 8006c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c60:	4418      	add	r0, r3
 8006c62:	f010 001f 	ands.w	r0, r0, #31
 8006c66:	f000 8092 	beq.w	8006d8e <_dtoa_r+0x90e>
 8006c6a:	f1c0 0320 	rsb	r3, r0, #32
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	f340 8085 	ble.w	8006d7e <_dtoa_r+0x8fe>
 8006c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c76:	f1c0 001c 	rsb	r0, r0, #28
 8006c7a:	4403      	add	r3, r0
 8006c7c:	4481      	add	r9, r0
 8006c7e:	4407      	add	r7, r0
 8006c80:	9309      	str	r3, [sp, #36]	; 0x24
 8006c82:	f1b9 0f00 	cmp.w	r9, #0
 8006c86:	dd05      	ble.n	8006c94 <_dtoa_r+0x814>
 8006c88:	4651      	mov	r1, sl
 8006c8a:	464a      	mov	r2, r9
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	f000 fce5 	bl	800765c <__lshift>
 8006c92:	4682      	mov	sl, r0
 8006c94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dd05      	ble.n	8006ca6 <_dtoa_r+0x826>
 8006c9a:	4621      	mov	r1, r4
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4628      	mov	r0, r5
 8006ca0:	f000 fcdc 	bl	800765c <__lshift>
 8006ca4:	4604      	mov	r4, r0
 8006ca6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d072      	beq.n	8006d92 <_dtoa_r+0x912>
 8006cac:	4621      	mov	r1, r4
 8006cae:	4650      	mov	r0, sl
 8006cb0:	f000 fd40 	bl	8007734 <__mcmp>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	da6c      	bge.n	8006d92 <_dtoa_r+0x912>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4651      	mov	r1, sl
 8006cbc:	220a      	movs	r2, #10
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 fb20 	bl	8007304 <__multadd>
 8006cc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cc6:	4682      	mov	sl, r0
 8006cc8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 81ac 	beq.w	800702a <_dtoa_r+0xbaa>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	4631      	mov	r1, r6
 8006cd6:	220a      	movs	r2, #10
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f000 fb13 	bl	8007304 <__multadd>
 8006cde:	9b06      	ldr	r3, [sp, #24]
 8006ce0:	4606      	mov	r6, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f300 8093 	bgt.w	8006e0e <_dtoa_r+0x98e>
 8006ce8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cea:	2b02      	cmp	r3, #2
 8006cec:	dc59      	bgt.n	8006da2 <_dtoa_r+0x922>
 8006cee:	e08e      	b.n	8006e0e <_dtoa_r+0x98e>
 8006cf0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006cf2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006cf6:	e75d      	b.n	8006bb4 <_dtoa_r+0x734>
 8006cf8:	9b08      	ldr	r3, [sp, #32]
 8006cfa:	1e5c      	subs	r4, r3, #1
 8006cfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cfe:	42a3      	cmp	r3, r4
 8006d00:	bfbf      	itttt	lt
 8006d02:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d04:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006d06:	1ae3      	sublt	r3, r4, r3
 8006d08:	18d2      	addlt	r2, r2, r3
 8006d0a:	bfa8      	it	ge
 8006d0c:	1b1c      	subge	r4, r3, r4
 8006d0e:	9b08      	ldr	r3, [sp, #32]
 8006d10:	bfbe      	ittt	lt
 8006d12:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006d14:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006d16:	2400      	movlt	r4, #0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	bfb5      	itete	lt
 8006d1c:	eba9 0703 	sublt.w	r7, r9, r3
 8006d20:	464f      	movge	r7, r9
 8006d22:	2300      	movlt	r3, #0
 8006d24:	9b08      	ldrge	r3, [sp, #32]
 8006d26:	e747      	b.n	8006bb8 <_dtoa_r+0x738>
 8006d28:	464f      	mov	r7, r9
 8006d2a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d2e:	e74c      	b.n	8006bca <_dtoa_r+0x74a>
 8006d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d32:	e773      	b.n	8006c1c <_dtoa_r+0x79c>
 8006d34:	3fe00000 	.word	0x3fe00000
 8006d38:	40240000 	.word	0x40240000
 8006d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	dc18      	bgt.n	8006d74 <_dtoa_r+0x8f4>
 8006d42:	9b04      	ldr	r3, [sp, #16]
 8006d44:	b9b3      	cbnz	r3, 8006d74 <_dtoa_r+0x8f4>
 8006d46:	9b05      	ldr	r3, [sp, #20]
 8006d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d4c:	b993      	cbnz	r3, 8006d74 <_dtoa_r+0x8f4>
 8006d4e:	9b05      	ldr	r3, [sp, #20]
 8006d50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d54:	0d1b      	lsrs	r3, r3, #20
 8006d56:	051b      	lsls	r3, r3, #20
 8006d58:	b17b      	cbz	r3, 8006d7a <_dtoa_r+0x8fa>
 8006d5a:	f04f 0801 	mov.w	r8, #1
 8006d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d60:	f109 0901 	add.w	r9, r9, #1
 8006d64:	3301      	adds	r3, #1
 8006d66:	9309      	str	r3, [sp, #36]	; 0x24
 8006d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f47f af6f 	bne.w	8006c4e <_dtoa_r+0x7ce>
 8006d70:	2001      	movs	r0, #1
 8006d72:	e774      	b.n	8006c5e <_dtoa_r+0x7de>
 8006d74:	f04f 0800 	mov.w	r8, #0
 8006d78:	e7f6      	b.n	8006d68 <_dtoa_r+0x8e8>
 8006d7a:	4698      	mov	r8, r3
 8006d7c:	e7f4      	b.n	8006d68 <_dtoa_r+0x8e8>
 8006d7e:	d080      	beq.n	8006c82 <_dtoa_r+0x802>
 8006d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d82:	331c      	adds	r3, #28
 8006d84:	441a      	add	r2, r3
 8006d86:	4499      	add	r9, r3
 8006d88:	441f      	add	r7, r3
 8006d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d8c:	e779      	b.n	8006c82 <_dtoa_r+0x802>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	e7f6      	b.n	8006d80 <_dtoa_r+0x900>
 8006d92:	9b08      	ldr	r3, [sp, #32]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dc34      	bgt.n	8006e02 <_dtoa_r+0x982>
 8006d98:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	dd31      	ble.n	8006e02 <_dtoa_r+0x982>
 8006d9e:	9b08      	ldr	r3, [sp, #32]
 8006da0:	9306      	str	r3, [sp, #24]
 8006da2:	9b06      	ldr	r3, [sp, #24]
 8006da4:	b963      	cbnz	r3, 8006dc0 <_dtoa_r+0x940>
 8006da6:	4621      	mov	r1, r4
 8006da8:	2205      	movs	r2, #5
 8006daa:	4628      	mov	r0, r5
 8006dac:	f000 faaa 	bl	8007304 <__multadd>
 8006db0:	4601      	mov	r1, r0
 8006db2:	4604      	mov	r4, r0
 8006db4:	4650      	mov	r0, sl
 8006db6:	f000 fcbd 	bl	8007734 <__mcmp>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	f73f adbf 	bgt.w	800693e <_dtoa_r+0x4be>
 8006dc0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dc2:	9f03      	ldr	r7, [sp, #12]
 8006dc4:	ea6f 0b03 	mvn.w	fp, r3
 8006dc8:	f04f 0800 	mov.w	r8, #0
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4628      	mov	r0, r5
 8006dd0:	f000 fa76 	bl	80072c0 <_Bfree>
 8006dd4:	2e00      	cmp	r6, #0
 8006dd6:	f43f aead 	beq.w	8006b34 <_dtoa_r+0x6b4>
 8006dda:	f1b8 0f00 	cmp.w	r8, #0
 8006dde:	d005      	beq.n	8006dec <_dtoa_r+0x96c>
 8006de0:	45b0      	cmp	r8, r6
 8006de2:	d003      	beq.n	8006dec <_dtoa_r+0x96c>
 8006de4:	4641      	mov	r1, r8
 8006de6:	4628      	mov	r0, r5
 8006de8:	f000 fa6a 	bl	80072c0 <_Bfree>
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	f000 fa66 	bl	80072c0 <_Bfree>
 8006df4:	e69e      	b.n	8006b34 <_dtoa_r+0x6b4>
 8006df6:	2400      	movs	r4, #0
 8006df8:	4626      	mov	r6, r4
 8006dfa:	e7e1      	b.n	8006dc0 <_dtoa_r+0x940>
 8006dfc:	46c3      	mov	fp, r8
 8006dfe:	4626      	mov	r6, r4
 8006e00:	e59d      	b.n	800693e <_dtoa_r+0x4be>
 8006e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	f000 80c8 	beq.w	8006f9a <_dtoa_r+0xb1a>
 8006e0a:	9b08      	ldr	r3, [sp, #32]
 8006e0c:	9306      	str	r3, [sp, #24]
 8006e0e:	2f00      	cmp	r7, #0
 8006e10:	dd05      	ble.n	8006e1e <_dtoa_r+0x99e>
 8006e12:	4631      	mov	r1, r6
 8006e14:	463a      	mov	r2, r7
 8006e16:	4628      	mov	r0, r5
 8006e18:	f000 fc20 	bl	800765c <__lshift>
 8006e1c:	4606      	mov	r6, r0
 8006e1e:	f1b8 0f00 	cmp.w	r8, #0
 8006e22:	d05b      	beq.n	8006edc <_dtoa_r+0xa5c>
 8006e24:	4628      	mov	r0, r5
 8006e26:	6871      	ldr	r1, [r6, #4]
 8006e28:	f000 fa0a 	bl	8007240 <_Balloc>
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	b928      	cbnz	r0, 8006e3c <_dtoa_r+0x9bc>
 8006e30:	4602      	mov	r2, r0
 8006e32:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006e36:	4b81      	ldr	r3, [pc, #516]	; (800703c <_dtoa_r+0xbbc>)
 8006e38:	f7ff bb36 	b.w	80064a8 <_dtoa_r+0x28>
 8006e3c:	6932      	ldr	r2, [r6, #16]
 8006e3e:	f106 010c 	add.w	r1, r6, #12
 8006e42:	3202      	adds	r2, #2
 8006e44:	0092      	lsls	r2, r2, #2
 8006e46:	300c      	adds	r0, #12
 8006e48:	f7ff fa81 	bl	800634e <memcpy>
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	4639      	mov	r1, r7
 8006e50:	4628      	mov	r0, r5
 8006e52:	f000 fc03 	bl	800765c <__lshift>
 8006e56:	46b0      	mov	r8, r6
 8006e58:	4606      	mov	r6, r0
 8006e5a:	9b03      	ldr	r3, [sp, #12]
 8006e5c:	9a03      	ldr	r2, [sp, #12]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	9308      	str	r3, [sp, #32]
 8006e62:	9b06      	ldr	r3, [sp, #24]
 8006e64:	4413      	add	r3, r2
 8006e66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e68:	9b04      	ldr	r3, [sp, #16]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006e70:	9b08      	ldr	r3, [sp, #32]
 8006e72:	4621      	mov	r1, r4
 8006e74:	3b01      	subs	r3, #1
 8006e76:	4650      	mov	r0, sl
 8006e78:	9304      	str	r3, [sp, #16]
 8006e7a:	f7ff fa76 	bl	800636a <quorem>
 8006e7e:	4641      	mov	r1, r8
 8006e80:	9006      	str	r0, [sp, #24]
 8006e82:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e86:	4650      	mov	r0, sl
 8006e88:	f000 fc54 	bl	8007734 <__mcmp>
 8006e8c:	4632      	mov	r2, r6
 8006e8e:	9009      	str	r0, [sp, #36]	; 0x24
 8006e90:	4621      	mov	r1, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 fc6a 	bl	800776c <__mdiff>
 8006e98:	68c2      	ldr	r2, [r0, #12]
 8006e9a:	4607      	mov	r7, r0
 8006e9c:	bb02      	cbnz	r2, 8006ee0 <_dtoa_r+0xa60>
 8006e9e:	4601      	mov	r1, r0
 8006ea0:	4650      	mov	r0, sl
 8006ea2:	f000 fc47 	bl	8007734 <__mcmp>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	4628      	mov	r0, r5
 8006eac:	920c      	str	r2, [sp, #48]	; 0x30
 8006eae:	f000 fa07 	bl	80072c0 <_Bfree>
 8006eb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006eb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eb6:	9f08      	ldr	r7, [sp, #32]
 8006eb8:	ea43 0102 	orr.w	r1, r3, r2
 8006ebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ebe:	4319      	orrs	r1, r3
 8006ec0:	d110      	bne.n	8006ee4 <_dtoa_r+0xa64>
 8006ec2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006ec6:	d029      	beq.n	8006f1c <_dtoa_r+0xa9c>
 8006ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	dd02      	ble.n	8006ed4 <_dtoa_r+0xa54>
 8006ece:	9b06      	ldr	r3, [sp, #24]
 8006ed0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006ed4:	9b04      	ldr	r3, [sp, #16]
 8006ed6:	f883 9000 	strb.w	r9, [r3]
 8006eda:	e777      	b.n	8006dcc <_dtoa_r+0x94c>
 8006edc:	4630      	mov	r0, r6
 8006ede:	e7ba      	b.n	8006e56 <_dtoa_r+0x9d6>
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	e7e1      	b.n	8006ea8 <_dtoa_r+0xa28>
 8006ee4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	db04      	blt.n	8006ef4 <_dtoa_r+0xa74>
 8006eea:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006eec:	430b      	orrs	r3, r1
 8006eee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ef0:	430b      	orrs	r3, r1
 8006ef2:	d120      	bne.n	8006f36 <_dtoa_r+0xab6>
 8006ef4:	2a00      	cmp	r2, #0
 8006ef6:	dded      	ble.n	8006ed4 <_dtoa_r+0xa54>
 8006ef8:	4651      	mov	r1, sl
 8006efa:	2201      	movs	r2, #1
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 fbad 	bl	800765c <__lshift>
 8006f02:	4621      	mov	r1, r4
 8006f04:	4682      	mov	sl, r0
 8006f06:	f000 fc15 	bl	8007734 <__mcmp>
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	dc03      	bgt.n	8006f16 <_dtoa_r+0xa96>
 8006f0e:	d1e1      	bne.n	8006ed4 <_dtoa_r+0xa54>
 8006f10:	f019 0f01 	tst.w	r9, #1
 8006f14:	d0de      	beq.n	8006ed4 <_dtoa_r+0xa54>
 8006f16:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f1a:	d1d8      	bne.n	8006ece <_dtoa_r+0xa4e>
 8006f1c:	2339      	movs	r3, #57	; 0x39
 8006f1e:	9a04      	ldr	r2, [sp, #16]
 8006f20:	7013      	strb	r3, [r2, #0]
 8006f22:	463b      	mov	r3, r7
 8006f24:	461f      	mov	r7, r3
 8006f26:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	2a39      	cmp	r2, #57	; 0x39
 8006f2e:	d06b      	beq.n	8007008 <_dtoa_r+0xb88>
 8006f30:	3201      	adds	r2, #1
 8006f32:	701a      	strb	r2, [r3, #0]
 8006f34:	e74a      	b.n	8006dcc <_dtoa_r+0x94c>
 8006f36:	2a00      	cmp	r2, #0
 8006f38:	dd07      	ble.n	8006f4a <_dtoa_r+0xaca>
 8006f3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006f3e:	d0ed      	beq.n	8006f1c <_dtoa_r+0xa9c>
 8006f40:	9a04      	ldr	r2, [sp, #16]
 8006f42:	f109 0301 	add.w	r3, r9, #1
 8006f46:	7013      	strb	r3, [r2, #0]
 8006f48:	e740      	b.n	8006dcc <_dtoa_r+0x94c>
 8006f4a:	9b08      	ldr	r3, [sp, #32]
 8006f4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f4e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d042      	beq.n	8006fdc <_dtoa_r+0xb5c>
 8006f56:	4651      	mov	r1, sl
 8006f58:	2300      	movs	r3, #0
 8006f5a:	220a      	movs	r2, #10
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f000 f9d1 	bl	8007304 <__multadd>
 8006f62:	45b0      	cmp	r8, r6
 8006f64:	4682      	mov	sl, r0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	f04f 020a 	mov.w	r2, #10
 8006f6e:	4641      	mov	r1, r8
 8006f70:	4628      	mov	r0, r5
 8006f72:	d107      	bne.n	8006f84 <_dtoa_r+0xb04>
 8006f74:	f000 f9c6 	bl	8007304 <__multadd>
 8006f78:	4680      	mov	r8, r0
 8006f7a:	4606      	mov	r6, r0
 8006f7c:	9b08      	ldr	r3, [sp, #32]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	9308      	str	r3, [sp, #32]
 8006f82:	e775      	b.n	8006e70 <_dtoa_r+0x9f0>
 8006f84:	f000 f9be 	bl	8007304 <__multadd>
 8006f88:	4631      	mov	r1, r6
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	220a      	movs	r2, #10
 8006f90:	4628      	mov	r0, r5
 8006f92:	f000 f9b7 	bl	8007304 <__multadd>
 8006f96:	4606      	mov	r6, r0
 8006f98:	e7f0      	b.n	8006f7c <_dtoa_r+0xafc>
 8006f9a:	9b08      	ldr	r3, [sp, #32]
 8006f9c:	9306      	str	r3, [sp, #24]
 8006f9e:	9f03      	ldr	r7, [sp, #12]
 8006fa0:	4621      	mov	r1, r4
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	f7ff f9e1 	bl	800636a <quorem>
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006fae:	f807 9b01 	strb.w	r9, [r7], #1
 8006fb2:	1afa      	subs	r2, r7, r3
 8006fb4:	9b06      	ldr	r3, [sp, #24]
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	dd07      	ble.n	8006fca <_dtoa_r+0xb4a>
 8006fba:	4651      	mov	r1, sl
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	220a      	movs	r2, #10
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f000 f99f 	bl	8007304 <__multadd>
 8006fc6:	4682      	mov	sl, r0
 8006fc8:	e7ea      	b.n	8006fa0 <_dtoa_r+0xb20>
 8006fca:	9b06      	ldr	r3, [sp, #24]
 8006fcc:	f04f 0800 	mov.w	r8, #0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	bfcc      	ite	gt
 8006fd4:	461f      	movgt	r7, r3
 8006fd6:	2701      	movle	r7, #1
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	441f      	add	r7, r3
 8006fdc:	4651      	mov	r1, sl
 8006fde:	2201      	movs	r2, #1
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	f000 fb3b 	bl	800765c <__lshift>
 8006fe6:	4621      	mov	r1, r4
 8006fe8:	4682      	mov	sl, r0
 8006fea:	f000 fba3 	bl	8007734 <__mcmp>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	dc97      	bgt.n	8006f22 <_dtoa_r+0xaa2>
 8006ff2:	d102      	bne.n	8006ffa <_dtoa_r+0xb7a>
 8006ff4:	f019 0f01 	tst.w	r9, #1
 8006ff8:	d193      	bne.n	8006f22 <_dtoa_r+0xaa2>
 8006ffa:	463b      	mov	r3, r7
 8006ffc:	461f      	mov	r7, r3
 8006ffe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007002:	2a30      	cmp	r2, #48	; 0x30
 8007004:	d0fa      	beq.n	8006ffc <_dtoa_r+0xb7c>
 8007006:	e6e1      	b.n	8006dcc <_dtoa_r+0x94c>
 8007008:	9a03      	ldr	r2, [sp, #12]
 800700a:	429a      	cmp	r2, r3
 800700c:	d18a      	bne.n	8006f24 <_dtoa_r+0xaa4>
 800700e:	2331      	movs	r3, #49	; 0x31
 8007010:	f10b 0b01 	add.w	fp, fp, #1
 8007014:	e797      	b.n	8006f46 <_dtoa_r+0xac6>
 8007016:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <_dtoa_r+0xbc0>)
 8007018:	f7ff ba9f 	b.w	800655a <_dtoa_r+0xda>
 800701c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800701e:	2b00      	cmp	r3, #0
 8007020:	f47f aa77 	bne.w	8006512 <_dtoa_r+0x92>
 8007024:	4b07      	ldr	r3, [pc, #28]	; (8007044 <_dtoa_r+0xbc4>)
 8007026:	f7ff ba98 	b.w	800655a <_dtoa_r+0xda>
 800702a:	9b06      	ldr	r3, [sp, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	dcb6      	bgt.n	8006f9e <_dtoa_r+0xb1e>
 8007030:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007032:	2b02      	cmp	r3, #2
 8007034:	f73f aeb5 	bgt.w	8006da2 <_dtoa_r+0x922>
 8007038:	e7b1      	b.n	8006f9e <_dtoa_r+0xb1e>
 800703a:	bf00      	nop
 800703c:	0800a71a 	.word	0x0800a71a
 8007040:	0800a67a 	.word	0x0800a67a
 8007044:	0800a69e 	.word	0x0800a69e

08007048 <_free_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4605      	mov	r5, r0
 800704c:	2900      	cmp	r1, #0
 800704e:	d040      	beq.n	80070d2 <_free_r+0x8a>
 8007050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007054:	1f0c      	subs	r4, r1, #4
 8007056:	2b00      	cmp	r3, #0
 8007058:	bfb8      	it	lt
 800705a:	18e4      	addlt	r4, r4, r3
 800705c:	f000 f8e4 	bl	8007228 <__malloc_lock>
 8007060:	4a1c      	ldr	r2, [pc, #112]	; (80070d4 <_free_r+0x8c>)
 8007062:	6813      	ldr	r3, [r2, #0]
 8007064:	b933      	cbnz	r3, 8007074 <_free_r+0x2c>
 8007066:	6063      	str	r3, [r4, #4]
 8007068:	6014      	str	r4, [r2, #0]
 800706a:	4628      	mov	r0, r5
 800706c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007070:	f000 b8e0 	b.w	8007234 <__malloc_unlock>
 8007074:	42a3      	cmp	r3, r4
 8007076:	d908      	bls.n	800708a <_free_r+0x42>
 8007078:	6820      	ldr	r0, [r4, #0]
 800707a:	1821      	adds	r1, r4, r0
 800707c:	428b      	cmp	r3, r1
 800707e:	bf01      	itttt	eq
 8007080:	6819      	ldreq	r1, [r3, #0]
 8007082:	685b      	ldreq	r3, [r3, #4]
 8007084:	1809      	addeq	r1, r1, r0
 8007086:	6021      	streq	r1, [r4, #0]
 8007088:	e7ed      	b.n	8007066 <_free_r+0x1e>
 800708a:	461a      	mov	r2, r3
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	b10b      	cbz	r3, 8007094 <_free_r+0x4c>
 8007090:	42a3      	cmp	r3, r4
 8007092:	d9fa      	bls.n	800708a <_free_r+0x42>
 8007094:	6811      	ldr	r1, [r2, #0]
 8007096:	1850      	adds	r0, r2, r1
 8007098:	42a0      	cmp	r0, r4
 800709a:	d10b      	bne.n	80070b4 <_free_r+0x6c>
 800709c:	6820      	ldr	r0, [r4, #0]
 800709e:	4401      	add	r1, r0
 80070a0:	1850      	adds	r0, r2, r1
 80070a2:	4283      	cmp	r3, r0
 80070a4:	6011      	str	r1, [r2, #0]
 80070a6:	d1e0      	bne.n	800706a <_free_r+0x22>
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	4408      	add	r0, r1
 80070ae:	6010      	str	r0, [r2, #0]
 80070b0:	6053      	str	r3, [r2, #4]
 80070b2:	e7da      	b.n	800706a <_free_r+0x22>
 80070b4:	d902      	bls.n	80070bc <_free_r+0x74>
 80070b6:	230c      	movs	r3, #12
 80070b8:	602b      	str	r3, [r5, #0]
 80070ba:	e7d6      	b.n	800706a <_free_r+0x22>
 80070bc:	6820      	ldr	r0, [r4, #0]
 80070be:	1821      	adds	r1, r4, r0
 80070c0:	428b      	cmp	r3, r1
 80070c2:	bf01      	itttt	eq
 80070c4:	6819      	ldreq	r1, [r3, #0]
 80070c6:	685b      	ldreq	r3, [r3, #4]
 80070c8:	1809      	addeq	r1, r1, r0
 80070ca:	6021      	streq	r1, [r4, #0]
 80070cc:	6063      	str	r3, [r4, #4]
 80070ce:	6054      	str	r4, [r2, #4]
 80070d0:	e7cb      	b.n	800706a <_free_r+0x22>
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	20000578 	.word	0x20000578

080070d8 <malloc>:
 80070d8:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <malloc+0xc>)
 80070da:	4601      	mov	r1, r0
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	f000 b823 	b.w	8007128 <_malloc_r>
 80070e2:	bf00      	nop
 80070e4:	2000007c 	.word	0x2000007c

080070e8 <sbrk_aligned>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	4e0e      	ldr	r6, [pc, #56]	; (8007124 <sbrk_aligned+0x3c>)
 80070ec:	460c      	mov	r4, r1
 80070ee:	6831      	ldr	r1, [r6, #0]
 80070f0:	4605      	mov	r5, r0
 80070f2:	b911      	cbnz	r1, 80070fa <sbrk_aligned+0x12>
 80070f4:	f000 fe38 	bl	8007d68 <_sbrk_r>
 80070f8:	6030      	str	r0, [r6, #0]
 80070fa:	4621      	mov	r1, r4
 80070fc:	4628      	mov	r0, r5
 80070fe:	f000 fe33 	bl	8007d68 <_sbrk_r>
 8007102:	1c43      	adds	r3, r0, #1
 8007104:	d00a      	beq.n	800711c <sbrk_aligned+0x34>
 8007106:	1cc4      	adds	r4, r0, #3
 8007108:	f024 0403 	bic.w	r4, r4, #3
 800710c:	42a0      	cmp	r0, r4
 800710e:	d007      	beq.n	8007120 <sbrk_aligned+0x38>
 8007110:	1a21      	subs	r1, r4, r0
 8007112:	4628      	mov	r0, r5
 8007114:	f000 fe28 	bl	8007d68 <_sbrk_r>
 8007118:	3001      	adds	r0, #1
 800711a:	d101      	bne.n	8007120 <sbrk_aligned+0x38>
 800711c:	f04f 34ff 	mov.w	r4, #4294967295
 8007120:	4620      	mov	r0, r4
 8007122:	bd70      	pop	{r4, r5, r6, pc}
 8007124:	2000057c 	.word	0x2000057c

08007128 <_malloc_r>:
 8007128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800712c:	1ccd      	adds	r5, r1, #3
 800712e:	f025 0503 	bic.w	r5, r5, #3
 8007132:	3508      	adds	r5, #8
 8007134:	2d0c      	cmp	r5, #12
 8007136:	bf38      	it	cc
 8007138:	250c      	movcc	r5, #12
 800713a:	2d00      	cmp	r5, #0
 800713c:	4607      	mov	r7, r0
 800713e:	db01      	blt.n	8007144 <_malloc_r+0x1c>
 8007140:	42a9      	cmp	r1, r5
 8007142:	d905      	bls.n	8007150 <_malloc_r+0x28>
 8007144:	230c      	movs	r3, #12
 8007146:	2600      	movs	r6, #0
 8007148:	603b      	str	r3, [r7, #0]
 800714a:	4630      	mov	r0, r6
 800714c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007150:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007224 <_malloc_r+0xfc>
 8007154:	f000 f868 	bl	8007228 <__malloc_lock>
 8007158:	f8d8 3000 	ldr.w	r3, [r8]
 800715c:	461c      	mov	r4, r3
 800715e:	bb5c      	cbnz	r4, 80071b8 <_malloc_r+0x90>
 8007160:	4629      	mov	r1, r5
 8007162:	4638      	mov	r0, r7
 8007164:	f7ff ffc0 	bl	80070e8 <sbrk_aligned>
 8007168:	1c43      	adds	r3, r0, #1
 800716a:	4604      	mov	r4, r0
 800716c:	d155      	bne.n	800721a <_malloc_r+0xf2>
 800716e:	f8d8 4000 	ldr.w	r4, [r8]
 8007172:	4626      	mov	r6, r4
 8007174:	2e00      	cmp	r6, #0
 8007176:	d145      	bne.n	8007204 <_malloc_r+0xdc>
 8007178:	2c00      	cmp	r4, #0
 800717a:	d048      	beq.n	800720e <_malloc_r+0xe6>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	4631      	mov	r1, r6
 8007180:	4638      	mov	r0, r7
 8007182:	eb04 0903 	add.w	r9, r4, r3
 8007186:	f000 fdef 	bl	8007d68 <_sbrk_r>
 800718a:	4581      	cmp	r9, r0
 800718c:	d13f      	bne.n	800720e <_malloc_r+0xe6>
 800718e:	6821      	ldr	r1, [r4, #0]
 8007190:	4638      	mov	r0, r7
 8007192:	1a6d      	subs	r5, r5, r1
 8007194:	4629      	mov	r1, r5
 8007196:	f7ff ffa7 	bl	80070e8 <sbrk_aligned>
 800719a:	3001      	adds	r0, #1
 800719c:	d037      	beq.n	800720e <_malloc_r+0xe6>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	442b      	add	r3, r5
 80071a2:	6023      	str	r3, [r4, #0]
 80071a4:	f8d8 3000 	ldr.w	r3, [r8]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d038      	beq.n	800721e <_malloc_r+0xf6>
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	42a2      	cmp	r2, r4
 80071b0:	d12b      	bne.n	800720a <_malloc_r+0xe2>
 80071b2:	2200      	movs	r2, #0
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	e00f      	b.n	80071d8 <_malloc_r+0xb0>
 80071b8:	6822      	ldr	r2, [r4, #0]
 80071ba:	1b52      	subs	r2, r2, r5
 80071bc:	d41f      	bmi.n	80071fe <_malloc_r+0xd6>
 80071be:	2a0b      	cmp	r2, #11
 80071c0:	d917      	bls.n	80071f2 <_malloc_r+0xca>
 80071c2:	1961      	adds	r1, r4, r5
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	6025      	str	r5, [r4, #0]
 80071c8:	bf18      	it	ne
 80071ca:	6059      	strne	r1, [r3, #4]
 80071cc:	6863      	ldr	r3, [r4, #4]
 80071ce:	bf08      	it	eq
 80071d0:	f8c8 1000 	streq.w	r1, [r8]
 80071d4:	5162      	str	r2, [r4, r5]
 80071d6:	604b      	str	r3, [r1, #4]
 80071d8:	4638      	mov	r0, r7
 80071da:	f104 060b 	add.w	r6, r4, #11
 80071de:	f000 f829 	bl	8007234 <__malloc_unlock>
 80071e2:	f026 0607 	bic.w	r6, r6, #7
 80071e6:	1d23      	adds	r3, r4, #4
 80071e8:	1af2      	subs	r2, r6, r3
 80071ea:	d0ae      	beq.n	800714a <_malloc_r+0x22>
 80071ec:	1b9b      	subs	r3, r3, r6
 80071ee:	50a3      	str	r3, [r4, r2]
 80071f0:	e7ab      	b.n	800714a <_malloc_r+0x22>
 80071f2:	42a3      	cmp	r3, r4
 80071f4:	6862      	ldr	r2, [r4, #4]
 80071f6:	d1dd      	bne.n	80071b4 <_malloc_r+0x8c>
 80071f8:	f8c8 2000 	str.w	r2, [r8]
 80071fc:	e7ec      	b.n	80071d8 <_malloc_r+0xb0>
 80071fe:	4623      	mov	r3, r4
 8007200:	6864      	ldr	r4, [r4, #4]
 8007202:	e7ac      	b.n	800715e <_malloc_r+0x36>
 8007204:	4634      	mov	r4, r6
 8007206:	6876      	ldr	r6, [r6, #4]
 8007208:	e7b4      	b.n	8007174 <_malloc_r+0x4c>
 800720a:	4613      	mov	r3, r2
 800720c:	e7cc      	b.n	80071a8 <_malloc_r+0x80>
 800720e:	230c      	movs	r3, #12
 8007210:	4638      	mov	r0, r7
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	f000 f80e 	bl	8007234 <__malloc_unlock>
 8007218:	e797      	b.n	800714a <_malloc_r+0x22>
 800721a:	6025      	str	r5, [r4, #0]
 800721c:	e7dc      	b.n	80071d8 <_malloc_r+0xb0>
 800721e:	605b      	str	r3, [r3, #4]
 8007220:	deff      	udf	#255	; 0xff
 8007222:	bf00      	nop
 8007224:	20000578 	.word	0x20000578

08007228 <__malloc_lock>:
 8007228:	4801      	ldr	r0, [pc, #4]	; (8007230 <__malloc_lock+0x8>)
 800722a:	f7ff b880 	b.w	800632e <__retarget_lock_acquire_recursive>
 800722e:	bf00      	nop
 8007230:	20000574 	.word	0x20000574

08007234 <__malloc_unlock>:
 8007234:	4801      	ldr	r0, [pc, #4]	; (800723c <__malloc_unlock+0x8>)
 8007236:	f7ff b87b 	b.w	8006330 <__retarget_lock_release_recursive>
 800723a:	bf00      	nop
 800723c:	20000574 	.word	0x20000574

08007240 <_Balloc>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	69c6      	ldr	r6, [r0, #28]
 8007244:	4604      	mov	r4, r0
 8007246:	460d      	mov	r5, r1
 8007248:	b976      	cbnz	r6, 8007268 <_Balloc+0x28>
 800724a:	2010      	movs	r0, #16
 800724c:	f7ff ff44 	bl	80070d8 <malloc>
 8007250:	4602      	mov	r2, r0
 8007252:	61e0      	str	r0, [r4, #28]
 8007254:	b920      	cbnz	r0, 8007260 <_Balloc+0x20>
 8007256:	216b      	movs	r1, #107	; 0x6b
 8007258:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <_Balloc+0x78>)
 800725a:	4818      	ldr	r0, [pc, #96]	; (80072bc <_Balloc+0x7c>)
 800725c:	f000 fd94 	bl	8007d88 <__assert_func>
 8007260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007264:	6006      	str	r6, [r0, #0]
 8007266:	60c6      	str	r6, [r0, #12]
 8007268:	69e6      	ldr	r6, [r4, #28]
 800726a:	68f3      	ldr	r3, [r6, #12]
 800726c:	b183      	cbz	r3, 8007290 <_Balloc+0x50>
 800726e:	69e3      	ldr	r3, [r4, #28]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007276:	b9b8      	cbnz	r0, 80072a8 <_Balloc+0x68>
 8007278:	2101      	movs	r1, #1
 800727a:	fa01 f605 	lsl.w	r6, r1, r5
 800727e:	1d72      	adds	r2, r6, #5
 8007280:	4620      	mov	r0, r4
 8007282:	0092      	lsls	r2, r2, #2
 8007284:	f000 fd9e 	bl	8007dc4 <_calloc_r>
 8007288:	b160      	cbz	r0, 80072a4 <_Balloc+0x64>
 800728a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800728e:	e00e      	b.n	80072ae <_Balloc+0x6e>
 8007290:	2221      	movs	r2, #33	; 0x21
 8007292:	2104      	movs	r1, #4
 8007294:	4620      	mov	r0, r4
 8007296:	f000 fd95 	bl	8007dc4 <_calloc_r>
 800729a:	69e3      	ldr	r3, [r4, #28]
 800729c:	60f0      	str	r0, [r6, #12]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e4      	bne.n	800726e <_Balloc+0x2e>
 80072a4:	2000      	movs	r0, #0
 80072a6:	bd70      	pop	{r4, r5, r6, pc}
 80072a8:	6802      	ldr	r2, [r0, #0]
 80072aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80072ae:	2300      	movs	r3, #0
 80072b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80072b4:	e7f7      	b.n	80072a6 <_Balloc+0x66>
 80072b6:	bf00      	nop
 80072b8:	0800a6ab 	.word	0x0800a6ab
 80072bc:	0800a72b 	.word	0x0800a72b

080072c0 <_Bfree>:
 80072c0:	b570      	push	{r4, r5, r6, lr}
 80072c2:	69c6      	ldr	r6, [r0, #28]
 80072c4:	4605      	mov	r5, r0
 80072c6:	460c      	mov	r4, r1
 80072c8:	b976      	cbnz	r6, 80072e8 <_Bfree+0x28>
 80072ca:	2010      	movs	r0, #16
 80072cc:	f7ff ff04 	bl	80070d8 <malloc>
 80072d0:	4602      	mov	r2, r0
 80072d2:	61e8      	str	r0, [r5, #28]
 80072d4:	b920      	cbnz	r0, 80072e0 <_Bfree+0x20>
 80072d6:	218f      	movs	r1, #143	; 0x8f
 80072d8:	4b08      	ldr	r3, [pc, #32]	; (80072fc <_Bfree+0x3c>)
 80072da:	4809      	ldr	r0, [pc, #36]	; (8007300 <_Bfree+0x40>)
 80072dc:	f000 fd54 	bl	8007d88 <__assert_func>
 80072e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072e4:	6006      	str	r6, [r0, #0]
 80072e6:	60c6      	str	r6, [r0, #12]
 80072e8:	b13c      	cbz	r4, 80072fa <_Bfree+0x3a>
 80072ea:	69eb      	ldr	r3, [r5, #28]
 80072ec:	6862      	ldr	r2, [r4, #4]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072f4:	6021      	str	r1, [r4, #0]
 80072f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80072fa:	bd70      	pop	{r4, r5, r6, pc}
 80072fc:	0800a6ab 	.word	0x0800a6ab
 8007300:	0800a72b 	.word	0x0800a72b

08007304 <__multadd>:
 8007304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007308:	4607      	mov	r7, r0
 800730a:	460c      	mov	r4, r1
 800730c:	461e      	mov	r6, r3
 800730e:	2000      	movs	r0, #0
 8007310:	690d      	ldr	r5, [r1, #16]
 8007312:	f101 0c14 	add.w	ip, r1, #20
 8007316:	f8dc 3000 	ldr.w	r3, [ip]
 800731a:	3001      	adds	r0, #1
 800731c:	b299      	uxth	r1, r3
 800731e:	fb02 6101 	mla	r1, r2, r1, r6
 8007322:	0c1e      	lsrs	r6, r3, #16
 8007324:	0c0b      	lsrs	r3, r1, #16
 8007326:	fb02 3306 	mla	r3, r2, r6, r3
 800732a:	b289      	uxth	r1, r1
 800732c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007330:	4285      	cmp	r5, r0
 8007332:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007336:	f84c 1b04 	str.w	r1, [ip], #4
 800733a:	dcec      	bgt.n	8007316 <__multadd+0x12>
 800733c:	b30e      	cbz	r6, 8007382 <__multadd+0x7e>
 800733e:	68a3      	ldr	r3, [r4, #8]
 8007340:	42ab      	cmp	r3, r5
 8007342:	dc19      	bgt.n	8007378 <__multadd+0x74>
 8007344:	6861      	ldr	r1, [r4, #4]
 8007346:	4638      	mov	r0, r7
 8007348:	3101      	adds	r1, #1
 800734a:	f7ff ff79 	bl	8007240 <_Balloc>
 800734e:	4680      	mov	r8, r0
 8007350:	b928      	cbnz	r0, 800735e <__multadd+0x5a>
 8007352:	4602      	mov	r2, r0
 8007354:	21ba      	movs	r1, #186	; 0xba
 8007356:	4b0c      	ldr	r3, [pc, #48]	; (8007388 <__multadd+0x84>)
 8007358:	480c      	ldr	r0, [pc, #48]	; (800738c <__multadd+0x88>)
 800735a:	f000 fd15 	bl	8007d88 <__assert_func>
 800735e:	6922      	ldr	r2, [r4, #16]
 8007360:	f104 010c 	add.w	r1, r4, #12
 8007364:	3202      	adds	r2, #2
 8007366:	0092      	lsls	r2, r2, #2
 8007368:	300c      	adds	r0, #12
 800736a:	f7fe fff0 	bl	800634e <memcpy>
 800736e:	4621      	mov	r1, r4
 8007370:	4638      	mov	r0, r7
 8007372:	f7ff ffa5 	bl	80072c0 <_Bfree>
 8007376:	4644      	mov	r4, r8
 8007378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800737c:	3501      	adds	r5, #1
 800737e:	615e      	str	r6, [r3, #20]
 8007380:	6125      	str	r5, [r4, #16]
 8007382:	4620      	mov	r0, r4
 8007384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007388:	0800a71a 	.word	0x0800a71a
 800738c:	0800a72b 	.word	0x0800a72b

08007390 <__hi0bits>:
 8007390:	0c02      	lsrs	r2, r0, #16
 8007392:	0412      	lsls	r2, r2, #16
 8007394:	4603      	mov	r3, r0
 8007396:	b9ca      	cbnz	r2, 80073cc <__hi0bits+0x3c>
 8007398:	0403      	lsls	r3, r0, #16
 800739a:	2010      	movs	r0, #16
 800739c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80073a0:	bf04      	itt	eq
 80073a2:	021b      	lsleq	r3, r3, #8
 80073a4:	3008      	addeq	r0, #8
 80073a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80073aa:	bf04      	itt	eq
 80073ac:	011b      	lsleq	r3, r3, #4
 80073ae:	3004      	addeq	r0, #4
 80073b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80073b4:	bf04      	itt	eq
 80073b6:	009b      	lsleq	r3, r3, #2
 80073b8:	3002      	addeq	r0, #2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	db05      	blt.n	80073ca <__hi0bits+0x3a>
 80073be:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80073c2:	f100 0001 	add.w	r0, r0, #1
 80073c6:	bf08      	it	eq
 80073c8:	2020      	moveq	r0, #32
 80073ca:	4770      	bx	lr
 80073cc:	2000      	movs	r0, #0
 80073ce:	e7e5      	b.n	800739c <__hi0bits+0xc>

080073d0 <__lo0bits>:
 80073d0:	6803      	ldr	r3, [r0, #0]
 80073d2:	4602      	mov	r2, r0
 80073d4:	f013 0007 	ands.w	r0, r3, #7
 80073d8:	d00b      	beq.n	80073f2 <__lo0bits+0x22>
 80073da:	07d9      	lsls	r1, r3, #31
 80073dc:	d421      	bmi.n	8007422 <__lo0bits+0x52>
 80073de:	0798      	lsls	r0, r3, #30
 80073e0:	bf49      	itett	mi
 80073e2:	085b      	lsrmi	r3, r3, #1
 80073e4:	089b      	lsrpl	r3, r3, #2
 80073e6:	2001      	movmi	r0, #1
 80073e8:	6013      	strmi	r3, [r2, #0]
 80073ea:	bf5c      	itt	pl
 80073ec:	2002      	movpl	r0, #2
 80073ee:	6013      	strpl	r3, [r2, #0]
 80073f0:	4770      	bx	lr
 80073f2:	b299      	uxth	r1, r3
 80073f4:	b909      	cbnz	r1, 80073fa <__lo0bits+0x2a>
 80073f6:	2010      	movs	r0, #16
 80073f8:	0c1b      	lsrs	r3, r3, #16
 80073fa:	b2d9      	uxtb	r1, r3
 80073fc:	b909      	cbnz	r1, 8007402 <__lo0bits+0x32>
 80073fe:	3008      	adds	r0, #8
 8007400:	0a1b      	lsrs	r3, r3, #8
 8007402:	0719      	lsls	r1, r3, #28
 8007404:	bf04      	itt	eq
 8007406:	091b      	lsreq	r3, r3, #4
 8007408:	3004      	addeq	r0, #4
 800740a:	0799      	lsls	r1, r3, #30
 800740c:	bf04      	itt	eq
 800740e:	089b      	lsreq	r3, r3, #2
 8007410:	3002      	addeq	r0, #2
 8007412:	07d9      	lsls	r1, r3, #31
 8007414:	d403      	bmi.n	800741e <__lo0bits+0x4e>
 8007416:	085b      	lsrs	r3, r3, #1
 8007418:	f100 0001 	add.w	r0, r0, #1
 800741c:	d003      	beq.n	8007426 <__lo0bits+0x56>
 800741e:	6013      	str	r3, [r2, #0]
 8007420:	4770      	bx	lr
 8007422:	2000      	movs	r0, #0
 8007424:	4770      	bx	lr
 8007426:	2020      	movs	r0, #32
 8007428:	4770      	bx	lr
	...

0800742c <__i2b>:
 800742c:	b510      	push	{r4, lr}
 800742e:	460c      	mov	r4, r1
 8007430:	2101      	movs	r1, #1
 8007432:	f7ff ff05 	bl	8007240 <_Balloc>
 8007436:	4602      	mov	r2, r0
 8007438:	b928      	cbnz	r0, 8007446 <__i2b+0x1a>
 800743a:	f240 1145 	movw	r1, #325	; 0x145
 800743e:	4b04      	ldr	r3, [pc, #16]	; (8007450 <__i2b+0x24>)
 8007440:	4804      	ldr	r0, [pc, #16]	; (8007454 <__i2b+0x28>)
 8007442:	f000 fca1 	bl	8007d88 <__assert_func>
 8007446:	2301      	movs	r3, #1
 8007448:	6144      	str	r4, [r0, #20]
 800744a:	6103      	str	r3, [r0, #16]
 800744c:	bd10      	pop	{r4, pc}
 800744e:	bf00      	nop
 8007450:	0800a71a 	.word	0x0800a71a
 8007454:	0800a72b 	.word	0x0800a72b

08007458 <__multiply>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	4691      	mov	r9, r2
 800745e:	690a      	ldr	r2, [r1, #16]
 8007460:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007464:	460c      	mov	r4, r1
 8007466:	429a      	cmp	r2, r3
 8007468:	bfbe      	ittt	lt
 800746a:	460b      	movlt	r3, r1
 800746c:	464c      	movlt	r4, r9
 800746e:	4699      	movlt	r9, r3
 8007470:	6927      	ldr	r7, [r4, #16]
 8007472:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007476:	68a3      	ldr	r3, [r4, #8]
 8007478:	6861      	ldr	r1, [r4, #4]
 800747a:	eb07 060a 	add.w	r6, r7, sl
 800747e:	42b3      	cmp	r3, r6
 8007480:	b085      	sub	sp, #20
 8007482:	bfb8      	it	lt
 8007484:	3101      	addlt	r1, #1
 8007486:	f7ff fedb 	bl	8007240 <_Balloc>
 800748a:	b930      	cbnz	r0, 800749a <__multiply+0x42>
 800748c:	4602      	mov	r2, r0
 800748e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007492:	4b43      	ldr	r3, [pc, #268]	; (80075a0 <__multiply+0x148>)
 8007494:	4843      	ldr	r0, [pc, #268]	; (80075a4 <__multiply+0x14c>)
 8007496:	f000 fc77 	bl	8007d88 <__assert_func>
 800749a:	f100 0514 	add.w	r5, r0, #20
 800749e:	462b      	mov	r3, r5
 80074a0:	2200      	movs	r2, #0
 80074a2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80074a6:	4543      	cmp	r3, r8
 80074a8:	d321      	bcc.n	80074ee <__multiply+0x96>
 80074aa:	f104 0314 	add.w	r3, r4, #20
 80074ae:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80074b2:	f109 0314 	add.w	r3, r9, #20
 80074b6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80074ba:	9202      	str	r2, [sp, #8]
 80074bc:	1b3a      	subs	r2, r7, r4
 80074be:	3a15      	subs	r2, #21
 80074c0:	f022 0203 	bic.w	r2, r2, #3
 80074c4:	3204      	adds	r2, #4
 80074c6:	f104 0115 	add.w	r1, r4, #21
 80074ca:	428f      	cmp	r7, r1
 80074cc:	bf38      	it	cc
 80074ce:	2204      	movcc	r2, #4
 80074d0:	9201      	str	r2, [sp, #4]
 80074d2:	9a02      	ldr	r2, [sp, #8]
 80074d4:	9303      	str	r3, [sp, #12]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d80c      	bhi.n	80074f4 <__multiply+0x9c>
 80074da:	2e00      	cmp	r6, #0
 80074dc:	dd03      	ble.n	80074e6 <__multiply+0x8e>
 80074de:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d05a      	beq.n	800759c <__multiply+0x144>
 80074e6:	6106      	str	r6, [r0, #16]
 80074e8:	b005      	add	sp, #20
 80074ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ee:	f843 2b04 	str.w	r2, [r3], #4
 80074f2:	e7d8      	b.n	80074a6 <__multiply+0x4e>
 80074f4:	f8b3 a000 	ldrh.w	sl, [r3]
 80074f8:	f1ba 0f00 	cmp.w	sl, #0
 80074fc:	d023      	beq.n	8007546 <__multiply+0xee>
 80074fe:	46a9      	mov	r9, r5
 8007500:	f04f 0c00 	mov.w	ip, #0
 8007504:	f104 0e14 	add.w	lr, r4, #20
 8007508:	f85e 2b04 	ldr.w	r2, [lr], #4
 800750c:	f8d9 1000 	ldr.w	r1, [r9]
 8007510:	fa1f fb82 	uxth.w	fp, r2
 8007514:	b289      	uxth	r1, r1
 8007516:	fb0a 110b 	mla	r1, sl, fp, r1
 800751a:	4461      	add	r1, ip
 800751c:	f8d9 c000 	ldr.w	ip, [r9]
 8007520:	0c12      	lsrs	r2, r2, #16
 8007522:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007526:	fb0a c202 	mla	r2, sl, r2, ip
 800752a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800752e:	b289      	uxth	r1, r1
 8007530:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007534:	4577      	cmp	r7, lr
 8007536:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800753a:	f849 1b04 	str.w	r1, [r9], #4
 800753e:	d8e3      	bhi.n	8007508 <__multiply+0xb0>
 8007540:	9a01      	ldr	r2, [sp, #4]
 8007542:	f845 c002 	str.w	ip, [r5, r2]
 8007546:	9a03      	ldr	r2, [sp, #12]
 8007548:	3304      	adds	r3, #4
 800754a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800754e:	f1b9 0f00 	cmp.w	r9, #0
 8007552:	d021      	beq.n	8007598 <__multiply+0x140>
 8007554:	46ae      	mov	lr, r5
 8007556:	f04f 0a00 	mov.w	sl, #0
 800755a:	6829      	ldr	r1, [r5, #0]
 800755c:	f104 0c14 	add.w	ip, r4, #20
 8007560:	f8bc b000 	ldrh.w	fp, [ip]
 8007564:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007568:	b289      	uxth	r1, r1
 800756a:	fb09 220b 	mla	r2, r9, fp, r2
 800756e:	4452      	add	r2, sl
 8007570:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007574:	f84e 1b04 	str.w	r1, [lr], #4
 8007578:	f85c 1b04 	ldr.w	r1, [ip], #4
 800757c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007580:	f8be 1000 	ldrh.w	r1, [lr]
 8007584:	4567      	cmp	r7, ip
 8007586:	fb09 110a 	mla	r1, r9, sl, r1
 800758a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800758e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007592:	d8e5      	bhi.n	8007560 <__multiply+0x108>
 8007594:	9a01      	ldr	r2, [sp, #4]
 8007596:	50a9      	str	r1, [r5, r2]
 8007598:	3504      	adds	r5, #4
 800759a:	e79a      	b.n	80074d2 <__multiply+0x7a>
 800759c:	3e01      	subs	r6, #1
 800759e:	e79c      	b.n	80074da <__multiply+0x82>
 80075a0:	0800a71a 	.word	0x0800a71a
 80075a4:	0800a72b 	.word	0x0800a72b

080075a8 <__pow5mult>:
 80075a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ac:	4615      	mov	r5, r2
 80075ae:	f012 0203 	ands.w	r2, r2, #3
 80075b2:	4606      	mov	r6, r0
 80075b4:	460f      	mov	r7, r1
 80075b6:	d007      	beq.n	80075c8 <__pow5mult+0x20>
 80075b8:	4c25      	ldr	r4, [pc, #148]	; (8007650 <__pow5mult+0xa8>)
 80075ba:	3a01      	subs	r2, #1
 80075bc:	2300      	movs	r3, #0
 80075be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80075c2:	f7ff fe9f 	bl	8007304 <__multadd>
 80075c6:	4607      	mov	r7, r0
 80075c8:	10ad      	asrs	r5, r5, #2
 80075ca:	d03d      	beq.n	8007648 <__pow5mult+0xa0>
 80075cc:	69f4      	ldr	r4, [r6, #28]
 80075ce:	b97c      	cbnz	r4, 80075f0 <__pow5mult+0x48>
 80075d0:	2010      	movs	r0, #16
 80075d2:	f7ff fd81 	bl	80070d8 <malloc>
 80075d6:	4602      	mov	r2, r0
 80075d8:	61f0      	str	r0, [r6, #28]
 80075da:	b928      	cbnz	r0, 80075e8 <__pow5mult+0x40>
 80075dc:	f240 11b3 	movw	r1, #435	; 0x1b3
 80075e0:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <__pow5mult+0xac>)
 80075e2:	481d      	ldr	r0, [pc, #116]	; (8007658 <__pow5mult+0xb0>)
 80075e4:	f000 fbd0 	bl	8007d88 <__assert_func>
 80075e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80075ec:	6004      	str	r4, [r0, #0]
 80075ee:	60c4      	str	r4, [r0, #12]
 80075f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80075f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80075f8:	b94c      	cbnz	r4, 800760e <__pow5mult+0x66>
 80075fa:	f240 2171 	movw	r1, #625	; 0x271
 80075fe:	4630      	mov	r0, r6
 8007600:	f7ff ff14 	bl	800742c <__i2b>
 8007604:	2300      	movs	r3, #0
 8007606:	4604      	mov	r4, r0
 8007608:	f8c8 0008 	str.w	r0, [r8, #8]
 800760c:	6003      	str	r3, [r0, #0]
 800760e:	f04f 0900 	mov.w	r9, #0
 8007612:	07eb      	lsls	r3, r5, #31
 8007614:	d50a      	bpl.n	800762c <__pow5mult+0x84>
 8007616:	4639      	mov	r1, r7
 8007618:	4622      	mov	r2, r4
 800761a:	4630      	mov	r0, r6
 800761c:	f7ff ff1c 	bl	8007458 <__multiply>
 8007620:	4680      	mov	r8, r0
 8007622:	4639      	mov	r1, r7
 8007624:	4630      	mov	r0, r6
 8007626:	f7ff fe4b 	bl	80072c0 <_Bfree>
 800762a:	4647      	mov	r7, r8
 800762c:	106d      	asrs	r5, r5, #1
 800762e:	d00b      	beq.n	8007648 <__pow5mult+0xa0>
 8007630:	6820      	ldr	r0, [r4, #0]
 8007632:	b938      	cbnz	r0, 8007644 <__pow5mult+0x9c>
 8007634:	4622      	mov	r2, r4
 8007636:	4621      	mov	r1, r4
 8007638:	4630      	mov	r0, r6
 800763a:	f7ff ff0d 	bl	8007458 <__multiply>
 800763e:	6020      	str	r0, [r4, #0]
 8007640:	f8c0 9000 	str.w	r9, [r0]
 8007644:	4604      	mov	r4, r0
 8007646:	e7e4      	b.n	8007612 <__pow5mult+0x6a>
 8007648:	4638      	mov	r0, r7
 800764a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800764e:	bf00      	nop
 8007650:	0800a878 	.word	0x0800a878
 8007654:	0800a6ab 	.word	0x0800a6ab
 8007658:	0800a72b 	.word	0x0800a72b

0800765c <__lshift>:
 800765c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007660:	460c      	mov	r4, r1
 8007662:	4607      	mov	r7, r0
 8007664:	4691      	mov	r9, r2
 8007666:	6923      	ldr	r3, [r4, #16]
 8007668:	6849      	ldr	r1, [r1, #4]
 800766a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800766e:	68a3      	ldr	r3, [r4, #8]
 8007670:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007674:	f108 0601 	add.w	r6, r8, #1
 8007678:	42b3      	cmp	r3, r6
 800767a:	db0b      	blt.n	8007694 <__lshift+0x38>
 800767c:	4638      	mov	r0, r7
 800767e:	f7ff fddf 	bl	8007240 <_Balloc>
 8007682:	4605      	mov	r5, r0
 8007684:	b948      	cbnz	r0, 800769a <__lshift+0x3e>
 8007686:	4602      	mov	r2, r0
 8007688:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800768c:	4b27      	ldr	r3, [pc, #156]	; (800772c <__lshift+0xd0>)
 800768e:	4828      	ldr	r0, [pc, #160]	; (8007730 <__lshift+0xd4>)
 8007690:	f000 fb7a 	bl	8007d88 <__assert_func>
 8007694:	3101      	adds	r1, #1
 8007696:	005b      	lsls	r3, r3, #1
 8007698:	e7ee      	b.n	8007678 <__lshift+0x1c>
 800769a:	2300      	movs	r3, #0
 800769c:	f100 0114 	add.w	r1, r0, #20
 80076a0:	f100 0210 	add.w	r2, r0, #16
 80076a4:	4618      	mov	r0, r3
 80076a6:	4553      	cmp	r3, sl
 80076a8:	db33      	blt.n	8007712 <__lshift+0xb6>
 80076aa:	6920      	ldr	r0, [r4, #16]
 80076ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80076b0:	f104 0314 	add.w	r3, r4, #20
 80076b4:	f019 091f 	ands.w	r9, r9, #31
 80076b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80076bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80076c0:	d02b      	beq.n	800771a <__lshift+0xbe>
 80076c2:	468a      	mov	sl, r1
 80076c4:	2200      	movs	r2, #0
 80076c6:	f1c9 0e20 	rsb	lr, r9, #32
 80076ca:	6818      	ldr	r0, [r3, #0]
 80076cc:	fa00 f009 	lsl.w	r0, r0, r9
 80076d0:	4310      	orrs	r0, r2
 80076d2:	f84a 0b04 	str.w	r0, [sl], #4
 80076d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80076da:	459c      	cmp	ip, r3
 80076dc:	fa22 f20e 	lsr.w	r2, r2, lr
 80076e0:	d8f3      	bhi.n	80076ca <__lshift+0x6e>
 80076e2:	ebac 0304 	sub.w	r3, ip, r4
 80076e6:	3b15      	subs	r3, #21
 80076e8:	f023 0303 	bic.w	r3, r3, #3
 80076ec:	3304      	adds	r3, #4
 80076ee:	f104 0015 	add.w	r0, r4, #21
 80076f2:	4584      	cmp	ip, r0
 80076f4:	bf38      	it	cc
 80076f6:	2304      	movcc	r3, #4
 80076f8:	50ca      	str	r2, [r1, r3]
 80076fa:	b10a      	cbz	r2, 8007700 <__lshift+0xa4>
 80076fc:	f108 0602 	add.w	r6, r8, #2
 8007700:	3e01      	subs	r6, #1
 8007702:	4638      	mov	r0, r7
 8007704:	4621      	mov	r1, r4
 8007706:	612e      	str	r6, [r5, #16]
 8007708:	f7ff fdda 	bl	80072c0 <_Bfree>
 800770c:	4628      	mov	r0, r5
 800770e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007712:	f842 0f04 	str.w	r0, [r2, #4]!
 8007716:	3301      	adds	r3, #1
 8007718:	e7c5      	b.n	80076a6 <__lshift+0x4a>
 800771a:	3904      	subs	r1, #4
 800771c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007720:	459c      	cmp	ip, r3
 8007722:	f841 2f04 	str.w	r2, [r1, #4]!
 8007726:	d8f9      	bhi.n	800771c <__lshift+0xc0>
 8007728:	e7ea      	b.n	8007700 <__lshift+0xa4>
 800772a:	bf00      	nop
 800772c:	0800a71a 	.word	0x0800a71a
 8007730:	0800a72b 	.word	0x0800a72b

08007734 <__mcmp>:
 8007734:	4603      	mov	r3, r0
 8007736:	690a      	ldr	r2, [r1, #16]
 8007738:	6900      	ldr	r0, [r0, #16]
 800773a:	b530      	push	{r4, r5, lr}
 800773c:	1a80      	subs	r0, r0, r2
 800773e:	d10d      	bne.n	800775c <__mcmp+0x28>
 8007740:	3314      	adds	r3, #20
 8007742:	3114      	adds	r1, #20
 8007744:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007748:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800774c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007750:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007754:	4295      	cmp	r5, r2
 8007756:	d002      	beq.n	800775e <__mcmp+0x2a>
 8007758:	d304      	bcc.n	8007764 <__mcmp+0x30>
 800775a:	2001      	movs	r0, #1
 800775c:	bd30      	pop	{r4, r5, pc}
 800775e:	42a3      	cmp	r3, r4
 8007760:	d3f4      	bcc.n	800774c <__mcmp+0x18>
 8007762:	e7fb      	b.n	800775c <__mcmp+0x28>
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	e7f8      	b.n	800775c <__mcmp+0x28>
	...

0800776c <__mdiff>:
 800776c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007770:	460d      	mov	r5, r1
 8007772:	4607      	mov	r7, r0
 8007774:	4611      	mov	r1, r2
 8007776:	4628      	mov	r0, r5
 8007778:	4614      	mov	r4, r2
 800777a:	f7ff ffdb 	bl	8007734 <__mcmp>
 800777e:	1e06      	subs	r6, r0, #0
 8007780:	d111      	bne.n	80077a6 <__mdiff+0x3a>
 8007782:	4631      	mov	r1, r6
 8007784:	4638      	mov	r0, r7
 8007786:	f7ff fd5b 	bl	8007240 <_Balloc>
 800778a:	4602      	mov	r2, r0
 800778c:	b928      	cbnz	r0, 800779a <__mdiff+0x2e>
 800778e:	f240 2137 	movw	r1, #567	; 0x237
 8007792:	4b3a      	ldr	r3, [pc, #232]	; (800787c <__mdiff+0x110>)
 8007794:	483a      	ldr	r0, [pc, #232]	; (8007880 <__mdiff+0x114>)
 8007796:	f000 faf7 	bl	8007d88 <__assert_func>
 800779a:	2301      	movs	r3, #1
 800779c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80077a0:	4610      	mov	r0, r2
 80077a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a6:	bfa4      	itt	ge
 80077a8:	4623      	movge	r3, r4
 80077aa:	462c      	movge	r4, r5
 80077ac:	4638      	mov	r0, r7
 80077ae:	6861      	ldr	r1, [r4, #4]
 80077b0:	bfa6      	itte	ge
 80077b2:	461d      	movge	r5, r3
 80077b4:	2600      	movge	r6, #0
 80077b6:	2601      	movlt	r6, #1
 80077b8:	f7ff fd42 	bl	8007240 <_Balloc>
 80077bc:	4602      	mov	r2, r0
 80077be:	b918      	cbnz	r0, 80077c8 <__mdiff+0x5c>
 80077c0:	f240 2145 	movw	r1, #581	; 0x245
 80077c4:	4b2d      	ldr	r3, [pc, #180]	; (800787c <__mdiff+0x110>)
 80077c6:	e7e5      	b.n	8007794 <__mdiff+0x28>
 80077c8:	f102 0814 	add.w	r8, r2, #20
 80077cc:	46c2      	mov	sl, r8
 80077ce:	f04f 0c00 	mov.w	ip, #0
 80077d2:	6927      	ldr	r7, [r4, #16]
 80077d4:	60c6      	str	r6, [r0, #12]
 80077d6:	692e      	ldr	r6, [r5, #16]
 80077d8:	f104 0014 	add.w	r0, r4, #20
 80077dc:	f105 0914 	add.w	r9, r5, #20
 80077e0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80077e4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80077e8:	3410      	adds	r4, #16
 80077ea:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80077ee:	f859 3b04 	ldr.w	r3, [r9], #4
 80077f2:	fa1f f18b 	uxth.w	r1, fp
 80077f6:	4461      	add	r1, ip
 80077f8:	fa1f fc83 	uxth.w	ip, r3
 80077fc:	0c1b      	lsrs	r3, r3, #16
 80077fe:	eba1 010c 	sub.w	r1, r1, ip
 8007802:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007806:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800780a:	b289      	uxth	r1, r1
 800780c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007810:	454e      	cmp	r6, r9
 8007812:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007816:	f84a 1b04 	str.w	r1, [sl], #4
 800781a:	d8e6      	bhi.n	80077ea <__mdiff+0x7e>
 800781c:	1b73      	subs	r3, r6, r5
 800781e:	3b15      	subs	r3, #21
 8007820:	f023 0303 	bic.w	r3, r3, #3
 8007824:	3515      	adds	r5, #21
 8007826:	3304      	adds	r3, #4
 8007828:	42ae      	cmp	r6, r5
 800782a:	bf38      	it	cc
 800782c:	2304      	movcc	r3, #4
 800782e:	4418      	add	r0, r3
 8007830:	4443      	add	r3, r8
 8007832:	461e      	mov	r6, r3
 8007834:	4605      	mov	r5, r0
 8007836:	4575      	cmp	r5, lr
 8007838:	d30e      	bcc.n	8007858 <__mdiff+0xec>
 800783a:	f10e 0103 	add.w	r1, lr, #3
 800783e:	1a09      	subs	r1, r1, r0
 8007840:	f021 0103 	bic.w	r1, r1, #3
 8007844:	3803      	subs	r0, #3
 8007846:	4586      	cmp	lr, r0
 8007848:	bf38      	it	cc
 800784a:	2100      	movcc	r1, #0
 800784c:	440b      	add	r3, r1
 800784e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007852:	b189      	cbz	r1, 8007878 <__mdiff+0x10c>
 8007854:	6117      	str	r7, [r2, #16]
 8007856:	e7a3      	b.n	80077a0 <__mdiff+0x34>
 8007858:	f855 8b04 	ldr.w	r8, [r5], #4
 800785c:	fa1f f188 	uxth.w	r1, r8
 8007860:	4461      	add	r1, ip
 8007862:	140c      	asrs	r4, r1, #16
 8007864:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007868:	b289      	uxth	r1, r1
 800786a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800786e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007872:	f846 1b04 	str.w	r1, [r6], #4
 8007876:	e7de      	b.n	8007836 <__mdiff+0xca>
 8007878:	3f01      	subs	r7, #1
 800787a:	e7e8      	b.n	800784e <__mdiff+0xe2>
 800787c:	0800a71a 	.word	0x0800a71a
 8007880:	0800a72b 	.word	0x0800a72b

08007884 <__d2b>:
 8007884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007886:	2101      	movs	r1, #1
 8007888:	4617      	mov	r7, r2
 800788a:	461c      	mov	r4, r3
 800788c:	9e08      	ldr	r6, [sp, #32]
 800788e:	f7ff fcd7 	bl	8007240 <_Balloc>
 8007892:	4605      	mov	r5, r0
 8007894:	b930      	cbnz	r0, 80078a4 <__d2b+0x20>
 8007896:	4602      	mov	r2, r0
 8007898:	f240 310f 	movw	r1, #783	; 0x30f
 800789c:	4b22      	ldr	r3, [pc, #136]	; (8007928 <__d2b+0xa4>)
 800789e:	4823      	ldr	r0, [pc, #140]	; (800792c <__d2b+0xa8>)
 80078a0:	f000 fa72 	bl	8007d88 <__assert_func>
 80078a4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80078a8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80078ac:	bb24      	cbnz	r4, 80078f8 <__d2b+0x74>
 80078ae:	2f00      	cmp	r7, #0
 80078b0:	9301      	str	r3, [sp, #4]
 80078b2:	d026      	beq.n	8007902 <__d2b+0x7e>
 80078b4:	4668      	mov	r0, sp
 80078b6:	9700      	str	r7, [sp, #0]
 80078b8:	f7ff fd8a 	bl	80073d0 <__lo0bits>
 80078bc:	e9dd 1200 	ldrd	r1, r2, [sp]
 80078c0:	b1e8      	cbz	r0, 80078fe <__d2b+0x7a>
 80078c2:	f1c0 0320 	rsb	r3, r0, #32
 80078c6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ca:	430b      	orrs	r3, r1
 80078cc:	40c2      	lsrs	r2, r0
 80078ce:	616b      	str	r3, [r5, #20]
 80078d0:	9201      	str	r2, [sp, #4]
 80078d2:	9b01      	ldr	r3, [sp, #4]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bf14      	ite	ne
 80078d8:	2102      	movne	r1, #2
 80078da:	2101      	moveq	r1, #1
 80078dc:	61ab      	str	r3, [r5, #24]
 80078de:	6129      	str	r1, [r5, #16]
 80078e0:	b1bc      	cbz	r4, 8007912 <__d2b+0x8e>
 80078e2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80078e6:	4404      	add	r4, r0
 80078e8:	6034      	str	r4, [r6, #0]
 80078ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f0:	6018      	str	r0, [r3, #0]
 80078f2:	4628      	mov	r0, r5
 80078f4:	b003      	add	sp, #12
 80078f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078fc:	e7d7      	b.n	80078ae <__d2b+0x2a>
 80078fe:	6169      	str	r1, [r5, #20]
 8007900:	e7e7      	b.n	80078d2 <__d2b+0x4e>
 8007902:	a801      	add	r0, sp, #4
 8007904:	f7ff fd64 	bl	80073d0 <__lo0bits>
 8007908:	9b01      	ldr	r3, [sp, #4]
 800790a:	2101      	movs	r1, #1
 800790c:	616b      	str	r3, [r5, #20]
 800790e:	3020      	adds	r0, #32
 8007910:	e7e5      	b.n	80078de <__d2b+0x5a>
 8007912:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007916:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800791a:	6030      	str	r0, [r6, #0]
 800791c:	6918      	ldr	r0, [r3, #16]
 800791e:	f7ff fd37 	bl	8007390 <__hi0bits>
 8007922:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007926:	e7e2      	b.n	80078ee <__d2b+0x6a>
 8007928:	0800a71a 	.word	0x0800a71a
 800792c:	0800a72b 	.word	0x0800a72b

08007930 <__ssputs_r>:
 8007930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007934:	461f      	mov	r7, r3
 8007936:	688e      	ldr	r6, [r1, #8]
 8007938:	4682      	mov	sl, r0
 800793a:	42be      	cmp	r6, r7
 800793c:	460c      	mov	r4, r1
 800793e:	4690      	mov	r8, r2
 8007940:	680b      	ldr	r3, [r1, #0]
 8007942:	d82c      	bhi.n	800799e <__ssputs_r+0x6e>
 8007944:	898a      	ldrh	r2, [r1, #12]
 8007946:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800794a:	d026      	beq.n	800799a <__ssputs_r+0x6a>
 800794c:	6965      	ldr	r5, [r4, #20]
 800794e:	6909      	ldr	r1, [r1, #16]
 8007950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007954:	eba3 0901 	sub.w	r9, r3, r1
 8007958:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800795c:	1c7b      	adds	r3, r7, #1
 800795e:	444b      	add	r3, r9
 8007960:	106d      	asrs	r5, r5, #1
 8007962:	429d      	cmp	r5, r3
 8007964:	bf38      	it	cc
 8007966:	461d      	movcc	r5, r3
 8007968:	0553      	lsls	r3, r2, #21
 800796a:	d527      	bpl.n	80079bc <__ssputs_r+0x8c>
 800796c:	4629      	mov	r1, r5
 800796e:	f7ff fbdb 	bl	8007128 <_malloc_r>
 8007972:	4606      	mov	r6, r0
 8007974:	b360      	cbz	r0, 80079d0 <__ssputs_r+0xa0>
 8007976:	464a      	mov	r2, r9
 8007978:	6921      	ldr	r1, [r4, #16]
 800797a:	f7fe fce8 	bl	800634e <memcpy>
 800797e:	89a3      	ldrh	r3, [r4, #12]
 8007980:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	6126      	str	r6, [r4, #16]
 800798c:	444e      	add	r6, r9
 800798e:	6026      	str	r6, [r4, #0]
 8007990:	463e      	mov	r6, r7
 8007992:	6165      	str	r5, [r4, #20]
 8007994:	eba5 0509 	sub.w	r5, r5, r9
 8007998:	60a5      	str	r5, [r4, #8]
 800799a:	42be      	cmp	r6, r7
 800799c:	d900      	bls.n	80079a0 <__ssputs_r+0x70>
 800799e:	463e      	mov	r6, r7
 80079a0:	4632      	mov	r2, r6
 80079a2:	4641      	mov	r1, r8
 80079a4:	6820      	ldr	r0, [r4, #0]
 80079a6:	f000 f9c5 	bl	8007d34 <memmove>
 80079aa:	2000      	movs	r0, #0
 80079ac:	68a3      	ldr	r3, [r4, #8]
 80079ae:	1b9b      	subs	r3, r3, r6
 80079b0:	60a3      	str	r3, [r4, #8]
 80079b2:	6823      	ldr	r3, [r4, #0]
 80079b4:	4433      	add	r3, r6
 80079b6:	6023      	str	r3, [r4, #0]
 80079b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079bc:	462a      	mov	r2, r5
 80079be:	f000 fa27 	bl	8007e10 <_realloc_r>
 80079c2:	4606      	mov	r6, r0
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d1e0      	bne.n	800798a <__ssputs_r+0x5a>
 80079c8:	4650      	mov	r0, sl
 80079ca:	6921      	ldr	r1, [r4, #16]
 80079cc:	f7ff fb3c 	bl	8007048 <_free_r>
 80079d0:	230c      	movs	r3, #12
 80079d2:	f8ca 3000 	str.w	r3, [sl]
 80079d6:	89a3      	ldrh	r3, [r4, #12]
 80079d8:	f04f 30ff 	mov.w	r0, #4294967295
 80079dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079e0:	81a3      	strh	r3, [r4, #12]
 80079e2:	e7e9      	b.n	80079b8 <__ssputs_r+0x88>

080079e4 <_svfiprintf_r>:
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	4698      	mov	r8, r3
 80079ea:	898b      	ldrh	r3, [r1, #12]
 80079ec:	4607      	mov	r7, r0
 80079ee:	061b      	lsls	r3, r3, #24
 80079f0:	460d      	mov	r5, r1
 80079f2:	4614      	mov	r4, r2
 80079f4:	b09d      	sub	sp, #116	; 0x74
 80079f6:	d50e      	bpl.n	8007a16 <_svfiprintf_r+0x32>
 80079f8:	690b      	ldr	r3, [r1, #16]
 80079fa:	b963      	cbnz	r3, 8007a16 <_svfiprintf_r+0x32>
 80079fc:	2140      	movs	r1, #64	; 0x40
 80079fe:	f7ff fb93 	bl	8007128 <_malloc_r>
 8007a02:	6028      	str	r0, [r5, #0]
 8007a04:	6128      	str	r0, [r5, #16]
 8007a06:	b920      	cbnz	r0, 8007a12 <_svfiprintf_r+0x2e>
 8007a08:	230c      	movs	r3, #12
 8007a0a:	603b      	str	r3, [r7, #0]
 8007a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a10:	e0d0      	b.n	8007bb4 <_svfiprintf_r+0x1d0>
 8007a12:	2340      	movs	r3, #64	; 0x40
 8007a14:	616b      	str	r3, [r5, #20]
 8007a16:	2300      	movs	r3, #0
 8007a18:	9309      	str	r3, [sp, #36]	; 0x24
 8007a1a:	2320      	movs	r3, #32
 8007a1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a20:	2330      	movs	r3, #48	; 0x30
 8007a22:	f04f 0901 	mov.w	r9, #1
 8007a26:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a2a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8007bcc <_svfiprintf_r+0x1e8>
 8007a2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a32:	4623      	mov	r3, r4
 8007a34:	469a      	mov	sl, r3
 8007a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a3a:	b10a      	cbz	r2, 8007a40 <_svfiprintf_r+0x5c>
 8007a3c:	2a25      	cmp	r2, #37	; 0x25
 8007a3e:	d1f9      	bne.n	8007a34 <_svfiprintf_r+0x50>
 8007a40:	ebba 0b04 	subs.w	fp, sl, r4
 8007a44:	d00b      	beq.n	8007a5e <_svfiprintf_r+0x7a>
 8007a46:	465b      	mov	r3, fp
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f7ff ff6f 	bl	8007930 <__ssputs_r>
 8007a52:	3001      	adds	r0, #1
 8007a54:	f000 80a9 	beq.w	8007baa <_svfiprintf_r+0x1c6>
 8007a58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a5a:	445a      	add	r2, fp
 8007a5c:	9209      	str	r2, [sp, #36]	; 0x24
 8007a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	f000 80a1 	beq.w	8007baa <_svfiprintf_r+0x1c6>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a72:	f10a 0a01 	add.w	sl, sl, #1
 8007a76:	9304      	str	r3, [sp, #16]
 8007a78:	9307      	str	r3, [sp, #28]
 8007a7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a7e:	931a      	str	r3, [sp, #104]	; 0x68
 8007a80:	4654      	mov	r4, sl
 8007a82:	2205      	movs	r2, #5
 8007a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a88:	4850      	ldr	r0, [pc, #320]	; (8007bcc <_svfiprintf_r+0x1e8>)
 8007a8a:	f7fe fc52 	bl	8006332 <memchr>
 8007a8e:	9a04      	ldr	r2, [sp, #16]
 8007a90:	b9d8      	cbnz	r0, 8007aca <_svfiprintf_r+0xe6>
 8007a92:	06d0      	lsls	r0, r2, #27
 8007a94:	bf44      	itt	mi
 8007a96:	2320      	movmi	r3, #32
 8007a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a9c:	0711      	lsls	r1, r2, #28
 8007a9e:	bf44      	itt	mi
 8007aa0:	232b      	movmi	r3, #43	; 0x2b
 8007aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8007aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8007aac:	d015      	beq.n	8007ada <_svfiprintf_r+0xf6>
 8007aae:	4654      	mov	r4, sl
 8007ab0:	2000      	movs	r0, #0
 8007ab2:	f04f 0c0a 	mov.w	ip, #10
 8007ab6:	9a07      	ldr	r2, [sp, #28]
 8007ab8:	4621      	mov	r1, r4
 8007aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007abe:	3b30      	subs	r3, #48	; 0x30
 8007ac0:	2b09      	cmp	r3, #9
 8007ac2:	d94d      	bls.n	8007b60 <_svfiprintf_r+0x17c>
 8007ac4:	b1b0      	cbz	r0, 8007af4 <_svfiprintf_r+0x110>
 8007ac6:	9207      	str	r2, [sp, #28]
 8007ac8:	e014      	b.n	8007af4 <_svfiprintf_r+0x110>
 8007aca:	eba0 0308 	sub.w	r3, r0, r8
 8007ace:	fa09 f303 	lsl.w	r3, r9, r3
 8007ad2:	4313      	orrs	r3, r2
 8007ad4:	46a2      	mov	sl, r4
 8007ad6:	9304      	str	r3, [sp, #16]
 8007ad8:	e7d2      	b.n	8007a80 <_svfiprintf_r+0x9c>
 8007ada:	9b03      	ldr	r3, [sp, #12]
 8007adc:	1d19      	adds	r1, r3, #4
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	9103      	str	r1, [sp, #12]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bfbb      	ittet	lt
 8007ae6:	425b      	neglt	r3, r3
 8007ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8007aec:	9307      	strge	r3, [sp, #28]
 8007aee:	9307      	strlt	r3, [sp, #28]
 8007af0:	bfb8      	it	lt
 8007af2:	9204      	strlt	r2, [sp, #16]
 8007af4:	7823      	ldrb	r3, [r4, #0]
 8007af6:	2b2e      	cmp	r3, #46	; 0x2e
 8007af8:	d10c      	bne.n	8007b14 <_svfiprintf_r+0x130>
 8007afa:	7863      	ldrb	r3, [r4, #1]
 8007afc:	2b2a      	cmp	r3, #42	; 0x2a
 8007afe:	d134      	bne.n	8007b6a <_svfiprintf_r+0x186>
 8007b00:	9b03      	ldr	r3, [sp, #12]
 8007b02:	3402      	adds	r4, #2
 8007b04:	1d1a      	adds	r2, r3, #4
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	9203      	str	r2, [sp, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	bfb8      	it	lt
 8007b0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b12:	9305      	str	r3, [sp, #20]
 8007b14:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8007bd0 <_svfiprintf_r+0x1ec>
 8007b18:	2203      	movs	r2, #3
 8007b1a:	4650      	mov	r0, sl
 8007b1c:	7821      	ldrb	r1, [r4, #0]
 8007b1e:	f7fe fc08 	bl	8006332 <memchr>
 8007b22:	b138      	cbz	r0, 8007b34 <_svfiprintf_r+0x150>
 8007b24:	2240      	movs	r2, #64	; 0x40
 8007b26:	9b04      	ldr	r3, [sp, #16]
 8007b28:	eba0 000a 	sub.w	r0, r0, sl
 8007b2c:	4082      	lsls	r2, r0
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	3401      	adds	r4, #1
 8007b32:	9304      	str	r3, [sp, #16]
 8007b34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b38:	2206      	movs	r2, #6
 8007b3a:	4826      	ldr	r0, [pc, #152]	; (8007bd4 <_svfiprintf_r+0x1f0>)
 8007b3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b40:	f7fe fbf7 	bl	8006332 <memchr>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	d038      	beq.n	8007bba <_svfiprintf_r+0x1d6>
 8007b48:	4b23      	ldr	r3, [pc, #140]	; (8007bd8 <_svfiprintf_r+0x1f4>)
 8007b4a:	bb1b      	cbnz	r3, 8007b94 <_svfiprintf_r+0x1b0>
 8007b4c:	9b03      	ldr	r3, [sp, #12]
 8007b4e:	3307      	adds	r3, #7
 8007b50:	f023 0307 	bic.w	r3, r3, #7
 8007b54:	3308      	adds	r3, #8
 8007b56:	9303      	str	r3, [sp, #12]
 8007b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b5a:	4433      	add	r3, r6
 8007b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b5e:	e768      	b.n	8007a32 <_svfiprintf_r+0x4e>
 8007b60:	460c      	mov	r4, r1
 8007b62:	2001      	movs	r0, #1
 8007b64:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b68:	e7a6      	b.n	8007ab8 <_svfiprintf_r+0xd4>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f04f 0c0a 	mov.w	ip, #10
 8007b70:	4619      	mov	r1, r3
 8007b72:	3401      	adds	r4, #1
 8007b74:	9305      	str	r3, [sp, #20]
 8007b76:	4620      	mov	r0, r4
 8007b78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b7c:	3a30      	subs	r2, #48	; 0x30
 8007b7e:	2a09      	cmp	r2, #9
 8007b80:	d903      	bls.n	8007b8a <_svfiprintf_r+0x1a6>
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0c6      	beq.n	8007b14 <_svfiprintf_r+0x130>
 8007b86:	9105      	str	r1, [sp, #20]
 8007b88:	e7c4      	b.n	8007b14 <_svfiprintf_r+0x130>
 8007b8a:	4604      	mov	r4, r0
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b92:	e7f0      	b.n	8007b76 <_svfiprintf_r+0x192>
 8007b94:	ab03      	add	r3, sp, #12
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	462a      	mov	r2, r5
 8007b9a:	4638      	mov	r0, r7
 8007b9c:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <_svfiprintf_r+0x1f8>)
 8007b9e:	a904      	add	r1, sp, #16
 8007ba0:	f7fd fe60 	bl	8005864 <_printf_float>
 8007ba4:	1c42      	adds	r2, r0, #1
 8007ba6:	4606      	mov	r6, r0
 8007ba8:	d1d6      	bne.n	8007b58 <_svfiprintf_r+0x174>
 8007baa:	89ab      	ldrh	r3, [r5, #12]
 8007bac:	065b      	lsls	r3, r3, #25
 8007bae:	f53f af2d 	bmi.w	8007a0c <_svfiprintf_r+0x28>
 8007bb2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007bb4:	b01d      	add	sp, #116	; 0x74
 8007bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bba:	ab03      	add	r3, sp, #12
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	462a      	mov	r2, r5
 8007bc0:	4638      	mov	r0, r7
 8007bc2:	4b06      	ldr	r3, [pc, #24]	; (8007bdc <_svfiprintf_r+0x1f8>)
 8007bc4:	a904      	add	r1, sp, #16
 8007bc6:	f7fe f8ed 	bl	8005da4 <_printf_i>
 8007bca:	e7eb      	b.n	8007ba4 <_svfiprintf_r+0x1c0>
 8007bcc:	0800a884 	.word	0x0800a884
 8007bd0:	0800a88a 	.word	0x0800a88a
 8007bd4:	0800a88e 	.word	0x0800a88e
 8007bd8:	08005865 	.word	0x08005865
 8007bdc:	08007931 	.word	0x08007931

08007be0 <__sflush_r>:
 8007be0:	898a      	ldrh	r2, [r1, #12]
 8007be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be4:	4605      	mov	r5, r0
 8007be6:	0710      	lsls	r0, r2, #28
 8007be8:	460c      	mov	r4, r1
 8007bea:	d457      	bmi.n	8007c9c <__sflush_r+0xbc>
 8007bec:	684b      	ldr	r3, [r1, #4]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	dc04      	bgt.n	8007bfc <__sflush_r+0x1c>
 8007bf2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	dc01      	bgt.n	8007bfc <__sflush_r+0x1c>
 8007bf8:	2000      	movs	r0, #0
 8007bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bfe:	2e00      	cmp	r6, #0
 8007c00:	d0fa      	beq.n	8007bf8 <__sflush_r+0x18>
 8007c02:	2300      	movs	r3, #0
 8007c04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c08:	682f      	ldr	r7, [r5, #0]
 8007c0a:	6a21      	ldr	r1, [r4, #32]
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	d032      	beq.n	8007c76 <__sflush_r+0x96>
 8007c10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	075a      	lsls	r2, r3, #29
 8007c16:	d505      	bpl.n	8007c24 <__sflush_r+0x44>
 8007c18:	6863      	ldr	r3, [r4, #4]
 8007c1a:	1ac0      	subs	r0, r0, r3
 8007c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c1e:	b10b      	cbz	r3, 8007c24 <__sflush_r+0x44>
 8007c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c22:	1ac0      	subs	r0, r0, r3
 8007c24:	2300      	movs	r3, #0
 8007c26:	4602      	mov	r2, r0
 8007c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c2a:	4628      	mov	r0, r5
 8007c2c:	6a21      	ldr	r1, [r4, #32]
 8007c2e:	47b0      	blx	r6
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	89a3      	ldrh	r3, [r4, #12]
 8007c34:	d106      	bne.n	8007c44 <__sflush_r+0x64>
 8007c36:	6829      	ldr	r1, [r5, #0]
 8007c38:	291d      	cmp	r1, #29
 8007c3a:	d82b      	bhi.n	8007c94 <__sflush_r+0xb4>
 8007c3c:	4a28      	ldr	r2, [pc, #160]	; (8007ce0 <__sflush_r+0x100>)
 8007c3e:	410a      	asrs	r2, r1
 8007c40:	07d6      	lsls	r6, r2, #31
 8007c42:	d427      	bmi.n	8007c94 <__sflush_r+0xb4>
 8007c44:	2200      	movs	r2, #0
 8007c46:	6062      	str	r2, [r4, #4]
 8007c48:	6922      	ldr	r2, [r4, #16]
 8007c4a:	04d9      	lsls	r1, r3, #19
 8007c4c:	6022      	str	r2, [r4, #0]
 8007c4e:	d504      	bpl.n	8007c5a <__sflush_r+0x7a>
 8007c50:	1c42      	adds	r2, r0, #1
 8007c52:	d101      	bne.n	8007c58 <__sflush_r+0x78>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	b903      	cbnz	r3, 8007c5a <__sflush_r+0x7a>
 8007c58:	6560      	str	r0, [r4, #84]	; 0x54
 8007c5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c5c:	602f      	str	r7, [r5, #0]
 8007c5e:	2900      	cmp	r1, #0
 8007c60:	d0ca      	beq.n	8007bf8 <__sflush_r+0x18>
 8007c62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c66:	4299      	cmp	r1, r3
 8007c68:	d002      	beq.n	8007c70 <__sflush_r+0x90>
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	f7ff f9ec 	bl	8007048 <_free_r>
 8007c70:	2000      	movs	r0, #0
 8007c72:	6360      	str	r0, [r4, #52]	; 0x34
 8007c74:	e7c1      	b.n	8007bfa <__sflush_r+0x1a>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4628      	mov	r0, r5
 8007c7a:	47b0      	blx	r6
 8007c7c:	1c41      	adds	r1, r0, #1
 8007c7e:	d1c8      	bne.n	8007c12 <__sflush_r+0x32>
 8007c80:	682b      	ldr	r3, [r5, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0c5      	beq.n	8007c12 <__sflush_r+0x32>
 8007c86:	2b1d      	cmp	r3, #29
 8007c88:	d001      	beq.n	8007c8e <__sflush_r+0xae>
 8007c8a:	2b16      	cmp	r3, #22
 8007c8c:	d101      	bne.n	8007c92 <__sflush_r+0xb2>
 8007c8e:	602f      	str	r7, [r5, #0]
 8007c90:	e7b2      	b.n	8007bf8 <__sflush_r+0x18>
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c98:	81a3      	strh	r3, [r4, #12]
 8007c9a:	e7ae      	b.n	8007bfa <__sflush_r+0x1a>
 8007c9c:	690f      	ldr	r7, [r1, #16]
 8007c9e:	2f00      	cmp	r7, #0
 8007ca0:	d0aa      	beq.n	8007bf8 <__sflush_r+0x18>
 8007ca2:	0793      	lsls	r3, r2, #30
 8007ca4:	bf18      	it	ne
 8007ca6:	2300      	movne	r3, #0
 8007ca8:	680e      	ldr	r6, [r1, #0]
 8007caa:	bf08      	it	eq
 8007cac:	694b      	ldreq	r3, [r1, #20]
 8007cae:	1bf6      	subs	r6, r6, r7
 8007cb0:	600f      	str	r7, [r1, #0]
 8007cb2:	608b      	str	r3, [r1, #8]
 8007cb4:	2e00      	cmp	r6, #0
 8007cb6:	dd9f      	ble.n	8007bf8 <__sflush_r+0x18>
 8007cb8:	4633      	mov	r3, r6
 8007cba:	463a      	mov	r2, r7
 8007cbc:	4628      	mov	r0, r5
 8007cbe:	6a21      	ldr	r1, [r4, #32]
 8007cc0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007cc4:	47e0      	blx	ip
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	dc06      	bgt.n	8007cd8 <__sflush_r+0xf8>
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cd4:	81a3      	strh	r3, [r4, #12]
 8007cd6:	e790      	b.n	8007bfa <__sflush_r+0x1a>
 8007cd8:	4407      	add	r7, r0
 8007cda:	1a36      	subs	r6, r6, r0
 8007cdc:	e7ea      	b.n	8007cb4 <__sflush_r+0xd4>
 8007cde:	bf00      	nop
 8007ce0:	dfbffffe 	.word	0xdfbffffe

08007ce4 <_fflush_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	690b      	ldr	r3, [r1, #16]
 8007ce8:	4605      	mov	r5, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	b913      	cbnz	r3, 8007cf4 <_fflush_r+0x10>
 8007cee:	2500      	movs	r5, #0
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	b118      	cbz	r0, 8007cfe <_fflush_r+0x1a>
 8007cf6:	6a03      	ldr	r3, [r0, #32]
 8007cf8:	b90b      	cbnz	r3, 8007cfe <_fflush_r+0x1a>
 8007cfa:	f7fe fa01 	bl	8006100 <__sinit>
 8007cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d0f3      	beq.n	8007cee <_fflush_r+0xa>
 8007d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d08:	07d0      	lsls	r0, r2, #31
 8007d0a:	d404      	bmi.n	8007d16 <_fflush_r+0x32>
 8007d0c:	0599      	lsls	r1, r3, #22
 8007d0e:	d402      	bmi.n	8007d16 <_fflush_r+0x32>
 8007d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d12:	f7fe fb0c 	bl	800632e <__retarget_lock_acquire_recursive>
 8007d16:	4628      	mov	r0, r5
 8007d18:	4621      	mov	r1, r4
 8007d1a:	f7ff ff61 	bl	8007be0 <__sflush_r>
 8007d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d20:	4605      	mov	r5, r0
 8007d22:	07da      	lsls	r2, r3, #31
 8007d24:	d4e4      	bmi.n	8007cf0 <_fflush_r+0xc>
 8007d26:	89a3      	ldrh	r3, [r4, #12]
 8007d28:	059b      	lsls	r3, r3, #22
 8007d2a:	d4e1      	bmi.n	8007cf0 <_fflush_r+0xc>
 8007d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d2e:	f7fe faff 	bl	8006330 <__retarget_lock_release_recursive>
 8007d32:	e7dd      	b.n	8007cf0 <_fflush_r+0xc>

08007d34 <memmove>:
 8007d34:	4288      	cmp	r0, r1
 8007d36:	b510      	push	{r4, lr}
 8007d38:	eb01 0402 	add.w	r4, r1, r2
 8007d3c:	d902      	bls.n	8007d44 <memmove+0x10>
 8007d3e:	4284      	cmp	r4, r0
 8007d40:	4623      	mov	r3, r4
 8007d42:	d807      	bhi.n	8007d54 <memmove+0x20>
 8007d44:	1e43      	subs	r3, r0, #1
 8007d46:	42a1      	cmp	r1, r4
 8007d48:	d008      	beq.n	8007d5c <memmove+0x28>
 8007d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007d52:	e7f8      	b.n	8007d46 <memmove+0x12>
 8007d54:	4601      	mov	r1, r0
 8007d56:	4402      	add	r2, r0
 8007d58:	428a      	cmp	r2, r1
 8007d5a:	d100      	bne.n	8007d5e <memmove+0x2a>
 8007d5c:	bd10      	pop	{r4, pc}
 8007d5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007d66:	e7f7      	b.n	8007d58 <memmove+0x24>

08007d68 <_sbrk_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	4d05      	ldr	r5, [pc, #20]	; (8007d84 <_sbrk_r+0x1c>)
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	602b      	str	r3, [r5, #0]
 8007d74:	f7fa fc5a 	bl	800262c <_sbrk>
 8007d78:	1c43      	adds	r3, r0, #1
 8007d7a:	d102      	bne.n	8007d82 <_sbrk_r+0x1a>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	b103      	cbz	r3, 8007d82 <_sbrk_r+0x1a>
 8007d80:	6023      	str	r3, [r4, #0]
 8007d82:	bd38      	pop	{r3, r4, r5, pc}
 8007d84:	20000570 	.word	0x20000570

08007d88 <__assert_func>:
 8007d88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d8a:	4614      	mov	r4, r2
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	4b09      	ldr	r3, [pc, #36]	; (8007db4 <__assert_func+0x2c>)
 8007d90:	4605      	mov	r5, r0
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68d8      	ldr	r0, [r3, #12]
 8007d96:	b14c      	cbz	r4, 8007dac <__assert_func+0x24>
 8007d98:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <__assert_func+0x30>)
 8007d9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d9e:	9100      	str	r1, [sp, #0]
 8007da0:	462b      	mov	r3, r5
 8007da2:	4906      	ldr	r1, [pc, #24]	; (8007dbc <__assert_func+0x34>)
 8007da4:	f000 f870 	bl	8007e88 <fiprintf>
 8007da8:	f000 f880 	bl	8007eac <abort>
 8007dac:	4b04      	ldr	r3, [pc, #16]	; (8007dc0 <__assert_func+0x38>)
 8007dae:	461c      	mov	r4, r3
 8007db0:	e7f3      	b.n	8007d9a <__assert_func+0x12>
 8007db2:	bf00      	nop
 8007db4:	2000007c 	.word	0x2000007c
 8007db8:	0800a89f 	.word	0x0800a89f
 8007dbc:	0800a8ac 	.word	0x0800a8ac
 8007dc0:	0800a8da 	.word	0x0800a8da

08007dc4 <_calloc_r>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	fba1 5402 	umull	r5, r4, r1, r2
 8007dca:	b934      	cbnz	r4, 8007dda <_calloc_r+0x16>
 8007dcc:	4629      	mov	r1, r5
 8007dce:	f7ff f9ab 	bl	8007128 <_malloc_r>
 8007dd2:	4606      	mov	r6, r0
 8007dd4:	b928      	cbnz	r0, 8007de2 <_calloc_r+0x1e>
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	bd70      	pop	{r4, r5, r6, pc}
 8007dda:	220c      	movs	r2, #12
 8007ddc:	2600      	movs	r6, #0
 8007dde:	6002      	str	r2, [r0, #0]
 8007de0:	e7f9      	b.n	8007dd6 <_calloc_r+0x12>
 8007de2:	462a      	mov	r2, r5
 8007de4:	4621      	mov	r1, r4
 8007de6:	f7fe fa24 	bl	8006232 <memset>
 8007dea:	e7f4      	b.n	8007dd6 <_calloc_r+0x12>

08007dec <__ascii_mbtowc>:
 8007dec:	b082      	sub	sp, #8
 8007dee:	b901      	cbnz	r1, 8007df2 <__ascii_mbtowc+0x6>
 8007df0:	a901      	add	r1, sp, #4
 8007df2:	b142      	cbz	r2, 8007e06 <__ascii_mbtowc+0x1a>
 8007df4:	b14b      	cbz	r3, 8007e0a <__ascii_mbtowc+0x1e>
 8007df6:	7813      	ldrb	r3, [r2, #0]
 8007df8:	600b      	str	r3, [r1, #0]
 8007dfa:	7812      	ldrb	r2, [r2, #0]
 8007dfc:	1e10      	subs	r0, r2, #0
 8007dfe:	bf18      	it	ne
 8007e00:	2001      	movne	r0, #1
 8007e02:	b002      	add	sp, #8
 8007e04:	4770      	bx	lr
 8007e06:	4610      	mov	r0, r2
 8007e08:	e7fb      	b.n	8007e02 <__ascii_mbtowc+0x16>
 8007e0a:	f06f 0001 	mvn.w	r0, #1
 8007e0e:	e7f8      	b.n	8007e02 <__ascii_mbtowc+0x16>

08007e10 <_realloc_r>:
 8007e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e14:	4680      	mov	r8, r0
 8007e16:	4614      	mov	r4, r2
 8007e18:	460e      	mov	r6, r1
 8007e1a:	b921      	cbnz	r1, 8007e26 <_realloc_r+0x16>
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e22:	f7ff b981 	b.w	8007128 <_malloc_r>
 8007e26:	b92a      	cbnz	r2, 8007e34 <_realloc_r+0x24>
 8007e28:	f7ff f90e 	bl	8007048 <_free_r>
 8007e2c:	4625      	mov	r5, r4
 8007e2e:	4628      	mov	r0, r5
 8007e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e34:	f000 f841 	bl	8007eba <_malloc_usable_size_r>
 8007e38:	4284      	cmp	r4, r0
 8007e3a:	4607      	mov	r7, r0
 8007e3c:	d802      	bhi.n	8007e44 <_realloc_r+0x34>
 8007e3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e42:	d812      	bhi.n	8007e6a <_realloc_r+0x5a>
 8007e44:	4621      	mov	r1, r4
 8007e46:	4640      	mov	r0, r8
 8007e48:	f7ff f96e 	bl	8007128 <_malloc_r>
 8007e4c:	4605      	mov	r5, r0
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d0ed      	beq.n	8007e2e <_realloc_r+0x1e>
 8007e52:	42bc      	cmp	r4, r7
 8007e54:	4622      	mov	r2, r4
 8007e56:	4631      	mov	r1, r6
 8007e58:	bf28      	it	cs
 8007e5a:	463a      	movcs	r2, r7
 8007e5c:	f7fe fa77 	bl	800634e <memcpy>
 8007e60:	4631      	mov	r1, r6
 8007e62:	4640      	mov	r0, r8
 8007e64:	f7ff f8f0 	bl	8007048 <_free_r>
 8007e68:	e7e1      	b.n	8007e2e <_realloc_r+0x1e>
 8007e6a:	4635      	mov	r5, r6
 8007e6c:	e7df      	b.n	8007e2e <_realloc_r+0x1e>

08007e6e <__ascii_wctomb>:
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4608      	mov	r0, r1
 8007e72:	b141      	cbz	r1, 8007e86 <__ascii_wctomb+0x18>
 8007e74:	2aff      	cmp	r2, #255	; 0xff
 8007e76:	d904      	bls.n	8007e82 <__ascii_wctomb+0x14>
 8007e78:	228a      	movs	r2, #138	; 0x8a
 8007e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	4770      	bx	lr
 8007e82:	2001      	movs	r0, #1
 8007e84:	700a      	strb	r2, [r1, #0]
 8007e86:	4770      	bx	lr

08007e88 <fiprintf>:
 8007e88:	b40e      	push	{r1, r2, r3}
 8007e8a:	b503      	push	{r0, r1, lr}
 8007e8c:	4601      	mov	r1, r0
 8007e8e:	ab03      	add	r3, sp, #12
 8007e90:	4805      	ldr	r0, [pc, #20]	; (8007ea8 <fiprintf+0x20>)
 8007e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e96:	6800      	ldr	r0, [r0, #0]
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	f000 f83d 	bl	8007f18 <_vfiprintf_r>
 8007e9e:	b002      	add	sp, #8
 8007ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea4:	b003      	add	sp, #12
 8007ea6:	4770      	bx	lr
 8007ea8:	2000007c 	.word	0x2000007c

08007eac <abort>:
 8007eac:	2006      	movs	r0, #6
 8007eae:	b508      	push	{r3, lr}
 8007eb0:	f000 fa0a 	bl	80082c8 <raise>
 8007eb4:	2001      	movs	r0, #1
 8007eb6:	f7fa fb46 	bl	8002546 <_exit>

08007eba <_malloc_usable_size_r>:
 8007eba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ebe:	1f18      	subs	r0, r3, #4
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	bfbc      	itt	lt
 8007ec4:	580b      	ldrlt	r3, [r1, r0]
 8007ec6:	18c0      	addlt	r0, r0, r3
 8007ec8:	4770      	bx	lr

08007eca <__sfputc_r>:
 8007eca:	6893      	ldr	r3, [r2, #8]
 8007ecc:	b410      	push	{r4}
 8007ece:	3b01      	subs	r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	6093      	str	r3, [r2, #8]
 8007ed4:	da07      	bge.n	8007ee6 <__sfputc_r+0x1c>
 8007ed6:	6994      	ldr	r4, [r2, #24]
 8007ed8:	42a3      	cmp	r3, r4
 8007eda:	db01      	blt.n	8007ee0 <__sfputc_r+0x16>
 8007edc:	290a      	cmp	r1, #10
 8007ede:	d102      	bne.n	8007ee6 <__sfputc_r+0x1c>
 8007ee0:	bc10      	pop	{r4}
 8007ee2:	f000 b933 	b.w	800814c <__swbuf_r>
 8007ee6:	6813      	ldr	r3, [r2, #0]
 8007ee8:	1c58      	adds	r0, r3, #1
 8007eea:	6010      	str	r0, [r2, #0]
 8007eec:	7019      	strb	r1, [r3, #0]
 8007eee:	4608      	mov	r0, r1
 8007ef0:	bc10      	pop	{r4}
 8007ef2:	4770      	bx	lr

08007ef4 <__sfputs_r>:
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	4606      	mov	r6, r0
 8007ef8:	460f      	mov	r7, r1
 8007efa:	4614      	mov	r4, r2
 8007efc:	18d5      	adds	r5, r2, r3
 8007efe:	42ac      	cmp	r4, r5
 8007f00:	d101      	bne.n	8007f06 <__sfputs_r+0x12>
 8007f02:	2000      	movs	r0, #0
 8007f04:	e007      	b.n	8007f16 <__sfputs_r+0x22>
 8007f06:	463a      	mov	r2, r7
 8007f08:	4630      	mov	r0, r6
 8007f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f0e:	f7ff ffdc 	bl	8007eca <__sfputc_r>
 8007f12:	1c43      	adds	r3, r0, #1
 8007f14:	d1f3      	bne.n	8007efe <__sfputs_r+0xa>
 8007f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f18 <_vfiprintf_r>:
 8007f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1c:	460d      	mov	r5, r1
 8007f1e:	4614      	mov	r4, r2
 8007f20:	4698      	mov	r8, r3
 8007f22:	4606      	mov	r6, r0
 8007f24:	b09d      	sub	sp, #116	; 0x74
 8007f26:	b118      	cbz	r0, 8007f30 <_vfiprintf_r+0x18>
 8007f28:	6a03      	ldr	r3, [r0, #32]
 8007f2a:	b90b      	cbnz	r3, 8007f30 <_vfiprintf_r+0x18>
 8007f2c:	f7fe f8e8 	bl	8006100 <__sinit>
 8007f30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f32:	07d9      	lsls	r1, r3, #31
 8007f34:	d405      	bmi.n	8007f42 <_vfiprintf_r+0x2a>
 8007f36:	89ab      	ldrh	r3, [r5, #12]
 8007f38:	059a      	lsls	r2, r3, #22
 8007f3a:	d402      	bmi.n	8007f42 <_vfiprintf_r+0x2a>
 8007f3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f3e:	f7fe f9f6 	bl	800632e <__retarget_lock_acquire_recursive>
 8007f42:	89ab      	ldrh	r3, [r5, #12]
 8007f44:	071b      	lsls	r3, r3, #28
 8007f46:	d501      	bpl.n	8007f4c <_vfiprintf_r+0x34>
 8007f48:	692b      	ldr	r3, [r5, #16]
 8007f4a:	b99b      	cbnz	r3, 8007f74 <_vfiprintf_r+0x5c>
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f000 f93a 	bl	80081c8 <__swsetup_r>
 8007f54:	b170      	cbz	r0, 8007f74 <_vfiprintf_r+0x5c>
 8007f56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f58:	07dc      	lsls	r4, r3, #31
 8007f5a:	d504      	bpl.n	8007f66 <_vfiprintf_r+0x4e>
 8007f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007f60:	b01d      	add	sp, #116	; 0x74
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	89ab      	ldrh	r3, [r5, #12]
 8007f68:	0598      	lsls	r0, r3, #22
 8007f6a:	d4f7      	bmi.n	8007f5c <_vfiprintf_r+0x44>
 8007f6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f6e:	f7fe f9df 	bl	8006330 <__retarget_lock_release_recursive>
 8007f72:	e7f3      	b.n	8007f5c <_vfiprintf_r+0x44>
 8007f74:	2300      	movs	r3, #0
 8007f76:	9309      	str	r3, [sp, #36]	; 0x24
 8007f78:	2320      	movs	r3, #32
 8007f7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f7e:	2330      	movs	r3, #48	; 0x30
 8007f80:	f04f 0901 	mov.w	r9, #1
 8007f84:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f88:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008138 <_vfiprintf_r+0x220>
 8007f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f90:	4623      	mov	r3, r4
 8007f92:	469a      	mov	sl, r3
 8007f94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f98:	b10a      	cbz	r2, 8007f9e <_vfiprintf_r+0x86>
 8007f9a:	2a25      	cmp	r2, #37	; 0x25
 8007f9c:	d1f9      	bne.n	8007f92 <_vfiprintf_r+0x7a>
 8007f9e:	ebba 0b04 	subs.w	fp, sl, r4
 8007fa2:	d00b      	beq.n	8007fbc <_vfiprintf_r+0xa4>
 8007fa4:	465b      	mov	r3, fp
 8007fa6:	4622      	mov	r2, r4
 8007fa8:	4629      	mov	r1, r5
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7ff ffa2 	bl	8007ef4 <__sfputs_r>
 8007fb0:	3001      	adds	r0, #1
 8007fb2:	f000 80a9 	beq.w	8008108 <_vfiprintf_r+0x1f0>
 8007fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fb8:	445a      	add	r2, fp
 8007fba:	9209      	str	r2, [sp, #36]	; 0x24
 8007fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 80a1 	beq.w	8008108 <_vfiprintf_r+0x1f0>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fd0:	f10a 0a01 	add.w	sl, sl, #1
 8007fd4:	9304      	str	r3, [sp, #16]
 8007fd6:	9307      	str	r3, [sp, #28]
 8007fd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fdc:	931a      	str	r3, [sp, #104]	; 0x68
 8007fde:	4654      	mov	r4, sl
 8007fe0:	2205      	movs	r2, #5
 8007fe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fe6:	4854      	ldr	r0, [pc, #336]	; (8008138 <_vfiprintf_r+0x220>)
 8007fe8:	f7fe f9a3 	bl	8006332 <memchr>
 8007fec:	9a04      	ldr	r2, [sp, #16]
 8007fee:	b9d8      	cbnz	r0, 8008028 <_vfiprintf_r+0x110>
 8007ff0:	06d1      	lsls	r1, r2, #27
 8007ff2:	bf44      	itt	mi
 8007ff4:	2320      	movmi	r3, #32
 8007ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ffa:	0713      	lsls	r3, r2, #28
 8007ffc:	bf44      	itt	mi
 8007ffe:	232b      	movmi	r3, #43	; 0x2b
 8008000:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008004:	f89a 3000 	ldrb.w	r3, [sl]
 8008008:	2b2a      	cmp	r3, #42	; 0x2a
 800800a:	d015      	beq.n	8008038 <_vfiprintf_r+0x120>
 800800c:	4654      	mov	r4, sl
 800800e:	2000      	movs	r0, #0
 8008010:	f04f 0c0a 	mov.w	ip, #10
 8008014:	9a07      	ldr	r2, [sp, #28]
 8008016:	4621      	mov	r1, r4
 8008018:	f811 3b01 	ldrb.w	r3, [r1], #1
 800801c:	3b30      	subs	r3, #48	; 0x30
 800801e:	2b09      	cmp	r3, #9
 8008020:	d94d      	bls.n	80080be <_vfiprintf_r+0x1a6>
 8008022:	b1b0      	cbz	r0, 8008052 <_vfiprintf_r+0x13a>
 8008024:	9207      	str	r2, [sp, #28]
 8008026:	e014      	b.n	8008052 <_vfiprintf_r+0x13a>
 8008028:	eba0 0308 	sub.w	r3, r0, r8
 800802c:	fa09 f303 	lsl.w	r3, r9, r3
 8008030:	4313      	orrs	r3, r2
 8008032:	46a2      	mov	sl, r4
 8008034:	9304      	str	r3, [sp, #16]
 8008036:	e7d2      	b.n	8007fde <_vfiprintf_r+0xc6>
 8008038:	9b03      	ldr	r3, [sp, #12]
 800803a:	1d19      	adds	r1, r3, #4
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	9103      	str	r1, [sp, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	bfbb      	ittet	lt
 8008044:	425b      	neglt	r3, r3
 8008046:	f042 0202 	orrlt.w	r2, r2, #2
 800804a:	9307      	strge	r3, [sp, #28]
 800804c:	9307      	strlt	r3, [sp, #28]
 800804e:	bfb8      	it	lt
 8008050:	9204      	strlt	r2, [sp, #16]
 8008052:	7823      	ldrb	r3, [r4, #0]
 8008054:	2b2e      	cmp	r3, #46	; 0x2e
 8008056:	d10c      	bne.n	8008072 <_vfiprintf_r+0x15a>
 8008058:	7863      	ldrb	r3, [r4, #1]
 800805a:	2b2a      	cmp	r3, #42	; 0x2a
 800805c:	d134      	bne.n	80080c8 <_vfiprintf_r+0x1b0>
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	3402      	adds	r4, #2
 8008062:	1d1a      	adds	r2, r3, #4
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	9203      	str	r2, [sp, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	bfb8      	it	lt
 800806c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008070:	9305      	str	r3, [sp, #20]
 8008072:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800813c <_vfiprintf_r+0x224>
 8008076:	2203      	movs	r2, #3
 8008078:	4650      	mov	r0, sl
 800807a:	7821      	ldrb	r1, [r4, #0]
 800807c:	f7fe f959 	bl	8006332 <memchr>
 8008080:	b138      	cbz	r0, 8008092 <_vfiprintf_r+0x17a>
 8008082:	2240      	movs	r2, #64	; 0x40
 8008084:	9b04      	ldr	r3, [sp, #16]
 8008086:	eba0 000a 	sub.w	r0, r0, sl
 800808a:	4082      	lsls	r2, r0
 800808c:	4313      	orrs	r3, r2
 800808e:	3401      	adds	r4, #1
 8008090:	9304      	str	r3, [sp, #16]
 8008092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008096:	2206      	movs	r2, #6
 8008098:	4829      	ldr	r0, [pc, #164]	; (8008140 <_vfiprintf_r+0x228>)
 800809a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800809e:	f7fe f948 	bl	8006332 <memchr>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d03f      	beq.n	8008126 <_vfiprintf_r+0x20e>
 80080a6:	4b27      	ldr	r3, [pc, #156]	; (8008144 <_vfiprintf_r+0x22c>)
 80080a8:	bb1b      	cbnz	r3, 80080f2 <_vfiprintf_r+0x1da>
 80080aa:	9b03      	ldr	r3, [sp, #12]
 80080ac:	3307      	adds	r3, #7
 80080ae:	f023 0307 	bic.w	r3, r3, #7
 80080b2:	3308      	adds	r3, #8
 80080b4:	9303      	str	r3, [sp, #12]
 80080b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b8:	443b      	add	r3, r7
 80080ba:	9309      	str	r3, [sp, #36]	; 0x24
 80080bc:	e768      	b.n	8007f90 <_vfiprintf_r+0x78>
 80080be:	460c      	mov	r4, r1
 80080c0:	2001      	movs	r0, #1
 80080c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80080c6:	e7a6      	b.n	8008016 <_vfiprintf_r+0xfe>
 80080c8:	2300      	movs	r3, #0
 80080ca:	f04f 0c0a 	mov.w	ip, #10
 80080ce:	4619      	mov	r1, r3
 80080d0:	3401      	adds	r4, #1
 80080d2:	9305      	str	r3, [sp, #20]
 80080d4:	4620      	mov	r0, r4
 80080d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080da:	3a30      	subs	r2, #48	; 0x30
 80080dc:	2a09      	cmp	r2, #9
 80080de:	d903      	bls.n	80080e8 <_vfiprintf_r+0x1d0>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0c6      	beq.n	8008072 <_vfiprintf_r+0x15a>
 80080e4:	9105      	str	r1, [sp, #20]
 80080e6:	e7c4      	b.n	8008072 <_vfiprintf_r+0x15a>
 80080e8:	4604      	mov	r4, r0
 80080ea:	2301      	movs	r3, #1
 80080ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80080f0:	e7f0      	b.n	80080d4 <_vfiprintf_r+0x1bc>
 80080f2:	ab03      	add	r3, sp, #12
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	462a      	mov	r2, r5
 80080f8:	4630      	mov	r0, r6
 80080fa:	4b13      	ldr	r3, [pc, #76]	; (8008148 <_vfiprintf_r+0x230>)
 80080fc:	a904      	add	r1, sp, #16
 80080fe:	f7fd fbb1 	bl	8005864 <_printf_float>
 8008102:	4607      	mov	r7, r0
 8008104:	1c78      	adds	r0, r7, #1
 8008106:	d1d6      	bne.n	80080b6 <_vfiprintf_r+0x19e>
 8008108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800810a:	07d9      	lsls	r1, r3, #31
 800810c:	d405      	bmi.n	800811a <_vfiprintf_r+0x202>
 800810e:	89ab      	ldrh	r3, [r5, #12]
 8008110:	059a      	lsls	r2, r3, #22
 8008112:	d402      	bmi.n	800811a <_vfiprintf_r+0x202>
 8008114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008116:	f7fe f90b 	bl	8006330 <__retarget_lock_release_recursive>
 800811a:	89ab      	ldrh	r3, [r5, #12]
 800811c:	065b      	lsls	r3, r3, #25
 800811e:	f53f af1d 	bmi.w	8007f5c <_vfiprintf_r+0x44>
 8008122:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008124:	e71c      	b.n	8007f60 <_vfiprintf_r+0x48>
 8008126:	ab03      	add	r3, sp, #12
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	462a      	mov	r2, r5
 800812c:	4630      	mov	r0, r6
 800812e:	4b06      	ldr	r3, [pc, #24]	; (8008148 <_vfiprintf_r+0x230>)
 8008130:	a904      	add	r1, sp, #16
 8008132:	f7fd fe37 	bl	8005da4 <_printf_i>
 8008136:	e7e4      	b.n	8008102 <_vfiprintf_r+0x1ea>
 8008138:	0800a884 	.word	0x0800a884
 800813c:	0800a88a 	.word	0x0800a88a
 8008140:	0800a88e 	.word	0x0800a88e
 8008144:	08005865 	.word	0x08005865
 8008148:	08007ef5 	.word	0x08007ef5

0800814c <__swbuf_r>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	460e      	mov	r6, r1
 8008150:	4614      	mov	r4, r2
 8008152:	4605      	mov	r5, r0
 8008154:	b118      	cbz	r0, 800815e <__swbuf_r+0x12>
 8008156:	6a03      	ldr	r3, [r0, #32]
 8008158:	b90b      	cbnz	r3, 800815e <__swbuf_r+0x12>
 800815a:	f7fd ffd1 	bl	8006100 <__sinit>
 800815e:	69a3      	ldr	r3, [r4, #24]
 8008160:	60a3      	str	r3, [r4, #8]
 8008162:	89a3      	ldrh	r3, [r4, #12]
 8008164:	071a      	lsls	r2, r3, #28
 8008166:	d525      	bpl.n	80081b4 <__swbuf_r+0x68>
 8008168:	6923      	ldr	r3, [r4, #16]
 800816a:	b31b      	cbz	r3, 80081b4 <__swbuf_r+0x68>
 800816c:	6823      	ldr	r3, [r4, #0]
 800816e:	6922      	ldr	r2, [r4, #16]
 8008170:	b2f6      	uxtb	r6, r6
 8008172:	1a98      	subs	r0, r3, r2
 8008174:	6963      	ldr	r3, [r4, #20]
 8008176:	4637      	mov	r7, r6
 8008178:	4283      	cmp	r3, r0
 800817a:	dc04      	bgt.n	8008186 <__swbuf_r+0x3a>
 800817c:	4621      	mov	r1, r4
 800817e:	4628      	mov	r0, r5
 8008180:	f7ff fdb0 	bl	8007ce4 <_fflush_r>
 8008184:	b9e0      	cbnz	r0, 80081c0 <__swbuf_r+0x74>
 8008186:	68a3      	ldr	r3, [r4, #8]
 8008188:	3b01      	subs	r3, #1
 800818a:	60a3      	str	r3, [r4, #8]
 800818c:	6823      	ldr	r3, [r4, #0]
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	6022      	str	r2, [r4, #0]
 8008192:	701e      	strb	r6, [r3, #0]
 8008194:	6962      	ldr	r2, [r4, #20]
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	429a      	cmp	r2, r3
 800819a:	d004      	beq.n	80081a6 <__swbuf_r+0x5a>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	07db      	lsls	r3, r3, #31
 80081a0:	d506      	bpl.n	80081b0 <__swbuf_r+0x64>
 80081a2:	2e0a      	cmp	r6, #10
 80081a4:	d104      	bne.n	80081b0 <__swbuf_r+0x64>
 80081a6:	4621      	mov	r1, r4
 80081a8:	4628      	mov	r0, r5
 80081aa:	f7ff fd9b 	bl	8007ce4 <_fflush_r>
 80081ae:	b938      	cbnz	r0, 80081c0 <__swbuf_r+0x74>
 80081b0:	4638      	mov	r0, r7
 80081b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081b4:	4621      	mov	r1, r4
 80081b6:	4628      	mov	r0, r5
 80081b8:	f000 f806 	bl	80081c8 <__swsetup_r>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d0d5      	beq.n	800816c <__swbuf_r+0x20>
 80081c0:	f04f 37ff 	mov.w	r7, #4294967295
 80081c4:	e7f4      	b.n	80081b0 <__swbuf_r+0x64>
	...

080081c8 <__swsetup_r>:
 80081c8:	b538      	push	{r3, r4, r5, lr}
 80081ca:	4b2a      	ldr	r3, [pc, #168]	; (8008274 <__swsetup_r+0xac>)
 80081cc:	4605      	mov	r5, r0
 80081ce:	6818      	ldr	r0, [r3, #0]
 80081d0:	460c      	mov	r4, r1
 80081d2:	b118      	cbz	r0, 80081dc <__swsetup_r+0x14>
 80081d4:	6a03      	ldr	r3, [r0, #32]
 80081d6:	b90b      	cbnz	r3, 80081dc <__swsetup_r+0x14>
 80081d8:	f7fd ff92 	bl	8006100 <__sinit>
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80081e2:	0718      	lsls	r0, r3, #28
 80081e4:	d422      	bmi.n	800822c <__swsetup_r+0x64>
 80081e6:	06d9      	lsls	r1, r3, #27
 80081e8:	d407      	bmi.n	80081fa <__swsetup_r+0x32>
 80081ea:	2309      	movs	r3, #9
 80081ec:	602b      	str	r3, [r5, #0]
 80081ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80081f2:	f04f 30ff 	mov.w	r0, #4294967295
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	e034      	b.n	8008264 <__swsetup_r+0x9c>
 80081fa:	0758      	lsls	r0, r3, #29
 80081fc:	d512      	bpl.n	8008224 <__swsetup_r+0x5c>
 80081fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008200:	b141      	cbz	r1, 8008214 <__swsetup_r+0x4c>
 8008202:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008206:	4299      	cmp	r1, r3
 8008208:	d002      	beq.n	8008210 <__swsetup_r+0x48>
 800820a:	4628      	mov	r0, r5
 800820c:	f7fe ff1c 	bl	8007048 <_free_r>
 8008210:	2300      	movs	r3, #0
 8008212:	6363      	str	r3, [r4, #52]	; 0x34
 8008214:	89a3      	ldrh	r3, [r4, #12]
 8008216:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800821a:	81a3      	strh	r3, [r4, #12]
 800821c:	2300      	movs	r3, #0
 800821e:	6063      	str	r3, [r4, #4]
 8008220:	6923      	ldr	r3, [r4, #16]
 8008222:	6023      	str	r3, [r4, #0]
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	f043 0308 	orr.w	r3, r3, #8
 800822a:	81a3      	strh	r3, [r4, #12]
 800822c:	6923      	ldr	r3, [r4, #16]
 800822e:	b94b      	cbnz	r3, 8008244 <__swsetup_r+0x7c>
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008236:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800823a:	d003      	beq.n	8008244 <__swsetup_r+0x7c>
 800823c:	4621      	mov	r1, r4
 800823e:	4628      	mov	r0, r5
 8008240:	f000 f883 	bl	800834a <__smakebuf_r>
 8008244:	89a0      	ldrh	r0, [r4, #12]
 8008246:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800824a:	f010 0301 	ands.w	r3, r0, #1
 800824e:	d00a      	beq.n	8008266 <__swsetup_r+0x9e>
 8008250:	2300      	movs	r3, #0
 8008252:	60a3      	str	r3, [r4, #8]
 8008254:	6963      	ldr	r3, [r4, #20]
 8008256:	425b      	negs	r3, r3
 8008258:	61a3      	str	r3, [r4, #24]
 800825a:	6923      	ldr	r3, [r4, #16]
 800825c:	b943      	cbnz	r3, 8008270 <__swsetup_r+0xa8>
 800825e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008262:	d1c4      	bne.n	80081ee <__swsetup_r+0x26>
 8008264:	bd38      	pop	{r3, r4, r5, pc}
 8008266:	0781      	lsls	r1, r0, #30
 8008268:	bf58      	it	pl
 800826a:	6963      	ldrpl	r3, [r4, #20]
 800826c:	60a3      	str	r3, [r4, #8]
 800826e:	e7f4      	b.n	800825a <__swsetup_r+0x92>
 8008270:	2000      	movs	r0, #0
 8008272:	e7f7      	b.n	8008264 <__swsetup_r+0x9c>
 8008274:	2000007c 	.word	0x2000007c

08008278 <_raise_r>:
 8008278:	291f      	cmp	r1, #31
 800827a:	b538      	push	{r3, r4, r5, lr}
 800827c:	4604      	mov	r4, r0
 800827e:	460d      	mov	r5, r1
 8008280:	d904      	bls.n	800828c <_raise_r+0x14>
 8008282:	2316      	movs	r3, #22
 8008284:	6003      	str	r3, [r0, #0]
 8008286:	f04f 30ff 	mov.w	r0, #4294967295
 800828a:	bd38      	pop	{r3, r4, r5, pc}
 800828c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800828e:	b112      	cbz	r2, 8008296 <_raise_r+0x1e>
 8008290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008294:	b94b      	cbnz	r3, 80082aa <_raise_r+0x32>
 8008296:	4620      	mov	r0, r4
 8008298:	f000 f830 	bl	80082fc <_getpid_r>
 800829c:	462a      	mov	r2, r5
 800829e:	4601      	mov	r1, r0
 80082a0:	4620      	mov	r0, r4
 80082a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082a6:	f000 b817 	b.w	80082d8 <_kill_r>
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d00a      	beq.n	80082c4 <_raise_r+0x4c>
 80082ae:	1c59      	adds	r1, r3, #1
 80082b0:	d103      	bne.n	80082ba <_raise_r+0x42>
 80082b2:	2316      	movs	r3, #22
 80082b4:	6003      	str	r3, [r0, #0]
 80082b6:	2001      	movs	r0, #1
 80082b8:	e7e7      	b.n	800828a <_raise_r+0x12>
 80082ba:	2400      	movs	r4, #0
 80082bc:	4628      	mov	r0, r5
 80082be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082c2:	4798      	blx	r3
 80082c4:	2000      	movs	r0, #0
 80082c6:	e7e0      	b.n	800828a <_raise_r+0x12>

080082c8 <raise>:
 80082c8:	4b02      	ldr	r3, [pc, #8]	; (80082d4 <raise+0xc>)
 80082ca:	4601      	mov	r1, r0
 80082cc:	6818      	ldr	r0, [r3, #0]
 80082ce:	f7ff bfd3 	b.w	8008278 <_raise_r>
 80082d2:	bf00      	nop
 80082d4:	2000007c 	.word	0x2000007c

080082d8 <_kill_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	2300      	movs	r3, #0
 80082dc:	4d06      	ldr	r5, [pc, #24]	; (80082f8 <_kill_r+0x20>)
 80082de:	4604      	mov	r4, r0
 80082e0:	4608      	mov	r0, r1
 80082e2:	4611      	mov	r1, r2
 80082e4:	602b      	str	r3, [r5, #0]
 80082e6:	f7fa f91e 	bl	8002526 <_kill>
 80082ea:	1c43      	adds	r3, r0, #1
 80082ec:	d102      	bne.n	80082f4 <_kill_r+0x1c>
 80082ee:	682b      	ldr	r3, [r5, #0]
 80082f0:	b103      	cbz	r3, 80082f4 <_kill_r+0x1c>
 80082f2:	6023      	str	r3, [r4, #0]
 80082f4:	bd38      	pop	{r3, r4, r5, pc}
 80082f6:	bf00      	nop
 80082f8:	20000570 	.word	0x20000570

080082fc <_getpid_r>:
 80082fc:	f7fa b90c 	b.w	8002518 <_getpid>

08008300 <__swhatbuf_r>:
 8008300:	b570      	push	{r4, r5, r6, lr}
 8008302:	460c      	mov	r4, r1
 8008304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008308:	4615      	mov	r5, r2
 800830a:	2900      	cmp	r1, #0
 800830c:	461e      	mov	r6, r3
 800830e:	b096      	sub	sp, #88	; 0x58
 8008310:	da0c      	bge.n	800832c <__swhatbuf_r+0x2c>
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	2100      	movs	r1, #0
 8008316:	f013 0f80 	tst.w	r3, #128	; 0x80
 800831a:	bf0c      	ite	eq
 800831c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008320:	2340      	movne	r3, #64	; 0x40
 8008322:	2000      	movs	r0, #0
 8008324:	6031      	str	r1, [r6, #0]
 8008326:	602b      	str	r3, [r5, #0]
 8008328:	b016      	add	sp, #88	; 0x58
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	466a      	mov	r2, sp
 800832e:	f000 f849 	bl	80083c4 <_fstat_r>
 8008332:	2800      	cmp	r0, #0
 8008334:	dbed      	blt.n	8008312 <__swhatbuf_r+0x12>
 8008336:	9901      	ldr	r1, [sp, #4]
 8008338:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800833c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008340:	4259      	negs	r1, r3
 8008342:	4159      	adcs	r1, r3
 8008344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008348:	e7eb      	b.n	8008322 <__swhatbuf_r+0x22>

0800834a <__smakebuf_r>:
 800834a:	898b      	ldrh	r3, [r1, #12]
 800834c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800834e:	079d      	lsls	r5, r3, #30
 8008350:	4606      	mov	r6, r0
 8008352:	460c      	mov	r4, r1
 8008354:	d507      	bpl.n	8008366 <__smakebuf_r+0x1c>
 8008356:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800835a:	6023      	str	r3, [r4, #0]
 800835c:	6123      	str	r3, [r4, #16]
 800835e:	2301      	movs	r3, #1
 8008360:	6163      	str	r3, [r4, #20]
 8008362:	b002      	add	sp, #8
 8008364:	bd70      	pop	{r4, r5, r6, pc}
 8008366:	466a      	mov	r2, sp
 8008368:	ab01      	add	r3, sp, #4
 800836a:	f7ff ffc9 	bl	8008300 <__swhatbuf_r>
 800836e:	9900      	ldr	r1, [sp, #0]
 8008370:	4605      	mov	r5, r0
 8008372:	4630      	mov	r0, r6
 8008374:	f7fe fed8 	bl	8007128 <_malloc_r>
 8008378:	b948      	cbnz	r0, 800838e <__smakebuf_r+0x44>
 800837a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837e:	059a      	lsls	r2, r3, #22
 8008380:	d4ef      	bmi.n	8008362 <__smakebuf_r+0x18>
 8008382:	f023 0303 	bic.w	r3, r3, #3
 8008386:	f043 0302 	orr.w	r3, r3, #2
 800838a:	81a3      	strh	r3, [r4, #12]
 800838c:	e7e3      	b.n	8008356 <__smakebuf_r+0xc>
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	6020      	str	r0, [r4, #0]
 8008392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008396:	81a3      	strh	r3, [r4, #12]
 8008398:	9b00      	ldr	r3, [sp, #0]
 800839a:	6120      	str	r0, [r4, #16]
 800839c:	6163      	str	r3, [r4, #20]
 800839e:	9b01      	ldr	r3, [sp, #4]
 80083a0:	b15b      	cbz	r3, 80083ba <__smakebuf_r+0x70>
 80083a2:	4630      	mov	r0, r6
 80083a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a8:	f000 f81e 	bl	80083e8 <_isatty_r>
 80083ac:	b128      	cbz	r0, 80083ba <__smakebuf_r+0x70>
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	f023 0303 	bic.w	r3, r3, #3
 80083b4:	f043 0301 	orr.w	r3, r3, #1
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	431d      	orrs	r5, r3
 80083be:	81a5      	strh	r5, [r4, #12]
 80083c0:	e7cf      	b.n	8008362 <__smakebuf_r+0x18>
	...

080083c4 <_fstat_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	2300      	movs	r3, #0
 80083c8:	4d06      	ldr	r5, [pc, #24]	; (80083e4 <_fstat_r+0x20>)
 80083ca:	4604      	mov	r4, r0
 80083cc:	4608      	mov	r0, r1
 80083ce:	4611      	mov	r1, r2
 80083d0:	602b      	str	r3, [r5, #0]
 80083d2:	f7fa f906 	bl	80025e2 <_fstat>
 80083d6:	1c43      	adds	r3, r0, #1
 80083d8:	d102      	bne.n	80083e0 <_fstat_r+0x1c>
 80083da:	682b      	ldr	r3, [r5, #0]
 80083dc:	b103      	cbz	r3, 80083e0 <_fstat_r+0x1c>
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	bd38      	pop	{r3, r4, r5, pc}
 80083e2:	bf00      	nop
 80083e4:	20000570 	.word	0x20000570

080083e8 <_isatty_r>:
 80083e8:	b538      	push	{r3, r4, r5, lr}
 80083ea:	2300      	movs	r3, #0
 80083ec:	4d05      	ldr	r5, [pc, #20]	; (8008404 <_isatty_r+0x1c>)
 80083ee:	4604      	mov	r4, r0
 80083f0:	4608      	mov	r0, r1
 80083f2:	602b      	str	r3, [r5, #0]
 80083f4:	f7fa f904 	bl	8002600 <_isatty>
 80083f8:	1c43      	adds	r3, r0, #1
 80083fa:	d102      	bne.n	8008402 <_isatty_r+0x1a>
 80083fc:	682b      	ldr	r3, [r5, #0]
 80083fe:	b103      	cbz	r3, 8008402 <_isatty_r+0x1a>
 8008400:	6023      	str	r3, [r4, #0]
 8008402:	bd38      	pop	{r3, r4, r5, pc}
 8008404:	20000570 	.word	0x20000570

08008408 <_init>:
 8008408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840a:	bf00      	nop
 800840c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840e:	bc08      	pop	{r3}
 8008410:	469e      	mov	lr, r3
 8008412:	4770      	bx	lr

08008414 <_fini>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	bf00      	nop
 8008418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841a:	bc08      	pop	{r3}
 800841c:	469e      	mov	lr, r3
 800841e:	4770      	bx	lr
